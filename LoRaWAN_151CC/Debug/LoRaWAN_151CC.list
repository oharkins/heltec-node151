
LoRaWAN_151CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001224c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0801238c  0801238c  0002238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012970  08012970  00030198  2**0
                  CONTENTS
  4 .ARM          00000000  08012970  08012970  00030198  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012970  08012970  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012970  08012970  00022970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012974  08012974  00022974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08012978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e0  20000198  08012b10  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  08012b10  00031578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036c13  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006312  00000000  00000000  00066dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b48  00000000  00000000  0006d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  0006ec30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ead  00000000  00000000  000704c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e5cc  00000000  00000000  00091375  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a50c7  00000000  00000000  000af941  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007368  00000000  00000000  00154a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000198 	.word	0x20000198
 800015c:	00000000 	.word	0x00000000
 8000160:	08012374 	.word	0x08012374

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000019c 	.word	0x2000019c
 800017c:	08012374 	.word	0x08012374

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fdc6 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f80d 	bl	8000afc <HAL_InitTick>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	e001      	b.n	8000af2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aee:	f00d fb3d 	bl	800e16c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d022      	beq.n	8000b56 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_InitTick+0x6c>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_InitTick+0x68>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fdd4 	bl	80016d2 <HAL_SYSTICK_Config>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10f      	bne.n	8000b50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	d809      	bhi.n	8000b4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b36:	2200      	movs	r2, #0
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3e:	f000 fd9e 	bl	800167e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0x70>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e004      	b.n	8000b5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e001      	b.n	8000b5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000004 	.word	0x20000004
 8000b68:	2000012c 	.word	0x2000012c
 8000b6c:	20000000 	.word	0x20000000

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000970 	.word	0x20000970
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000970 	.word	0x20000970

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d004      	beq.n	8000bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_Delay+0x40>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bcc:	bf00      	nop
 8000bce:	f7ff ffe1 	bl	8000b94 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8f7      	bhi.n	8000bce <HAL_Delay+0x26>
  {
  }
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6053      	str	r3, [r2, #4]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	e0042000 	.word	0xe0042000

08000c08 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000c12:	f023 0302 	bic.w	r3, r3, #2
 8000c16:	6053      	str	r3, [r2, #4]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	e0042000 	.word	0xe0042000

08000c24 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000c2e:	f023 0304 	bic.w	r3, r3, #4
 8000c32:	6053      	str	r3, [r2, #4]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	e0042000 	.word	0xe0042000

08000c40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e127      	b.n	8000eb0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d115      	bne.n	8000c9a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	4b8e      	ldr	r3, [pc, #568]	; (8000eb8 <HAL_ADC_Init+0x278>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a8d      	ldr	r2, [pc, #564]	; (8000eb8 <HAL_ADC_Init+0x278>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6213      	str	r3, [r2, #32]
 8000c88:	4b8b      	ldr	r3, [pc, #556]	; (8000eb8 <HAL_ADC_Init+0x278>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f00d fa97 	bl	800e1c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 80ff 	bne.w	8000ea6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cb0:	f023 0302 	bic.w	r3, r3, #2
 8000cb4:	f043 0202 	orr.w	r2, r3, #2
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000cbc:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <HAL_ADC_Init+0x27c>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	497c      	ldr	r1, [pc, #496]	; (8000ebc <HAL_ADC_Init+0x27c>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000cd6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000cfa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000d22:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d26:	4313      	orrs	r3, r2
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d007      	beq.n	8000d42 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	2b40      	cmp	r3, #64	; 0x40
 8000d4e:	d04f      	beq.n	8000df0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d56:	4313      	orrs	r3, r2
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000d62:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6912      	ldr	r2, [r2, #16]
 8000d68:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000d6c:	d003      	beq.n	8000d76 <HAL_ADC_Init+0x136>
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6912      	ldr	r2, [r2, #16]
 8000d72:	2a01      	cmp	r2, #1
 8000d74:	d102      	bne.n	8000d7c <HAL_ADC_Init+0x13c>
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	e000      	b.n	8000d7e <HAL_ADC_Init+0x13e>
 8000d7c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000d7e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d82:	4313      	orrs	r3, r2
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d125      	bne.n	8000ddc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d114      	bne.n	8000dc4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	fa92 f2a2 	rbit	r2, r2
 8000dac:	617a      	str	r2, [r7, #20]
  return result;
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc2:	e00b      	b.n	8000ddc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f043 0220 	orr.w	r2, r3, #32
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <HAL_ADC_Init+0x280>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_ADC_Init+0x284>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e0c:	d003      	beq.n	8000e16 <HAL_ADC_Init+0x1d6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d119      	bne.n	8000e4a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	3b01      	subs	r3, #1
 8000e26:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000e2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	fa92 f2a2 	rbit	r2, r2
 8000e32:	60fa      	str	r2, [r7, #12]
  return result;
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	fa03 f202 	lsl.w	r2, r3, r2
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
 8000e48:	e007      	b.n	8000e5a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_ADC_Init+0x288>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d10b      	bne.n	8000e82 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	f023 0303 	bic.w	r3, r3, #3
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e80:	e014      	b.n	8000eac <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f023 0312 	bic.w	r3, r3, #18
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ea4:	e002      	b.n	8000eac <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3738      	adds	r7, #56	; 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40012700 	.word	0x40012700
 8000ec0:	fcfc16ff 	.word	0xfcfc16ff
 8000ec4:	c0fff189 	.word	0xc0fff189
 8000ec8:	bf80fffe 	.word	0xbf80fffe

08000ecc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Start+0x1a>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e04e      	b.n	8000f84 <HAL_ADC_Start+0xb8>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fa5e 	bl	80013b0 <ADC_Enable>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d141      	bne.n	8000f82 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3c:	d106      	bne.n	8000f4c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f42:	f023 0206 	bic.w	r2, r3, #6
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	651a      	str	r2, [r3, #80]	; 0x50
 8000f4a:	e002      	b.n	8000f52 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f62:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f80:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_Stop+0x1a>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e01a      	b.n	8000fdc <HAL_ADC_Stop+0x50>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa54 	bl	800145c <ADC_ConversionStop_Disable>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001000:	d113      	bne.n	800102a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800100c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001010:	d10b      	bne.n	800102a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f043 0220 	orr.w	r2, r3, #32
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e061      	b.n	80010ee <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800102a:	f7ff fdb3 	bl	8000b94 <HAL_GetTick>
 800102e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001030:	e01a      	b.n	8001068 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d016      	beq.n	8001068 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_ADC_PollForConversion+0x6c>
 8001040:	f7ff fda8 	bl	8000b94 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d20b      	bcs.n	8001068 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	f043 0204 	orr.w	r2, r3, #4
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e042      	b.n	80010ee <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0dd      	beq.n	8001032 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f06f 0212 	mvn.w	r2, #18
 8001086:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d124      	bne.n	80010ec <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d11f      	bne.n	80010ec <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x20>
 800112c:	2302      	movs	r3, #2
 800112e:	e134      	b.n	800139a <HAL_ADC_ConfigChannel+0x28a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b06      	cmp	r3, #6
 800113e:	d81c      	bhi.n	800117a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	3b05      	subs	r3, #5
 8001152:	221f      	movs	r2, #31
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	4019      	ands	r1, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	3b05      	subs	r3, #5
 800116c:	fa00 f203 	lsl.w	r2, r0, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
 8001178:	e07e      	b.n	8001278 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d81c      	bhi.n	80011bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	3b23      	subs	r3, #35	; 0x23
 8001194:	221f      	movs	r2, #31
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	4019      	ands	r1, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b23      	subs	r3, #35	; 0x23
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ba:	e05d      	b.n	8001278 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b12      	cmp	r3, #18
 80011c2:	d81c      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b41      	subs	r3, #65	; 0x41
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4019      	ands	r1, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b41      	subs	r3, #65	; 0x41
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
 80011fc:	e03c      	b.n	8001278 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b18      	cmp	r3, #24
 8001204:	d81c      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b5f      	subs	r3, #95	; 0x5f
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	4019      	ands	r1, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b5f      	subs	r3, #95	; 0x5f
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e01b      	b.n	8001278 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b7d      	subs	r3, #125	; 0x7d
 8001252:	221f      	movs	r2, #31
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	4019      	ands	r1, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b7d      	subs	r3, #125	; 0x7d
 800126c:	fa00 f203 	lsl.w	r2, r0, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d81a      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6959      	ldr	r1, [r3, #20]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	2207      	movs	r2, #7
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	4019      	ands	r1, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6898      	ldr	r0, [r3, #8]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	e042      	b.n	800133c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b13      	cmp	r3, #19
 80012bc:	d81c      	bhi.n	80012f8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	2207      	movs	r2, #7
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4019      	ands	r1, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6898      	ldr	r0, [r3, #8]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	3b1e      	subs	r3, #30
 80012ea:	fa00 f203 	lsl.w	r2, r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	e021      	b.n	800133c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b1a      	cmp	r3, #26
 80012fe:	d81c      	bhi.n	800133a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d9      	ldr	r1, [r3, #12]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	3b3c      	subs	r3, #60	; 0x3c
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	3b3c      	subs	r3, #60	; 0x3c
 800132c:	fa00 f203 	lsl.w	r2, r0, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	e000      	b.n	800133c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800133a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b10      	cmp	r3, #16
 8001342:	d003      	beq.n	800134c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001348:	2b11      	cmp	r3, #17
 800134a:	d121      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_ADC_ConfigChannel+0x294>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d11b      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_ADC_ConfigChannel+0x294>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_ADC_ConfigChannel+0x294>)
 800135e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001362:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b10      	cmp	r3, #16
 800136a:	d111      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_ADC_ConfigChannel+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_ADC_ConfigChannel+0x29c>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9a      	lsrs	r2, r3, #18
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001382:	e002      	b.n	800138a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40012700 	.word	0x40012700
 80013a8:	2000012c 	.word	0x2000012c
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	2b40      	cmp	r3, #64	; 0x40
 80013cc:	d03c      	beq.n	8001448 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <ADC_Enable+0xa4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <ADC_Enable+0xa8>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9a      	lsrs	r2, r3, #18
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80013f2:	e002      	b.n	80013fa <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f9      	bne.n	80013f4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001400:	f7ff fbc8 	bl	8000b94 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001406:	e018      	b.n	800143a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001408:	f7ff fbc4 	bl	8000b94 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d911      	bls.n	800143a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e007      	b.n	800144a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001444:	2b40      	cmp	r3, #64	; 0x40
 8001446:	d1df      	bne.n	8001408 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000012c 	.word	0x2000012c
 8001458:	431bde83 	.word	0x431bde83

0800145c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d127      	bne.n	80014c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001486:	f7ff fb85 	bl	8000b94 <HAL_GetTick>
 800148a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800148c:	e014      	b.n	80014b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800148e:	f7ff fb81 	bl	8000b94 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d90d      	bls.n	80014b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f043 0210 	orr.w	r2, r3, #16
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e007      	b.n	80014c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d0e3      	beq.n	800148e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d106      	bne.n	8001708 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001706:	e005      	b.n	8001714 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001728:	f000 f802 	bl	8001730 <HAL_SYSTICK_Callback>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d005      	beq.n	8001760 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2204      	movs	r2, #4
 8001758:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e029      	b.n	80017b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020e 	bic.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f003 021c 	and.w	r2, r3, #28
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    }
  }
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017d6:	e154      	b.n	8001a82 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8146 	beq.w	8001a7c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b12      	cmp	r3, #18
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	6939      	ldr	r1, [r7, #16]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d00b      	beq.n	800189c <HAL_GPIO_Init+0xdc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001890:	2b11      	cmp	r3, #17
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80a0 	beq.w	8001a7c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193c:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d019      	beq.n	80019b4 <HAL_GPIO_Init+0x1f4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2e8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1f0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1ec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1e8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <HAL_GPIO_Init+0x2f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1e4>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e008      	b.n	80019b6 <HAL_GPIO_Init+0x1f6>
 80019a4:	2305      	movs	r3, #5
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x1f6>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e004      	b.n	80019b6 <HAL_GPIO_Init+0x1f6>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x1f6>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_GPIO_Init+0x1f6>
 80019b4:	2300      	movs	r3, #0
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	f002 0203 	and.w	r2, r2, #3
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	4093      	lsls	r3, r2
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c6:	4936      	ldr	r1, [pc, #216]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f8:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f aea3 	bne.w	80017d8 <HAL_GPIO_Init+0x18>
  } 
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001ad2:	e0b8      	b.n	8001c46 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80ab 	beq.w	8001c40 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8001aea:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_GPIO_DeInit+0x1a4>)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_GPIO_DeInit+0x1a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d019      	beq.n	8001b48 <HAL_GPIO_DeInit+0x8c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_GPIO_DeInit+0x1ac>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_GPIO_DeInit+0x88>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <HAL_GPIO_DeInit+0x1b0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00d      	beq.n	8001b40 <HAL_GPIO_DeInit+0x84>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_GPIO_DeInit+0x1b4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_DeInit+0x80>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <HAL_GPIO_DeInit+0x1b8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_GPIO_DeInit+0x7c>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e008      	b.n	8001b4a <HAL_GPIO_DeInit+0x8e>
 8001b38:	2305      	movs	r3, #5
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_DeInit+0x8e>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_DeInit+0x8e>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_DeInit+0x8e>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_DeInit+0x8e>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d132      	bne.n	8001bc0 <HAL_GPIO_DeInit+0x104>
      {
        tmp = (0x0FU) << (4 * (position & 0x03));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8001b6a:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <HAL_GPIO_DeInit+0x1a4>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	4839      	ldr	r0, [pc, #228]	; (8001c60 <HAL_GPIO_DeInit+0x1a4>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	400a      	ands	r2, r1
 8001b82:	3302      	adds	r3, #2
 8001b84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4936      	ldr	r1, [pc, #216]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4932      	ldr	r1, [pc, #200]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	492f      	ldr	r1, [pc, #188]	; (8001c78 <HAL_GPIO_DeInit+0x1bc>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2103      	movs	r1, #3
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	08d2      	lsrs	r2, r2, #3
 8001bf6:	4019      	ands	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2103      	movs	r1, #3
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2103      	movs	r1, #3
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f af40 	bne.w	8001ad4 <HAL_GPIO_DeInit+0x18>
  }
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00a fc58 	bl	800c580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fb58 	bl	800539e <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf8:	d102      	bne.n	8001d00 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fa90 	bl	8002220 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fb4a 	bl	800539e <USB_ReadInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d14:	d112      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f00f fb51 	bl	80113d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d34:	2100      	movs	r1, #0
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8d2 	bl	8001ee0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fb2c 	bl	800539e <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d50:	d10b      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d64:	b292      	uxth	r2, r2
 8001d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb15 	bl	800539e <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7e:	d10b      	bne.n	8001d98 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d92:	b292      	uxth	r2, r2
 8001d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fafe 	bl	800539e <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d126      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0204 	bic.w	r2, r2, #4
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f00f fb32 	bl	8011448 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 facc 	bl	800539e <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e10:	d131      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0208 	orr.w	r2, r2, #8
 8001e24:	b292      	uxth	r2, r2
 8001e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0204 	orr.w	r2, r2, #4
 8001e54:	b292      	uxth	r2, r2
 8001e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fa9d 	bl	800539e <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6e:	d002      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f00f facf 	bl	8011414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fa8f 	bl	800539e <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8a:	d10e      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f00f fa88 	bl	80113ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fa75 	bl	800539e <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_SetAddress+0x1a>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e013      	b.n	8001f22 <HAL_PCD_SetAddress+0x42>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fa30 	bl	8005378 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	803b      	strh	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0b      	bge.n	8001f68 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	3328      	adds	r3, #40	; 0x28
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	705a      	strb	r2, [r3, #1]
 8001f66:	e00b      	b.n	8001f80 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f8c:	883a      	ldrh	r2, [r7, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	78ba      	ldrb	r2, [r7, #2]
 8001f96:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d102      	bne.n	8001fb6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_PCD_EP_Open+0x9a>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e00e      	b.n	8001fe2 <HAL_PCD_EP_Open+0xb8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fb66 	bl	80046a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2200      	movs	r2, #0
 8002022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	b2da      	uxtb	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fe17 	bl	8004c74 <USB_EPStartXfer>
 8002046:	e005      	b.n	8002054 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6979      	ldr	r1, [r7, #20]
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fe10 	bl	8004c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	460b      	mov	r3, r1
 800206c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	015b      	lsls	r3, r3, #5
 8002076:	3328      	adds	r3, #40	; 0x28
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2201      	movs	r2, #1
 8002094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	b2da      	uxtb	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fdde 	bl	8004c74 <USB_EPStartXfer>
 80020b8:	e005      	b.n	80020c6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fdd7 	bl	8004c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 0207 	and.w	r2, r3, #7
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d901      	bls.n	80020ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e046      	b.n	800217c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da0b      	bge.n	800210e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	015b      	lsls	r3, r3, #5
 80020fe:	3328      	adds	r3, #40	; 0x28
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
 800210c:	e009      	b.n	8002122 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_SetStall+0x72>
 800213e:	2302      	movs	r3, #2
 8002140:	e01c      	b.n	800217c <HAL_PCD_EP_SetStall+0xac>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f83b 	bl	80051cc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f003 f925 	bl	80053bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d901      	bls.n	80021a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e03a      	b.n	8002218 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0b      	bge.n	80021c2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	015b      	lsls	r3, r3, #5
 80021b2:	3328      	adds	r3, #40	; 0x28
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	705a      	strb	r2, [r3, #1]
 80021c0:	e00b      	b.n	80021da <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	015b      	lsls	r3, r3, #5
 80021ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_EP_ClrStall+0x76>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e00e      	b.n	8002218 <HAL_PCD_EP_ClrStall+0x94>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f003 f821 	bl	8005250 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002228:	e279      	b.n	800271e <PCD_EP_ISR_Handler+0x4fe>
  {
    wIstr = hpcd->Instance->ISTR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002232:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800223e:	7d7b      	ldrb	r3, [r7, #21]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 8139 	bne.w	80024b8 <PCD_EP_ISR_Handler+0x298>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002246:	8afb      	ldrh	r3, [r7, #22]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d151      	bne.n	80022f4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002260:	b29c      	uxth	r4, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3328      	adds	r3, #40	; 0x28
 8002276:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	3302      	adds	r3, #2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	441a      	add	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f00f f869 	bl	801138c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 822b 	beq.w	800271e <PCD_EP_ISR_Handler+0x4fe>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 8226 	bne.w	800271e <PCD_EP_ISR_Handler+0x4fe>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b292      	uxth	r2, r2
 80022e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f2:	e214      	b.n	800271e <PCD_EP_ISR_Handler+0x4fe>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022fa:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002304:	8a7b      	ldrh	r3, [r7, #18]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	2b00      	cmp	r3, #0
 800230c:	d033      	beq.n	8002376 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	3306      	adds	r3, #6
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	88da      	ldrh	r2, [r3, #6]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f003 f884 	bl	800545a <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29a      	uxth	r2, r3
 800235a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800235e:	4013      	ands	r3, r2
 8002360:	b29c      	uxth	r4, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800236a:	b292      	uxth	r2, r2
 800236c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f00e ffe2 	bl	8011338 <HAL_PCD_SetupStageCallback>
 8002374:	e1d3      	b.n	800271e <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002376:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f280 81cf 	bge.w	800271e <PCD_EP_ISR_Handler+0x4fe>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29a      	uxth	r2, r3
 8002388:	f640 738f 	movw	r3, #3983	; 0xf8f
 800238c:	4013      	ands	r3, r2
 800238e:	b29c      	uxth	r4, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002398:	b292      	uxth	r2, r2
 800239a:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	3306      	adds	r3, #6
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d011      	beq.n	80023f4 <PCD_EP_ISR_Handler+0x1d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6959      	ldr	r1, [r3, #20]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88da      	ldrh	r2, [r3, #6]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f003 f83a 	bl	800545a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	441a      	add	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023f4:	2100      	movs	r1, #0
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f00e ffb0 	bl	801135c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461c      	mov	r4, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240a:	b29b      	uxth	r3, r3
 800240c:	441c      	add	r4, r3
 800240e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d110      	bne.n	800243e <PCD_EP_ISR_Handler+0x21e>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002424:	b29a      	uxth	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e026      	b.n	800248c <PCD_EP_ISR_Handler+0x26c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b3d      	cmp	r3, #61	; 0x3d
 8002444:	d813      	bhi.n	800246e <PCD_EP_ISR_Handler+0x24e>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <PCD_EP_ISR_Handler+0x240>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	3301      	adds	r3, #1
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	b29b      	uxth	r3, r3
 8002464:	029b      	lsls	r3, r3, #10
 8002466:	b29a      	uxth	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	e00e      	b.n	800248c <PCD_EP_ISR_Handler+0x26c>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	b29b      	uxth	r3, r3
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249c:	b29c      	uxth	r4, r3
 800249e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80024a2:	b29c      	uxth	r4, r3
 80024a4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80024a8:	b29c      	uxth	r4, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4ba3      	ldr	r3, [pc, #652]	; (800273c <PCD_EP_ISR_Handler+0x51c>)
 80024b0:	4323      	orrs	r3, r4
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
 80024b6:	e132      	b.n	800271e <PCD_EP_ISR_Handler+0x4fe>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	7d7b      	ldrb	r3, [r7, #21]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f280 80d1 	bge.w	8002674 <PCD_EP_ISR_Handler+0x454>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	7d7b      	ldrb	r3, [r7, #21]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024e6:	4013      	ands	r3, r2
 80024e8:	b29c      	uxth	r4, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	7d7b      	ldrb	r3, [r7, #21]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80024fa:	b292      	uxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024fe:	7d7b      	ldrb	r3, [r7, #21]
 8002500:	015b      	lsls	r3, r3, #5
 8002502:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <PCD_EP_ISR_Handler+0x338>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	3306      	adds	r3, #6
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253c:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800253e:	8bfb      	ldrh	r3, [r7, #30]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d072      	beq.n	800262a <PCD_EP_ISR_Handler+0x40a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6959      	ldr	r1, [r3, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88da      	ldrh	r2, [r3, #6]
 8002550:	8bfb      	ldrh	r3, [r7, #30]
 8002552:	f002 ff82 	bl	800545a <USB_ReadPMA>
 8002556:	e068      	b.n	800262a <PCD_EP_ISR_Handler+0x40a>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d021      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x396>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	3302      	adds	r3, #2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800259c:	8bfb      	ldrh	r3, [r7, #30]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02a      	beq.n	80025f8 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	891a      	ldrh	r2, [r3, #8]
 80025ae:	8bfb      	ldrh	r3, [r7, #30]
 80025b0:	f002 ff53 	bl	800545a <USB_ReadPMA>
 80025b4:	e020      	b.n	80025f8 <PCD_EP_ISR_Handler+0x3d8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	3306      	adds	r3, #6
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025de:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025e0:	8bfb      	ldrh	r3, [r7, #30]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6959      	ldr	r1, [r3, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	895a      	ldrh	r2, [r3, #10]
 80025f2:	8bfb      	ldrh	r3, [r7, #30]
 80025f4:	f002 ff31 	bl	800545a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	b29c      	uxth	r4, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <PCD_EP_ISR_Handler+0x520>)
 8002624:	4323      	orrs	r3, r4
 8002626:	b29b      	uxth	r3, r3
 8002628:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	8bfb      	ldrh	r3, [r7, #30]
 8002630:	441a      	add	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	8bfb      	ldrh	r3, [r7, #30]
 800263c:	441a      	add	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <PCD_EP_ISR_Handler+0x434>
 800264a:	8bfa      	ldrh	r2, [r7, #30]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d206      	bcs.n	8002662 <PCD_EP_ISR_Handler+0x442>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f00e fe7e 	bl	801135c <HAL_PCD_DataOutStageCallback>
 8002660:	e008      	b.n	8002674 <PCD_EP_ISR_Handler+0x454>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	7819      	ldrb	r1, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fcbb 	bl	8001fea <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002674:	8a7b      	ldrh	r3, [r7, #18]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d04f      	beq.n	800271e <PCD_EP_ISR_Handler+0x4fe>
      {
        ep = &hpcd->IN_ep[epindex];
 800267e:	7d7b      	ldrb	r3, [r7, #21]
 8002680:	015b      	lsls	r3, r3, #5
 8002682:	3328      	adds	r3, #40	; 0x28
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	7d7b      	ldrb	r3, [r7, #21]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	b29c      	uxth	r4, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	7d7b      	ldrb	r3, [r7, #21]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	3302      	adds	r3, #2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	441a      	add	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <PCD_EP_ISR_Handler+0x4ec>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f00e fe41 	bl	801138c <HAL_PCD_DataInStageCallback>
 800270a:	e008      	b.n	800271e <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	7819      	ldrb	r1, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fca0 	bl	800205e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002726:	b29b      	uxth	r3, r3
 8002728:	b21b      	sxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f6ff ad7d 	blt.w	800222a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	ffff8080 	.word	0xffff8080
 8002740:	ffff80c0 	.word	0xffff80c0

08002744 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	2310      	movs	r3, #16
 800274c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	603b      	str	r3, [r7, #0]
  return result;
 8002756:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002764:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8002768:	461a      	mov	r2, r3
 800276a:	2300      	movs	r3, #0
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_PWR_EnterSTOPMode+0x50>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_PWR_EnterSTOPMode+0x50>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_PWR_EnterSTOPMode+0x54>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_PWR_EnterSTOPMode+0x54>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80027a6:	bf30      	wfi
 80027a8:	e002      	b.n	80027b0 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80027aa:	bf40      	sev
    __WFE();
 80027ac:	bf20      	wfe
    __WFE();
 80027ae:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_PWR_EnterSTOPMode+0x54>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_PWR_EnterSTOPMode+0x54>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6113      	str	r3, [r2, #16]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40007000 	.word	0x40007000
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <HAL_PWREx_EnableFastWakeUp>:
  *         Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when
  *         exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027da:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	603b      	str	r3, [r7, #0]
  return result;
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* Enable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80027f2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80027f6:	461a      	mov	r2, r3
 80027f8:	2301      	movs	r3, #1
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002810:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	603b      	str	r3, [r7, #0]
  return result;
 800281a:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002828:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800282c:	461a      	mov	r2, r3
 800282e:	2301      	movs	r3, #1
 8002830:	6013      	str	r3, [r2, #0]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e31d      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b94      	ldr	r3, [pc, #592]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d07b      	beq.n	8002966 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d006      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d10f      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06a      	beq.n	8002964 <HAL_RCC_OscConfig+0x128>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d166      	bne.n	8002964 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e2f7      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7e      	ldr	r2, [pc, #504]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e02d      	b.n	800290c <HAL_RCC_OscConfig+0xd0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x96>
 80028b8:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a78      	ldr	r2, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a75      	ldr	r2, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0xd0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xb8>
 80028da:	4b71      	ldr	r3, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a70      	ldr	r2, [pc, #448]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6e      	ldr	r3, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6d      	ldr	r2, [pc, #436]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd0>
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe f93e 	bl	8000b94 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe f93a 	bl	8000b94 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e2ad      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe f92a 	bl	8000b94 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe f926 	bl	8000b94 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e299      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05a      	beq.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_OscConfig+0x176>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x160>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e276      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	493d      	ldr	r1, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b0:	e03a      	b.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCC_OscConfig+0x268>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe f8e8 	bl	8000b94 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe f8e4 	bl	8000b94 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e257      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	492a      	ldr	r1, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 80029fa:	e015      	b.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0x268>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe f8c7 	bl	8000b94 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe f8c3 	bl	8000b94 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e236      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b8 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d170      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x218>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e21a      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d921      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fbad 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e208      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	4901      	ldr	r1, [pc, #4]	; (8002aa0 <HAL_RCC_OscConfig+0x264>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e020      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2a6>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa8:	4ba4      	ldr	r3, [pc, #656]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	49a1      	ldr	r1, [pc, #644]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aba:	4ba0      	ldr	r3, [pc, #640]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	499c      	ldr	r1, [pc, #624]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fb78 	bl	80031c8 <RCC_SetFlashLatencyFromMSIRange>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1d3      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002af2:	4a92      	ldr	r2, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002af4:	6892      	ldr	r2, [r2, #8]
 8002af6:	0912      	lsrs	r2, r2, #4
 8002af8:	f002 020f 	and.w	r2, r2, #15
 8002afc:	4990      	ldr	r1, [pc, #576]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002afe:	5c8a      	ldrb	r2, [r1, r2]
 8002b00:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b02:	4a90      	ldr	r2, [pc, #576]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002b04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b06:	4b90      	ldr	r3, [pc, #576]	; (8002d48 <HAL_RCC_OscConfig+0x50c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fff6 	bl	8000afc <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d045      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	e1b5      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d029      	beq.n	8002b7a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b26:	4b89      	ldr	r3, [pc, #548]	; (8002d4c <HAL_RCC_OscConfig+0x510>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f832 	bl	8000b94 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b34:	f7fe f82e 	bl	8000b94 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1a1      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b46:	4b7d      	ldr	r3, [pc, #500]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b52:	4b7a      	ldr	r3, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4977      	ldr	r1, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b64:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4972      	ldr	r1, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b7a:	4b74      	ldr	r3, [pc, #464]	; (8002d4c <HAL_RCC_OscConfig+0x510>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f808 	bl	8000b94 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b88:	f7fe f804 	bl	8000b94 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e177      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b9a:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d030      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_OscConfig+0x514>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fd ffe8 	bl	8000b94 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fd ffe4 	bl	8000b94 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e157      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x38c>
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCC_OscConfig+0x514>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fd ffd1 	bl	8000b94 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7fd ffcd 	bl	8000b94 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e140      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b5 	beq.w	8002d8c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10d      	bne.n	8002c4e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6253      	str	r3, [r2, #36]	; 0x24
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_OscConfig+0x518>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_RCC_OscConfig+0x518>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x518>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fd ff95 	bl	8000b94 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fd ff91 	bl	8000b94 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e104      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x518>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x466>
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6353      	str	r3, [r2, #52]	; 0x34
 8002ca0:	e02d      	b.n	8002cfe <HAL_RCC_OscConfig+0x4c2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x488>
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc0:	6353      	str	r3, [r2, #52]	; 0x34
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCC_OscConfig+0x4c2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x4c2>
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf0:	6353      	str	r3, [r2, #52]	; 0x34
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cfc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fd ff45 	bl	8000b94 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ff41 	bl	8000b94 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0b2      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4d2>
 8002d30:	e023      	b.n	8002d7a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fd ff2f 	bl	8000b94 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d38:	e019      	b.n	8002d6e <HAL_RCC_OscConfig+0x532>
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	0801292c 	.word	0x0801292c
 8002d44:	2000012c 	.word	0x2000012c
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	42470020 	.word	0x42470020
 8002d50:	42470680 	.word	0x42470680
 8002d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fd ff1c 	bl	8000b94 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e08d      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d6e:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	4a43      	ldr	r2, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d079      	beq.n	8002e88 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d056      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d13b      	bne.n	8002e1a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <HAL_RCC_OscConfig+0x65c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fd fef4 	bl	8000b94 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fd fef0 	bl	8000b94 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e063      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc2:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dce:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4319      	orrs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	430b      	orrs	r3, r1
 8002de6:	492b      	ldr	r1, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_OscConfig+0x65c>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fecf 	bl	8000b94 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fd fecb 	bl	8000b94 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e03e      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x5be>
 8002e18:	e036      	b.n	8002e88 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_OscConfig+0x65c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd feb8 	bl	8000b94 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fd feb4 	bl	8000b94 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e027      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5ec>
 8002e46:	e01f      	b.n	8002e88 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01a      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_RCC_OscConfig+0x658>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	42470060 	.word	0x42470060

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e11a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d919      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x34>
 8002ec4:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a89      	ldr	r2, [pc, #548]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 0201 	bic.w	r2, r3, #1
 8002ed8:	4985      	ldr	r1, [pc, #532]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0f9      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efe:	4b7d      	ldr	r3, [pc, #500]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	497a      	ldr	r1, [pc, #488]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 808e 	beq.w	800303a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0d7      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0cb      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0bf      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0b7      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	495c      	ldr	r1, [pc, #368]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fd fe04 	bl	8000b94 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d112      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fd fdfc 	bl	8000b94 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e09b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xfc>
 8002fba:	e03e      	b.n	800303a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d112      	bne.n	8002fea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc6:	f7fd fde5 	bl	8000b94 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e084      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fdc:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x12a>
 8002fe8:	e027      	b.n	800303a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d11d      	bne.n	800302e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fd fdce 	bl	8000b94 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e06d      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d1ee      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x158>
 8003016:	e010      	b.n	800303a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003018:	f7fd fdbc 	bl	8000b94 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e05b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ee      	bne.n	8003018 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d219      	bcs.n	800307c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_ClockConfig+0x1be>
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	4923      	ldr	r1, [pc, #140]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_RCC_ClockConfig+0x254>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e034      	b.n	80030e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490f      	ldr	r1, [pc, #60]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f823 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_ClockConfig+0x258>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	fa21 f303 	lsr.w	r3, r1, r3
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x260>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x264>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fd0e 	bl	8000afc <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80030e4:	7afb      	ldrb	r3, [r7, #11]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00
 80030f4:	40023800 	.word	0x40023800
 80030f8:	0801292c 	.word	0x0801292c
 80030fc:	2000012c 	.word	0x2000012c
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d006      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x24>
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d007      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x2a>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d12c      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003124:	613b      	str	r3, [r7, #16]
      break;
 8003126:	e037      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_GetSysClockFreq+0xa8>)
 800312a:	613b      	str	r3, [r7, #16]
      break;
 800312c:	e034      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	0d9b      	lsrs	r3, r3, #22
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8003158:	fb02 f203 	mul.w	r2, r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e007      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800316a:	fb02 f203 	mul.w	r2, r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e00d      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0b5b      	lsrs	r3, r3, #13
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	613b      	str	r3, [r7, #16]
      break;
 8003196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003198:	693b      	ldr	r3, [r7, #16]
}
 800319a:	4618      	mov	r0, r3
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	08012920 	.word	0x08012920

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	2000012c 	.word	0x2000012c

080031c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031d4:	4b29      	ldr	r3, [pc, #164]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d12c      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e016      	b.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b20      	ldr	r3, [pc, #128]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6253      	str	r3, [r2, #36]	; 0x24
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003218:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800322c:	d105      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003234:	d101      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003236:	2301      	movs	r3, #1
 8003238:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 0201 	bic.w	r2, r3, #1
 8003254:	490b      	ldr	r1, [pc, #44]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	40023c00 	.word	0x40023c00

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b2 	beq.w	8003402 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	4a56      	ldr	r2, [pc, #344]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6253      	str	r3, [r2, #36]	; 0x24
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b51      	ldr	r3, [pc, #324]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b4e      	ldr	r3, [pc, #312]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4d      	ldr	r2, [pc, #308]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fd fc57 	bl	8000b94 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fc53 	bl	8000b94 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	; 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e083      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003308:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003310:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d00f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800332c:	d108      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e061      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003348:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d034      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	429a      	cmp	r2, r3
 800335c:	d02d      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d027      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003372:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d014      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fc00 	bl	8000b94 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003396:	e00a      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fd fbfc 	bl	8000b94 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e02a      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ee      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033c6:	d10a      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x156>
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ea:	4908      	ldr	r1, [pc, #32]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	40007000 	.word	0x40007000
 8003414:	424706dc 	.word	0x424706dc

08003418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06d      	b.n	8003506 <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7f5b      	ldrb	r3, [r3, #29]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f00a ff04 	bl	800e248 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	22ca      	movs	r2, #202	; 0xca
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2253      	movs	r2, #83	; 0x53
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fd20 	bl	8003e9c <RTC_EnterInitMode>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e048      	b.n	8003506 <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003486:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6919      	ldr	r1, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800350e:	b590      	push	{r4, r7, lr}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	7f1b      	ldrb	r3, [r3, #28]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_RTC_SetTime+0x18>
 8003522:	2302      	movs	r3, #2
 8003524:	e0a3      	b.n	800366e <HAL_RTC_SetTime+0x160>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2202      	movs	r2, #2
 8003530:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d126      	bne.n	8003586 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fccd 	bl	8003ef0 <RTC_ByteToBcd2>
 8003556:	4603      	mov	r3, r0
 8003558:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fcc6 	bl	8003ef0 <RTC_ByteToBcd2>
 8003564:	4603      	mov	r3, r0
 8003566:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003568:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	789b      	ldrb	r3, [r3, #2]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fcbe 	bl	8003ef0 <RTC_ByteToBcd2>
 8003574:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003576:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	78db      	ldrb	r3, [r3, #3]
 800357e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e018      	b.n	80035b8 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	78db      	ldrb	r3, [r3, #3]
 80035b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	22ca      	movs	r2, #202	; 0xca
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2253      	movs	r2, #83	; 0x53
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc67 	bl	8003e9c <RTC_EnterInitMode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2204      	movs	r2, #4
 80035e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e040      	b.n	800366e <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800360a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003632:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc04 	bl	8003e42 <HAL_RTC_WaitForSynchro>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2204      	movs	r2, #4
 800364c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e00a      	b.n	800366e <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	22ff      	movs	r2, #255	; 0xff
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	b29a      	uxth	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11a      	bne.n	8003726 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fc1a 	bl	8003f2e <RTC_Bcd2ToByte>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fc11 	bl	8003f2e <RTC_Bcd2ToByte>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	789b      	ldrb	r3, [r3, #2]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fc08 	bl	8003f2e <RTC_Bcd2ToByte>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	7f1b      	ldrb	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_RTC_SetDate+0x18>
 8003744:	2302      	movs	r3, #2
 8003746:	e08d      	b.n	8003864 <HAL_RTC_SetDate+0x134>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2202      	movs	r2, #2
 8003752:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_RTC_SetDate+0x48>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	b2db      	uxtb	r3, r3
 8003770:	330a      	adds	r3, #10
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11c      	bne.n	80037b8 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbb4 	bl	8003ef0 <RTC_ByteToBcd2>
 8003788:	4603      	mov	r3, r0
 800378a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fbad 	bl	8003ef0 <RTC_ByteToBcd2>
 8003796:	4603      	mov	r3, r0
 8003798:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800379a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	789b      	ldrb	r3, [r3, #2]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fba5 	bl	8003ef0 <RTC_ByteToBcd2>
 80037a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80037a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e00e      	b.n	80037d6 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	78db      	ldrb	r3, [r3, #3]
 80037bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80037ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	22ca      	movs	r2, #202	; 0xca
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2253      	movs	r2, #83	; 0x53
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb58 	bl	8003e9c <RTC_EnterInitMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2204      	movs	r2, #4
 80037fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e02c      	b.n	8003864 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003818:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003828:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb09 	bl	8003e42 <HAL_RTC_WaitForSynchro>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2204      	movs	r2, #4
 8003842:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00a      	b.n	8003864 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}

0800386c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003882:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003886:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	0b5b      	lsrs	r3, r3, #13
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11a      	bne.n	80038fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	78db      	ldrb	r3, [r3, #3]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fb2f 	bl	8003f2e <RTC_Bcd2ToByte>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb26 	bl	8003f2e <RTC_Bcd2ToByte>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	789b      	ldrb	r3, [r3, #2]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fb1d 	bl	8003f2e <RTC_Bcd2ToByte>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	7f1b      	ldrb	r3, [r3, #28]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_RTC_SetAlarm_IT+0x24>
 8003928:	2302      	movs	r3, #2
 800392a:	e11f      	b.n	8003b6c <HAL_RTC_SetAlarm_IT+0x264>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2202      	movs	r2, #2
 8003936:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d137      	bne.n	80039ae <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 faca 	bl	8003ef0 <RTC_ByteToBcd2>
 800395c:	4603      	mov	r3, r0
 800395e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fac3 	bl	8003ef0 <RTC_ByteToBcd2>
 800396a:	4603      	mov	r3, r0
 800396c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800396e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	789b      	ldrb	r3, [r3, #2]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fabb 	bl	8003ef0 <RTC_ByteToBcd2>
 800397a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800397c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	78db      	ldrb	r3, [r3, #3]
 8003984:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003986:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 faad 	bl	8003ef0 <RTC_ByteToBcd2>
 8003996:	4603      	mov	r3, r0
 8003998:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800399a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80039a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e023      	b.n	80039f6 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039ce:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80039d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	78db      	ldrb	r3, [r3, #3]
 80039da:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80039dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80039e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80039ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	22ca      	movs	r2, #202	; 0xca
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2253      	movs	r2, #83	; 0x53
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1a:	d148      	bne.n	8003aae <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003a3c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a3e:	f7fd f8a9 	bl	8000b94 <HAL_GetTick>
 8003a42:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003a44:	e013      	b.n	8003a6e <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a46:	f7fd f8a5 	bl	8000b94 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a54:	d90b      	bls.n	8003a6e <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2203      	movs	r2, #3
 8003a62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e07e      	b.n	8003b6c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0e4      	beq.n	8003a46 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	e047      	b.n	8003b3e <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003abc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003ace:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ad0:	f7fd f860 	bl	8000b94 <HAL_GetTick>
 8003ad4:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ad6:	e013      	b.n	8003b00 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ad8:	f7fd f85c 	bl	8000b94 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae6:	d90b      	bls.n	8003b00 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	22ff      	movs	r2, #255	; 0xff
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2203      	movs	r2, #3
 8003af4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e035      	b.n	8003b6c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0e4      	beq.n	8003ad8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	22ff      	movs	r2, #255	; 0xff
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3724      	adds	r7, #36	; 0x24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7f1b      	ldrb	r3, [r3, #28]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_RTC_DeactivateAlarm+0x16>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e07b      	b.n	8003c86 <HAL_RTC_DeactivateAlarm+0x10e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	22ca      	movs	r2, #202	; 0xca
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2253      	movs	r2, #83	; 0x53
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d12f      	bne.n	8003c12 <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003bd2:	f7fc ffdf 	bl	8000b94 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bd8:	e013      	b.n	8003c02 <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bda:	f7fc ffdb 	bl	8000b94 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be8:	d90b      	bls.n	8003c02 <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e041      	b.n	8003c86 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0e4      	beq.n	8003bda <HAL_RTC_DeactivateAlarm+0x62>
 8003c10:	e02e      	b.n	8003c70 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c20:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c30:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003c32:	f7fc ffaf 	bl	8000b94 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c38:	e013      	b.n	8003c62 <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c3a:	f7fc ffab 	bl	8000b94 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c48:	d90b      	bls.n	8003c62 <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e011      	b.n	8003c86 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0e4      	beq.n	8003c3a <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_RTC_GetAlarm+0x34>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	e00d      	b.n	8003cde <HAL_RTC_GetAlarm+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003cdc:	613b      	str	r3, [r7, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	70da      	strb	r2, [r3, #3]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	605a      	str	r2, [r3, #4]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d125      	bne.n	8003d9a <HAL_RTC_GetAlarm+0x10c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f8eb 	bl	8003f2e <RTC_Bcd2ToByte>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f8e2 	bl	8003f2e <RTC_Bcd2ToByte>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f8d9 	bl	8003f2e <RTC_Bcd2ToByte>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8cf 	bl	8003f2e <RTC_Bcd2ToByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f831 	bl	8003e30 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003dde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d012      	beq.n	8003e14 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f907 	bl	8004010 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003e12:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e1a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	775a      	strb	r2, [r3, #29]
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11c      	bne.n	8003e92 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e68:	f7fc fe94 	bl	8000b94 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e6e:	e009      	b.n	8003e84 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e70:	f7fc fe90 	bl	8000b94 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7e:	d901      	bls.n	8003e84 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e007      	b.n	8003e94 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d119      	bne.n	8003ee6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ebc:	f7fc fe6a 	bl	8000b94 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ec2:	e009      	b.n	8003ed8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ec4:	f7fc fe66 	bl	8000b94 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ed2:	d901      	bls.n	8003ed8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e007      	b.n	8003ee8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003f02:	e005      	b.n	8003f10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	3b0a      	subs	r3, #10
 8003f0e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	2b09      	cmp	r3, #9
 8003f14:	d8f6      	bhi.n	8003f04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b2db      	uxtb	r3, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	b2db      	uxtb	r3, r3
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7f1b      	ldrb	r3, [r3, #28]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_RTCEx_DeactivateWakeUpTimer+0x14>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e047      	b.n	8004008 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22ca      	movs	r2, #202	; 0xca
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2253      	movs	r2, #83	; 0x53
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fb2:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003fb4:	f7fc fdee 	bl	8000b94 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003fba:	e013      	b.n	8003fe4 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fbc:	f7fc fdea 	bl	8000b94 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fca:	d90b      	bls.n	8003fe4 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e011      	b.n	8004008 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0e4      	beq.n	8003fbc <HAL_RTCEx_DeactivateWakeUpTimer+0x58>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e056      	b.n	80040e2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f00a f910 	bl	800e274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	ea42 0103 	orr.w	r1, r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0104 	and.w	r1, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e01a      	b.n	8004132 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00a f8f1 	bl	800e2fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	d130      	bne.n	80041b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit_IT+0x26>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e029      	b.n	80041b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Transmit_IT+0x38>
 800416e:	2302      	movs	r3, #2
 8004170:	e022      	b.n	80041b8 <HAL_UART_Transmit_IT+0x7e>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2221      	movs	r2, #33	; 0x21
 8004196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e000      	b.n	80041b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d140      	bne.n	800425e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Receive_IT+0x26>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e039      	b.n	8004260 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive_IT+0x38>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e032      	b.n	8004260 <HAL_UART_Receive_IT+0x9e>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	88fa      	ldrh	r2, [r7, #6]
 8004212:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2222      	movs	r2, #34	; 0x22
 800421e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0220 	orr.w	r2, r2, #32
 8004258:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
	...

0800426c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_UART_IRQHandler+0x52>
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f972 	bl	80045a0 <UART_Receive_IT>
      return;
 80042bc:	e0cc      	b.n	8004458 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80ab 	beq.w	800441c <HAL_UART_IRQHandler+0x1b0>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_UART_IRQHandler+0x70>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80a0 	beq.w	800441c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_UART_IRQHandler+0x90>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_UART_IRQHandler+0xb0>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f043 0202 	orr.w	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_UART_IRQHandler+0xd0>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_UART_IRQHandler+0xf0>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	f043 0208 	orr.w	r2, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d078      	beq.n	8004456 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_UART_IRQHandler+0x112>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f911 	bl	80045a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <HAL_UART_IRQHandler+0x13a>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d031      	beq.n	800440a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f85c 	bl	8004464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d123      	bne.n	8004402 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_UART_IRQHandler+0x1f4>)
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd f9ac 	bl	800173c <HAL_DMA_Abort_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f4:	4610      	mov	r0, r2
 80043f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e00e      	b.n	8004418 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f00c fee2 	bl	80111c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e00a      	b.n	8004418 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f00c fede 	bl	80111c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e006      	b.n	8004418 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f00c feda 	bl	80111c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004416:	e01e      	b.n	8004456 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	bf00      	nop
    return;
 800441a:	e01c      	b.n	8004456 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_UART_IRQHandler+0x1cc>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f848 	bl	80044c6 <UART_Transmit_IT>
    return;
 8004436:	e00f      	b.n	8004458 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_UART_IRQHandler+0x1ec>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f88f 	bl	8004570 <UART_EndTransmit_IT>
    return;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004456:	bf00      	nop
  }
}
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0800449f 	.word	0x0800449f

08004464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800447a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f00c fe83 	bl	80111c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b21      	cmp	r3, #33	; 0x21
 80044d8:	d144      	bne.n	8004564 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e2:	d11a      	bne.n	800451a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]
 800450c:	e00e      	b.n	800452c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	e008      	b.n	800452c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	1c59      	adds	r1, r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6211      	str	r1, [r2, #32]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004586:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f00c fdbd 	bl	8011110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b22      	cmp	r3, #34	; 0x22
 80045b2:	d171      	bne.n	8004698 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d123      	bne.n	8004606 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10e      	bne.n	80045ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
 80045e8:	e029      	b.n	800463e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
 8004604:	e01b      	b.n	800463e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6858      	ldr	r0, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6291      	str	r1, [r2, #40]	; 0x28
 800461e:	b2c2      	uxtb	r2, r0
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e00c      	b.n	800463e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	1c58      	adds	r0, r3, #1
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	6288      	str	r0, [r1, #40]	; 0x28
 8004636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4619      	mov	r1, r3
 800464c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800464e:	2b00      	cmp	r3, #0
 8004650:	d120      	bne.n	8004694 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0220 	bic.w	r2, r2, #32
 8004660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f00c fd6e 	bl	801116c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e002      	b.n	800469a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a4:	b490      	push	{r4, r7}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d819      	bhi.n	8004706 <USB_ActivateEndpoint+0x62>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <USB_ActivateEndpoint+0x34>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046fd 	.word	0x080046fd
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	080046f3 	.word	0x080046f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046e8:	8abb      	ldrh	r3, [r7, #20]
 80046ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ee:	82bb      	strh	r3, [r7, #20]
      break;
 80046f0:	e00d      	b.n	800470e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046f2:	8abb      	ldrh	r3, [r7, #20]
 80046f4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046f8:	82bb      	strh	r3, [r7, #20]
      break;
 80046fa:	e008      	b.n	800470e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046fc:	8abb      	ldrh	r3, [r7, #20]
 80046fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004702:	82bb      	strh	r3, [r7, #20]
      break;
 8004704:	e003      	b.n	800470e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
      break;
 800470a:	e000      	b.n	800470e <USB_ActivateEndpoint+0x6a>
      break;
 800470c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8abb      	ldrh	r3, [r7, #20]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	b29a      	uxth	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	4313      	orrs	r3, r2
 800474e:	b29c      	uxth	r4, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	4b87      	ldr	r3, [pc, #540]	; (8004978 <USB_ActivateEndpoint+0x2d4>)
 800475c:	4323      	orrs	r3, r4
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	7b1b      	ldrb	r3, [r3, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 810c 	bne.w	8004984 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in != 0U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d067      	beq.n	8004844 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004774:	687c      	ldr	r4, [r7, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	441c      	add	r4, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4423      	add	r3, r4
 8004788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478c:	461c      	mov	r4, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	88db      	ldrh	r3, [r3, #6]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d014      	beq.n	80047de <USB_ActivateEndpoint+0x13a>
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	b29c      	uxth	r4, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	4b69      	ldr	r3, [pc, #420]	; (800497c <USB_ActivateEndpoint+0x2d8>)
 80047d8:	4323      	orrs	r3, r4
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	78db      	ldrb	r3, [r3, #3]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d018      	beq.n	8004818 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	b29c      	uxth	r4, r3
 80047fe:	f084 0320 	eor.w	r3, r4, #32
 8004802:	b29c      	uxth	r4, r3
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	4b5a      	ldr	r3, [pc, #360]	; (8004978 <USB_ActivateEndpoint+0x2d4>)
 8004810:	4323      	orrs	r3, r4
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
 8004816:	e225      	b.n	8004c64 <USB_ActivateEndpoint+0x5c0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	b29c      	uxth	r4, r3
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <USB_ActivateEndpoint+0x2d4>)
 800483c:	4323      	orrs	r3, r4
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]
 8004842:	e20f      	b.n	8004c64 <USB_ActivateEndpoint+0x5c0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004844:	687c      	ldr	r4, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484c:	b29b      	uxth	r3, r3
 800484e:	441c      	add	r4, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4423      	add	r3, r4
 8004858:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800485c:	461c      	mov	r4, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	88db      	ldrh	r3, [r3, #6]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800486c:	687c      	ldr	r4, [r7, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	441c      	add	r4, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4423      	add	r3, r4
 8004880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <USB_ActivateEndpoint+0x20c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e026      	b.n	80048fe <USB_ActivateEndpoint+0x25a>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b3d      	cmp	r3, #61	; 0x3d
 80048b6:	d813      	bhi.n	80048e0 <USB_ActivateEndpoint+0x23c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <USB_ActivateEndpoint+0x22e>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	e00e      	b.n	80048fe <USB_ActivateEndpoint+0x25a>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29c      	uxth	r4, r3
 800490c:	4623      	mov	r3, r4
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d014      	beq.n	8004940 <USB_ActivateEndpoint+0x29c>
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	b29c      	uxth	r4, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <USB_ActivateEndpoint+0x2dc>)
 800493a:	4323      	orrs	r3, r4
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	b29c      	uxth	r4, r3
 8004958:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800495c:	b29c      	uxth	r4, r3
 800495e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004962:	b29c      	uxth	r4, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	4b02      	ldr	r3, [pc, #8]	; (8004978 <USB_ActivateEndpoint+0x2d4>)
 8004970:	4323      	orrs	r3, r4
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]
 8004976:	e175      	b.n	8004c64 <USB_ActivateEndpoint+0x5c0>
 8004978:	ffff8080 	.word	0xffff8080
 800497c:	ffff80c0 	.word	0xffff80c0
 8004980:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	b29c      	uxth	r4, r3
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	4b96      	ldr	r3, [pc, #600]	; (8004c00 <USB_ActivateEndpoint+0x55c>)
 80049a8:	4323      	orrs	r3, r4
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049ae:	687c      	ldr	r4, [r7, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	441c      	add	r4, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4423      	add	r3, r4
 80049c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c6:	461c      	mov	r4, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	891b      	ldrh	r3, [r3, #8]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8023      	strh	r3, [r4, #0]
 80049d6:	687c      	ldr	r4, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	441c      	add	r4, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	4423      	add	r3, r4
 80049ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049ee:	461c      	mov	r4, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	895b      	ldrh	r3, [r3, #10]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 8088 	bne.w	8004b18 <USB_ActivateEndpoint+0x474>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29c      	uxth	r4, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d014      	beq.n	8004a4a <USB_ActivateEndpoint+0x3a6>
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a36:	b29c      	uxth	r4, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <USB_ActivateEndpoint+0x560>)
 8004a44:	4323      	orrs	r3, r4
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29c      	uxth	r4, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d014      	beq.n	8004a8c <USB_ActivateEndpoint+0x3e8>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	b29c      	uxth	r4, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <USB_ActivateEndpoint+0x564>)
 8004a86:	4323      	orrs	r3, r4
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	b29c      	uxth	r4, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <USB_ActivateEndpoint+0x564>)
 8004ab0:	4323      	orrs	r3, r4
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	b29c      	uxth	r4, r3
 8004ace:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ad2:	b29c      	uxth	r4, r3
 8004ad4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004ad8:	b29c      	uxth	r4, r3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <USB_ActivateEndpoint+0x568>)
 8004ae6:	4323      	orrs	r3, r4
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b02:	b29c      	uxth	r4, r3
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <USB_ActivateEndpoint+0x568>)
 8004b10:	4323      	orrs	r3, r4
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e0a5      	b.n	8004c64 <USB_ActivateEndpoint+0x5c0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29c      	uxth	r4, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d014      	beq.n	8004b5a <USB_ActivateEndpoint+0x4b6>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	b29c      	uxth	r4, r3
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <USB_ActivateEndpoint+0x560>)
 8004b54:	4323      	orrs	r3, r4
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29c      	uxth	r4, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d014      	beq.n	8004b9c <USB_ActivateEndpoint+0x4f8>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	b29c      	uxth	r4, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <USB_ActivateEndpoint+0x564>)
 8004b96:	4323      	orrs	r3, r4
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	b29c      	uxth	r4, r3
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <USB_ActivateEndpoint+0x560>)
 8004bc0:	4323      	orrs	r3, r4
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d020      	beq.n	8004c10 <USB_ActivateEndpoint+0x56c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	b29c      	uxth	r4, r3
 8004be6:	f084 0320 	eor.w	r3, r4, #32
 8004bea:	b29c      	uxth	r4, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <USB_ActivateEndpoint+0x568>)
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
 8004bfe:	e01c      	b.n	8004c3a <USB_ActivateEndpoint+0x596>
 8004c00:	ffff8180 	.word	0xffff8180
 8004c04:	ffffc080 	.word	0xffffc080
 8004c08:	ffff80c0 	.word	0xffff80c0
 8004c0c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	b29c      	uxth	r4, r3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <USB_ActivateEndpoint+0x5cc>)
 8004c34:	4323      	orrs	r3, r4
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	b29c      	uxth	r4, r3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <USB_ActivateEndpoint+0x5cc>)
 8004c5e:	4323      	orrs	r3, r4
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc90      	pop	{r4, r7}
 8004c6e:	4770      	bx	lr
 8004c70:	ffff8080 	.word	0xffff8080

08004c74 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b095      	sub	sp, #84	; 0x54
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	f040 815d 	bne.w	8004f42 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d909      	bls.n	8004ca8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca0:	1ad2      	subs	r2, r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	619a      	str	r2, [r3, #24]
 8004ca6:	e005      	b.n	8004cb4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	7b1b      	ldrb	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11a      	bne.n	8004cf2 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6959      	ldr	r1, [r3, #20]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	88da      	ldrh	r2, [r3, #6]
 8004cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb82 	bl	80053d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cce:	687c      	ldr	r4, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	441c      	add	r4, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4423      	add	r3, r4
 8004ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e10b      	b.n	8004f0a <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d062      	beq.n	8004dce <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d08:	687c      	ldr	r4, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d144      	bne.n	8004d9c <USB_EPStartXfer+0x128>
 8004d12:	687c      	ldr	r4, [r7, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	441c      	add	r4, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4423      	add	r3, r4
 8004d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d110      	bne.n	8004d54 <USB_EPStartXfer+0xe0>
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e037      	b.n	8004dc4 <USB_EPStartXfer+0x150>
 8004d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d56:	2b3d      	cmp	r3, #61	; 0x3d
 8004d58:	d811      	bhi.n	8004d7e <USB_EPStartXfer+0x10a>
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <USB_EPStartXfer+0xfc>
 8004d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	029b      	lsls	r3, r3, #10
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	e022      	b.n	8004dc4 <USB_EPStartXfer+0x150>
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	029b      	lsls	r3, r3, #10
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e013      	b.n	8004dc4 <USB_EPStartXfer+0x150>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10f      	bne.n	8004dc4 <USB_EPStartXfer+0x150>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	441c      	add	r4, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	4423      	add	r3, r4
 8004db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	895b      	ldrh	r3, [r3, #10]
 8004dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004dcc:	e061      	b.n	8004e92 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d144      	bne.n	8004e60 <USB_EPStartXfer+0x1ec>
 8004dd6:	687c      	ldr	r4, [r7, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	441c      	add	r4, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	4423      	add	r3, r4
 8004dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <USB_EPStartXfer+0x1a4>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	e038      	b.n	8004e8a <USB_EPStartXfer+0x216>
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	2b3d      	cmp	r3, #61	; 0x3d
 8004e1c:	d811      	bhi.n	8004e42 <USB_EPStartXfer+0x1ce>
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	643b      	str	r3, [r7, #64]	; 0x40
 8004e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <USB_EPStartXfer+0x1c0>
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	3301      	adds	r3, #1
 8004e32:	643b      	str	r3, [r7, #64]	; 0x40
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e023      	b.n	8004e8a <USB_EPStartXfer+0x216>
 8004e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
 8004e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	029b      	lsls	r3, r3, #10
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e014      	b.n	8004e8a <USB_EPStartXfer+0x216>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d110      	bne.n	8004e8a <USB_EPStartXfer+0x216>
 8004e68:	687c      	ldr	r4, [r7, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	441c      	add	r4, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	4423      	add	r3, r4
 8004e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	891b      	ldrh	r3, [r3, #8]
 8004e8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6959      	ldr	r1, [r3, #20]
 8004e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa97 	bl	80053d2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <USB_EPStartXfer+0x264>
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	b29c      	uxth	r4, r3
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	4b99      	ldr	r3, [pc, #612]	; (8005134 <USB_EPStartXfer+0x4c0>)
 8004ed0:	4323      	orrs	r3, r4
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
 8004ed6:	e018      	b.n	8004f0a <USB_EPStartXfer+0x296>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d114      	bne.n	8004f0a <USB_EPStartXfer+0x296>
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	b29c      	uxth	r4, r3
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	4b8d      	ldr	r3, [pc, #564]	; (8005138 <USB_EPStartXfer+0x4c4>)
 8004f04:	4323      	orrs	r3, r4
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	b29c      	uxth	r4, r3
 8004f22:	f084 0310 	eor.w	r3, r4, #16
 8004f26:	b29c      	uxth	r4, r3
 8004f28:	f084 0320 	eor.w	r3, r4, #32
 8004f2c:	b29c      	uxth	r4, r3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <USB_EPStartXfer+0x4c8>)
 8004f3a:	4323      	orrs	r3, r4
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	8013      	strh	r3, [r2, #0]
 8004f40:	e13c      	b.n	80051bc <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d909      	bls.n	8004f62 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	619a      	str	r2, [r3, #24]
 8004f60:	e005      	b.n	8004f6e <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	7b1b      	ldrb	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d144      	bne.n	8005000 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f76:	687c      	ldr	r4, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	441c      	add	r4, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	4423      	add	r3, r4
 8004f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f8e:	623b      	str	r3, [r7, #32]
 8004f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d110      	bne.n	8004fb8 <USB_EPStartXfer+0x344>
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e0e6      	b.n	8005186 <USB_EPStartXfer+0x512>
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fba:	2b3d      	cmp	r3, #61	; 0x3d
 8004fbc:	d811      	bhi.n	8004fe2 <USB_EPStartXfer+0x36e>
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <USB_EPStartXfer+0x360>
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	029b      	lsls	r3, r3, #10
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e0d1      	b.n	8005186 <USB_EPStartXfer+0x512>
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	029b      	lsls	r3, r3, #10
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	e0c2      	b.n	8005186 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d144      	bne.n	8005092 <USB_EPStartXfer+0x41e>
 8005008:	687c      	ldr	r4, [r7, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005010:	b29b      	uxth	r3, r3
 8005012:	441c      	add	r4, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	4423      	add	r3, r4
 800501c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	2b00      	cmp	r3, #0
 8005026:	d110      	bne.n	800504a <USB_EPStartXfer+0x3d6>
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005030:	b29a      	uxth	r2, r3
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005042:	b29a      	uxth	r2, r3
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e038      	b.n	80050bc <USB_EPStartXfer+0x448>
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	2b3d      	cmp	r3, #61	; 0x3d
 800504e:	d811      	bhi.n	8005074 <USB_EPStartXfer+0x400>
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <USB_EPStartXfer+0x3f2>
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	3301      	adds	r3, #1
 8005064:	63bb      	str	r3, [r7, #56]	; 0x38
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29a      	uxth	r2, r3
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	e023      	b.n	80050bc <USB_EPStartXfer+0x448>
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29b      	uxth	r3, r3
 8005082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508a:	b29a      	uxth	r2, r3
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	e014      	b.n	80050bc <USB_EPStartXfer+0x448>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d110      	bne.n	80050bc <USB_EPStartXfer+0x448>
 800509a:	687c      	ldr	r4, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	441c      	add	r4, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	4423      	add	r3, r4
 80050ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
 80050b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	687c      	ldr	r4, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14b      	bne.n	800515e <USB_EPStartXfer+0x4ea>
 80050c6:	687c      	ldr	r4, [r7, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	441c      	add	r4, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	4423      	add	r3, r4
 80050da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d110      	bne.n	8005108 <USB_EPStartXfer+0x494>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005100:	b29a      	uxth	r2, r3
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	e03e      	b.n	8005186 <USB_EPStartXfer+0x512>
 8005108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510a:	2b3d      	cmp	r3, #61	; 0x3d
 800510c:	d818      	bhi.n	8005140 <USB_EPStartXfer+0x4cc>
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
 8005114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <USB_EPStartXfer+0x4b0>
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	3301      	adds	r3, #1
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
 8005124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005126:	b29b      	uxth	r3, r3
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	b29a      	uxth	r2, r3
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	801a      	strh	r2, [r3, #0]
 8005130:	e029      	b.n	8005186 <USB_EPStartXfer+0x512>
 8005132:	bf00      	nop
 8005134:	ffff80c0 	.word	0xffff80c0
 8005138:	ffffc080 	.word	0xffffc080
 800513c:	ffff8080 	.word	0xffff8080
 8005140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	637b      	str	r3, [r7, #52]	; 0x34
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	b29b      	uxth	r3, r3
 800514a:	029b      	lsls	r3, r3, #10
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29a      	uxth	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e013      	b.n	8005186 <USB_EPStartXfer+0x512>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10f      	bne.n	8005186 <USB_EPStartXfer+0x512>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	441c      	add	r4, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4423      	add	r3, r4
 8005178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	b29a      	uxth	r2, r3
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	b29c      	uxth	r4, r3
 800519e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80051a2:	b29c      	uxth	r4, r3
 80051a4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80051a8:	b29c      	uxth	r4, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <USB_EPStartXfer+0x554>)
 80051b6:	4323      	orrs	r3, r4
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3754      	adds	r7, #84	; 0x54
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	ffff8080 	.word	0xffff8080

080051cc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051cc:	b490      	push	{r4, r7}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	b29c      	uxth	r4, r3
 80051f6:	f084 0310 	eor.w	r3, r4, #16
 80051fa:	b29c      	uxth	r4, r3
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	4b11      	ldr	r3, [pc, #68]	; (800524c <USB_EPSetStall+0x80>)
 8005208:	4323      	orrs	r3, r4
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
 800520e:	e017      	b.n	8005240 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	b29c      	uxth	r4, r3
 8005228:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800522c:	b29c      	uxth	r4, r3
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	441a      	add	r2, r3
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <USB_EPSetStall+0x80>)
 800523a:	4323      	orrs	r3, r4
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bc90      	pop	{r4, r7}
 800524a:	4770      	bx	lr
 800524c:	ffff8080 	.word	0xffff8080

08005250 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005250:	b490      	push	{r4, r7}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	7b1b      	ldrb	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d17d      	bne.n	800535e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d03d      	beq.n	80052e6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29c      	uxth	r4, r3
 8005278:	4623      	mov	r3, r4
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d014      	beq.n	80052ac <USB_EPClearStall+0x5c>
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005298:	b29c      	uxth	r4, r3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	4b31      	ldr	r3, [pc, #196]	; (800536c <USB_EPClearStall+0x11c>)
 80052a6:	4323      	orrs	r3, r4
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d054      	beq.n	800535e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ca:	b29c      	uxth	r4, r3
 80052cc:	f084 0320 	eor.w	r3, r4, #32
 80052d0:	b29c      	uxth	r4, r3
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <USB_EPClearStall+0x120>)
 80052de:	4323      	orrs	r3, r4
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]
 80052e4:	e03b      	b.n	800535e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29c      	uxth	r4, r3
 80052f4:	4623      	mov	r3, r4
 80052f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d014      	beq.n	8005328 <USB_EPClearStall+0xd8>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	b29c      	uxth	r4, r3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <USB_EPClearStall+0x124>)
 8005322:	4323      	orrs	r3, r4
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	b29c      	uxth	r4, r3
 8005340:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005344:	b29c      	uxth	r4, r3
 8005346:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800534a:	b29c      	uxth	r4, r3
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <USB_EPClearStall+0x120>)
 8005358:	4323      	orrs	r3, r4
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bc90      	pop	{r4, r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	ffff80c0 	.word	0xffff80c0
 8005370:	ffff8080 	.word	0xffff8080
 8005374:	ffffc080 	.word	0xffffc080

08005378 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b08d      	sub	sp, #52	; 0x34
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4611      	mov	r1, r2
 80053de:	461a      	mov	r2, r3
 80053e0:	460b      	mov	r3, r1
 80053e2:	80fb      	strh	r3, [r7, #6]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053e8:	88bb      	ldrh	r3, [r7, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	005a      	lsls	r2, r3, #1
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540a:	e01e      	b.n	800544a <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	3301      	adds	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	b29a      	uxth	r2, r3
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	3302      	adds	r3, #2
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	3302      	adds	r3, #2
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	3301      	adds	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	3b01      	subs	r3, #1
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1dd      	bne.n	800540c <USB_WritePMA+0x3a>
  }
}
 8005450:	bf00      	nop
 8005452:	3734      	adds	r7, #52	; 0x34
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800545a:	b480      	push	{r7}
 800545c:	b08b      	sub	sp, #44	; 0x2c
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	4611      	mov	r1, r2
 8005466:	461a      	mov	r2, r3
 8005468:	460b      	mov	r3, r1
 800546a:	80fb      	strh	r3, [r7, #6]
 800546c:	4613      	mov	r3, r2
 800546e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005470:	88bb      	ldrh	r3, [r7, #4]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	005a      	lsls	r2, r3, #1
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	e01a      	b.n	80054ca <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	3302      	adds	r3, #2
 800549e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	3302      	adds	r3, #2
 80054c2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	3b01      	subs	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e1      	bne.n	8005494 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80054d0:	88bb      	ldrh	r3, [r7, #4]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d006      	beq.n	80054ea <USB_ReadPMA+0x90>
  {
    temp = *pdwVal;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	701a      	strb	r2, [r3, #0]
  }
}
 80054ea:	bf00      	nop
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005508:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005534:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005568:	b29b      	uxth	r3, r3
 800556a:	2181      	movs	r1, #129	; 0x81
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f00c f821 	bl	80115b4 <USBD_LL_Transmit>

      return USBD_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e002      	b.n	800557c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80055a4:	2302      	movs	r3, #2
 80055a6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	4611      	mov	r1, r2
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	4611      	mov	r1, r2
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
  return USBD_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fe56 	bl	80062c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2b01      	cmp	r3, #1
 8005636:	d00c      	beq.n	8005652 <USBD_LL_SetupStage+0x56>
 8005638:	2b01      	cmp	r3, #1
 800563a:	d302      	bcc.n	8005642 <USBD_LL_SetupStage+0x46>
 800563c:	2b02      	cmp	r3, #2
 800563e:	d010      	beq.n	8005662 <USBD_LL_SetupStage+0x66>
 8005640:	e017      	b.n	8005672 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9c6 	bl	80059dc <USBD_StdDevReq>
    break;
 8005650:	e01a      	b.n	8005688 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa28 	bl	8005ab0 <USBD_StdItfReq>
    break;
 8005660:	e012      	b.n	8005688 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa66 	bl	8005b3c <USBD_StdEPReq>
    break;
 8005670:	e00a      	b.n	8005688 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f00b ff15 	bl	80114b0 <USBD_LL_StallEP>
    break;
 8005686:	bf00      	nop
  }

  return USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	460b      	mov	r3, r1
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80056a0:	7afb      	ldrb	r3, [r7, #11]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d14b      	bne.n	800573e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80056ac:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d134      	bne.n	8005722 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d919      	bls.n	80056f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	1ad2      	subs	r2, r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80056da:	429a      	cmp	r2, r3
 80056dc:	d203      	bcs.n	80056e6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	e002      	b.n	80056ec <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fe60 	bl	80063b6 <USBD_CtlContinueRx>
 80056f6:	e038      	b.n	800576a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800570a:	2b03      	cmp	r3, #3
 800570c:	d105      	bne.n	800571a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 fe5d 	bl	80063da <USBD_CtlSendStatus>
 8005720:	e023      	b.n	800576a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005728:	2b05      	cmp	r3, #5
 800572a:	d11e      	bne.n	800576a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005734:	2100      	movs	r1, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f00b feba 	bl	80114b0 <USBD_LL_StallEP>
 800573c:	e015      	b.n	800576a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005750:	2b03      	cmp	r3, #3
 8005752:	d108      	bne.n	8005766 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	7afa      	ldrb	r2, [r7, #11]
 800575e:	4611      	mov	r1, r2
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	4798      	blx	r3
 8005764:	e001      	b.n	800576a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005766:	2302      	movs	r3, #2
 8005768:	e000      	b.n	800576c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	460b      	mov	r3, r1
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d17f      	bne.n	8005888 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3314      	adds	r3, #20
 800578c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005794:	2b02      	cmp	r3, #2
 8005796:	d15c      	bne.n	8005852 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d915      	bls.n	80057d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fde8 	bl	8006392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80057c2:	2300      	movs	r3, #0
 80057c4:	2200      	movs	r2, #0
 80057c6:	2100      	movs	r1, #0
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f00b ff16 	bl	80115fa <USBD_LL_PrepareReceive>
 80057ce:	e04e      	b.n	800586e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6912      	ldr	r2, [r2, #16]
 80057d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80057dc:	fb02 f201 	mul.w	r2, r2, r1
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11c      	bne.n	8005820 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d316      	bcc.n	8005820 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d20f      	bcs.n	8005820 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005800:	2200      	movs	r2, #0
 8005802:	2100      	movs	r1, #0
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fdc4 	bl	8006392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005812:	2300      	movs	r3, #0
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f00b feee 	bl	80115fa <USBD_LL_PrepareReceive>
 800581e:	e026      	b.n	800586e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005832:	2b03      	cmp	r3, #3
 8005834:	d105      	bne.n	8005842 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f00b fe33 	bl	80114b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fdd8 	bl	8006400 <USBD_CtlReceiveStatus>
 8005850:	e00d      	b.n	800586e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005858:	2b04      	cmp	r3, #4
 800585a:	d004      	beq.n	8005866 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f00b fe21 	bl	80114b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005874:	2b01      	cmp	r3, #1
 8005876:	d11d      	bne.n	80058b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff fe83 	bl	8005584 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005886:	e015      	b.n	80058b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800589a:	2b03      	cmp	r3, #3
 800589c:	d108      	bne.n	80058b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	7afa      	ldrb	r2, [r7, #11]
 80058a8:	4611      	mov	r1, r2
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	4798      	blx	r3
 80058ae:	e001      	b.n	80058b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e000      	b.n	80058b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f00b fdc9 	bl	8011464 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2240      	movs	r2, #64	; 0x40
 80058de:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f00b fdbb 	bl	8011464 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6852      	ldr	r2, [r2, #4]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	4611      	mov	r1, r2
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
  }

  return USBD_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d10b      	bne.n	80059d0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d004      	beq.n	8005a00 <USBD_StdDevReq+0x24>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d002      	beq.n	8005a00 <USBD_StdDevReq+0x24>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <USBD_StdDevReq+0x34>
 80059fe:	e04c      	b.n	8005a9a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
    break;
 8005a0e:	e049      	b.n	8005aa4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d83a      	bhi.n	8005a8e <USBD_StdDevReq+0xb2>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBD_StdDevReq+0x44>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a85 	.word	0x08005a85
 8005a28:	08005a8f 	.word	0x08005a8f
 8005a2c:	08005a7b 	.word	0x08005a7b
 8005a30:	08005a8f 	.word	0x08005a8f
 8005a34:	08005a53 	.word	0x08005a53
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a8f 	.word	0x08005a8f
 8005a40:	08005a67 	.word	0x08005a67
 8005a44:	08005a5d 	.word	0x08005a5d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9d2 	bl	8005df4 <USBD_GetDescriptor>
      break;
 8005a50:	e022      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fac7 	bl	8005fe8 <USBD_SetAddress>
      break;
 8005a5a:	e01d      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fb04 	bl	800606c <USBD_SetConfig>
      break;
 8005a64:	e018      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb8d 	bl	8006188 <USBD_GetConfig>
      break;
 8005a6e:	e013      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fbbc 	bl	80061f0 <USBD_GetStatus>
      break;
 8005a78:	e00e      	b.n	8005a98 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fbea 	bl	8006256 <USBD_SetFeature>
      break;
 8005a82:	e009      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fbf9 	bl	800627e <USBD_ClrFeature>
      break;
 8005a8c:	e004      	b.n	8005a98 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fc51 	bl	8006338 <USBD_CtlError>
      break;
 8005a96:	bf00      	nop
    }
    break;
 8005a98:	e004      	b.n	8005aa4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fc4b 	bl	8006338 <USBD_CtlError>
    break;
 8005aa2:	bf00      	nop
  }

  return ret;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop

08005ab0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d003      	beq.n	8005ad2 <USBD_StdItfReq+0x22>
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d001      	beq.n	8005ad2 <USBD_StdItfReq+0x22>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d12a      	bne.n	8005b28 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d81d      	bhi.n	8005b1a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	889b      	ldrh	r3, [r3, #4]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d813      	bhi.n	8005b10 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	88db      	ldrh	r3, [r3, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d110      	bne.n	8005b24 <USBD_StdItfReq+0x74>
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10d      	bne.n	8005b24 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc66 	bl	80063da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005b0e:	e009      	b.n	8005b24 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fc10 	bl	8006338 <USBD_CtlError>
      break;
 8005b18:	e004      	b.n	8005b24 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fc0b 	bl	8006338 <USBD_CtlError>
      break;
 8005b22:	e000      	b.n	8005b26 <USBD_StdItfReq+0x76>
      break;
 8005b24:	bf00      	nop
    }
    break;
 8005b26:	e004      	b.n	8005b32 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fc04 	bl	8006338 <USBD_CtlError>
    break;
 8005b30:	bf00      	nop
  }

  return USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	889b      	ldrh	r3, [r3, #4]
 8005b4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d004      	beq.n	8005b66 <USBD_StdEPReq+0x2a>
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d002      	beq.n	8005b66 <USBD_StdEPReq+0x2a>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <USBD_StdEPReq+0x3a>
 8005b64:	e13b      	b.n	8005dde <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
    break;
 8005b74:	e138      	b.n	8005de8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d10a      	bne.n	8005b98 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	e128      	b.n	8005dea <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d03e      	beq.n	8005c1e <USBD_StdEPReq+0xe2>
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d002      	beq.n	8005baa <USBD_StdEPReq+0x6e>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d070      	beq.n	8005c8a <USBD_StdEPReq+0x14e>
 8005ba8:	e113      	b.n	8005dd2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d002      	beq.n	8005bba <USBD_StdEPReq+0x7e>
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d015      	beq.n	8005be4 <USBD_StdEPReq+0xa8>
 8005bb8:	e02b      	b.n	8005c12 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <USBD_StdEPReq+0x9e>
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d009      	beq.n	8005bda <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f00b fc70 	bl	80114b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f00b fc6c 	bl	80114b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005bd8:	e020      	b.n	8005c1c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fbab 	bl	8006338 <USBD_CtlError>
        break;
 8005be2:	e01b      	b.n	8005c1c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <USBD_StdEPReq+0xce>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d008      	beq.n	8005c0a <USBD_StdEPReq+0xce>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	88db      	ldrh	r3, [r3, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f00b fc53 	bl	80114b0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fbe5 	bl	80063da <USBD_CtlSendStatus>

        break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb8f 	bl	8006338 <USBD_CtlError>
        break;
 8005c1a:	bf00      	nop
      }
      break;
 8005c1c:	e0de      	b.n	8005ddc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d002      	beq.n	8005c2e <USBD_StdEPReq+0xf2>
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d015      	beq.n	8005c58 <USBD_StdEPReq+0x11c>
 8005c2c:	e026      	b.n	8005c7c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <USBD_StdEPReq+0x112>
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d009      	beq.n	8005c4e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f00b fc36 	bl	80114b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f00b fc32 	bl	80114b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c4c:	e01c      	b.n	8005c88 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fb71 	bl	8006338 <USBD_CtlError>
        break;
 8005c56:	e017      	b.n	8005c88 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	885b      	ldrh	r3, [r3, #2]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d112      	bne.n	8005c86 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c60:	7bbb      	ldrb	r3, [r7, #14]
 8005c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f00b fc3d 	bl	80114ee <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fbb0 	bl	80063da <USBD_CtlSendStatus>
        }
        break;
 8005c7a:	e004      	b.n	8005c86 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fb5a 	bl	8006338 <USBD_CtlError>
        break;
 8005c84:	e000      	b.n	8005c88 <USBD_StdEPReq+0x14c>
        break;
 8005c86:	bf00      	nop
      }
      break;
 8005c88:	e0a8      	b.n	8005ddc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d002      	beq.n	8005c9a <USBD_StdEPReq+0x15e>
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d031      	beq.n	8005cfc <USBD_StdEPReq+0x1c0>
 8005c98:	e095      	b.n	8005dc6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <USBD_StdEPReq+0x174>
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d004      	beq.n	8005cb0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb45 	bl	8006338 <USBD_CtlError>
          break;
 8005cae:	e08f      	b.n	8005dd0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da0b      	bge.n	8005cd0 <USBD_StdEPReq+0x194>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3310      	adds	r3, #16
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	e00a      	b.n	8005ce6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb30 	bl	800635a <USBD_CtlSendData>
          break;
 8005cfa:	e069      	b.n	8005dd0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da11      	bge.n	8005d28 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	3318      	adds	r3, #24
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d117      	bne.n	8005d4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb09 	bl	8006338 <USBD_CtlError>
            break;
 8005d26:	e053      	b.n	8005dd0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faf6 	bl	8006338 <USBD_CtlError>
            break;
 8005d4c:	e040      	b.n	8005dd0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da0b      	bge.n	8005d6e <USBD_StdEPReq+0x232>
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	3310      	adds	r3, #16
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4413      	add	r3, r2
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	e00a      	b.n	8005d84 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <USBD_StdEPReq+0x256>
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d103      	bne.n	8005d9a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e00e      	b.n	8005db8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f00b fbc4 	bl	801152c <USBD_LL_IsStallEP>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e002      	b.n	8005db8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 facb 	bl	800635a <USBD_CtlSendData>
          break;
 8005dc4:	e004      	b.n	8005dd0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fab5 	bl	8006338 <USBD_CtlError>
        break;
 8005dce:	bf00      	nop
      }
      break;
 8005dd0:	e004      	b.n	8005ddc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 faaf 	bl	8006338 <USBD_CtlError>
      break;
 8005dda:	bf00      	nop
    }
    break;
 8005ddc:	e004      	b.n	8005de8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 faa9 	bl	8006338 <USBD_CtlError>
    break;
 8005de6:	bf00      	nop
  }

  return ret;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	f200 80c9 	bhi.w	8005fa0 <USBD_GetDescriptor+0x1ac>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <USBD_GetDescriptor+0x20>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e31 	.word	0x08005e31
 8005e18:	08005e49 	.word	0x08005e49
 8005e1c:	08005e89 	.word	0x08005e89
 8005e20:	08005fa1 	.word	0x08005fa1
 8005e24:	08005fa1 	.word	0x08005fa1
 8005e28:	08005f4d 	.word	0x08005f4d
 8005e2c:	08005f73 	.word	0x08005f73
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
 8005e3c:	f107 010a 	add.w	r1, r7, #10
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
    break;
 8005e46:	e0b0      	b.n	8005faa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7c1b      	ldrb	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10d      	bne.n	8005e6c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f107 020a 	add.w	r2, r7, #10
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	2202      	movs	r2, #2
 8005e68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005e6a:	e09e      	b.n	8005faa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f107 020a 	add.w	r2, r7, #10
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
 8005e7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
    break;
 8005e86:	e090      	b.n	8005faa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	885b      	ldrh	r3, [r3, #2]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d856      	bhi.n	8005f40 <USBD_GetDescriptor+0x14c>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <USBD_GetDescriptor+0xa4>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005ec9 	.word	0x08005ec9
 8005ea0:	08005ee1 	.word	0x08005ee1
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005f29 	.word	0x08005f29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	7c12      	ldrb	r2, [r2, #16]
 8005ebc:	f107 010a 	add.w	r1, r7, #10
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	60f8      	str	r0, [r7, #12]
      break;
 8005ec6:	e040      	b.n	8005f4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7c12      	ldrb	r2, [r2, #16]
 8005ed4:	f107 010a 	add.w	r1, r7, #10
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	60f8      	str	r0, [r7, #12]
      break;
 8005ede:	e034      	b.n	8005f4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	7c12      	ldrb	r2, [r2, #16]
 8005eec:	f107 010a 	add.w	r1, r7, #10
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
 8005ef4:	60f8      	str	r0, [r7, #12]
      break;
 8005ef6:	e028      	b.n	8005f4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	7c12      	ldrb	r2, [r2, #16]
 8005f04:	f107 010a 	add.w	r1, r7, #10
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	60f8      	str	r0, [r7, #12]
      break;
 8005f0e:	e01c      	b.n	8005f4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	7c12      	ldrb	r2, [r2, #16]
 8005f1c:	f107 010a 	add.w	r1, r7, #10
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	60f8      	str	r0, [r7, #12]
      break;
 8005f26:	e010      	b.n	8005f4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	f107 010a 	add.w	r1, r7, #10
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
      break;
 8005f3e:	e004      	b.n	8005f4a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9f8 	bl	8006338 <USBD_CtlError>
      return;
 8005f48:	e04b      	b.n	8005fe2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005f4a:	e02e      	b.n	8005faa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7c1b      	ldrb	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	f107 020a 	add.w	r2, r7, #10
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
      break;
 8005f66:	e020      	b.n	8005faa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9e4 	bl	8006338 <USBD_CtlError>
      return;
 8005f70:	e037      	b.n	8005fe2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7c1b      	ldrb	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	f107 020a 	add.w	r2, r7, #10
 8005f86:	4610      	mov	r0, r2
 8005f88:	4798      	blx	r3
 8005f8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	2207      	movs	r2, #7
 8005f92:	701a      	strb	r2, [r3, #0]
      break;
 8005f94:	e009      	b.n	8005faa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9cd 	bl	8006338 <USBD_CtlError>
      return;
 8005f9e:	e020      	b.n	8005fe2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9c8 	bl	8006338 <USBD_CtlError>
    return;
 8005fa8:	e01b      	b.n	8005fe2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005faa:	897b      	ldrh	r3, [r7, #10]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d011      	beq.n	8005fd4 <USBD_GetDescriptor+0x1e0>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	88db      	ldrh	r3, [r3, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	88da      	ldrh	r2, [r3, #6]
 8005fbc:	897b      	ldrh	r3, [r7, #10]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bf28      	it	cs
 8005fc2:	4613      	movcs	r3, r2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005fc8:	897b      	ldrh	r3, [r7, #10]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68f9      	ldr	r1, [r7, #12]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9c3 	bl	800635a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	88db      	ldrh	r3, [r3, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f9fc 	bl	80063da <USBD_CtlSendStatus>
  }
}
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	889b      	ldrh	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d130      	bne.n	800605c <USBD_SetAddress+0x74>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	88db      	ldrh	r3, [r3, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d12c      	bne.n	800605c <USBD_SetAddress+0x74>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	885b      	ldrh	r3, [r3, #2]
 8006006:	2b7f      	cmp	r3, #127	; 0x7f
 8006008:	d828      	bhi.n	800605c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	885b      	ldrh	r3, [r3, #2]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800601c:	2b03      	cmp	r3, #3
 800601e:	d104      	bne.n	800602a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f988 	bl	8006338 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006028:	e01c      	b.n	8006064 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f00b fa9d 	bl	8011576 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9cc 	bl	80063da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006050:	e008      	b.n	8006064 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605a:	e003      	b.n	8006064 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f96a 	bl	8006338 <USBD_CtlError>
  }
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	885b      	ldrh	r3, [r3, #2]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b41      	ldr	r3, [pc, #260]	; (8006184 <USBD_SetConfig+0x118>)
 800607e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006080:	4b40      	ldr	r3, [pc, #256]	; (8006184 <USBD_SetConfig+0x118>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d904      	bls.n	8006092 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f954 	bl	8006338 <USBD_CtlError>
 8006090:	e075      	b.n	800617e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006098:	2b02      	cmp	r3, #2
 800609a:	d002      	beq.n	80060a2 <USBD_SetConfig+0x36>
 800609c:	2b03      	cmp	r3, #3
 800609e:	d023      	beq.n	80060e8 <USBD_SetConfig+0x7c>
 80060a0:	e062      	b.n	8006168 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <USBD_SetConfig+0x118>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01a      	beq.n	80060e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80060aa:	4b36      	ldr	r3, [pc, #216]	; (8006184 <USBD_SetConfig+0x118>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2203      	movs	r2, #3
 80060b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <USBD_SetConfig+0x118>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fa68 	bl	8005598 <USBD_SetClassConfig>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d104      	bne.n	80060d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f931 	bl	8006338 <USBD_CtlError>
          return;
 80060d6:	e052      	b.n	800617e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f97e 	bl	80063da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80060de:	e04e      	b.n	800617e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f97a 	bl	80063da <USBD_CtlSendStatus>
      break;
 80060e6:	e04a      	b.n	800617e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80060e8:	4b26      	ldr	r3, [pc, #152]	; (8006184 <USBD_SetConfig+0x118>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d112      	bne.n	8006116 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <USBD_SetConfig+0x118>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <USBD_SetConfig+0x118>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fa64 	bl	80055d6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f963 	bl	80063da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006114:	e033      	b.n	800617e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <USBD_SetConfig+0x118>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d01d      	beq.n	8006160 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fa52 	bl	80055d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <USBD_SetConfig+0x118>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <USBD_SetConfig+0x118>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fa28 	bl	8005598 <USBD_SetClassConfig>
 8006148:	4603      	mov	r3, r0
 800614a:	2b02      	cmp	r3, #2
 800614c:	d104      	bne.n	8006158 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8f1 	bl	8006338 <USBD_CtlError>
          return;
 8006156:	e012      	b.n	800617e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f93e 	bl	80063da <USBD_CtlSendStatus>
      break;
 800615e:	e00e      	b.n	800617e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f93a 	bl	80063da <USBD_CtlSendStatus>
      break;
 8006166:	e00a      	b.n	800617e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8e4 	bl	8006338 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <USBD_SetConfig+0x118>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fa2d 	bl	80055d6 <USBD_ClrClassConfig>
      break;
 800617c:	bf00      	nop
    }
  }
}
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200001b4 	.word	0x200001b4

08006188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	88db      	ldrh	r3, [r3, #6]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d004      	beq.n	80061a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8cb 	bl	8006338 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80061a2:	e021      	b.n	80061e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	db17      	blt.n	80061de <USBD_GetConfig+0x56>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	dd02      	ble.n	80061b8 <USBD_GetConfig+0x30>
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d00b      	beq.n	80061ce <USBD_GetConfig+0x46>
 80061b6:	e012      	b.n	80061de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3308      	adds	r3, #8
 80061c2:	2201      	movs	r2, #1
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8c7 	bl	800635a <USBD_CtlSendData>
      break;
 80061cc:	e00c      	b.n	80061e8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3304      	adds	r3, #4
 80061d2:	2201      	movs	r2, #1
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8bf 	bl	800635a <USBD_CtlSendData>
      break;
 80061dc:	e004      	b.n	80061e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8a9 	bl	8006338 <USBD_CtlError>
      break;
 80061e6:	bf00      	nop
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006200:	3b01      	subs	r3, #1
 8006202:	2b02      	cmp	r3, #2
 8006204:	d81e      	bhi.n	8006244 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	88db      	ldrh	r3, [r3, #6]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d004      	beq.n	8006218 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f891 	bl	8006338 <USBD_CtlError>
      break;
 8006216:	e01a      	b.n	800624e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f043 0202 	orr.w	r2, r3, #2
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	330c      	adds	r3, #12
 8006238:	2202      	movs	r2, #2
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f88c 	bl	800635a <USBD_CtlSendData>
    break;
 8006242:	e004      	b.n	800624e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f876 	bl	8006338 <USBD_CtlError>
    break;
 800624c:	bf00      	nop
  }
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	885b      	ldrh	r3, [r3, #2]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d106      	bne.n	8006276 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8b2 	bl	80063da <USBD_CtlSendStatus>
  }

}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800628e:	3b01      	subs	r3, #1
 8006290:	2b02      	cmp	r3, #2
 8006292:	d80b      	bhi.n	80062ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	885b      	ldrh	r3, [r3, #2]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d10c      	bne.n	80062b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f898 	bl	80063da <USBD_CtlSendStatus>
    }
    break;
 80062aa:	e004      	b.n	80062b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f842 	bl	8006338 <USBD_CtlError>
    break;
 80062b4:	e000      	b.n	80062b8 <USBD_ClrFeature+0x3a>
    break;
 80062b6:	bf00      	nop
  }
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	785a      	ldrb	r2, [r3, #1]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3302      	adds	r3, #2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	3303      	adds	r3, #3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	4413      	add	r3, r2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	3304      	adds	r3, #4
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	3305      	adds	r3, #5
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	b29b      	uxth	r3, r3
 800630a:	4413      	add	r3, r2
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	3306      	adds	r3, #6
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b29a      	uxth	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	3307      	adds	r3, #7
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	b29b      	uxth	r3, r3
 8006326:	4413      	add	r3, r2
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	80da      	strh	r2, [r3, #6]

}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f00b f8b3 	bl	80114b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800634a:	2100      	movs	r1, #0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f00b f8af 	bl	80114b0 <USBD_LL_StallEP>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	4613      	mov	r3, r2
 8006366:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2202      	movs	r2, #2
 800636c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006370:	88fa      	ldrh	r2, [r7, #6]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	2100      	movs	r1, #0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f00b f916 	bl	80115b4 <USBD_LL_Transmit>

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4613      	mov	r3, r2
 800639e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	2100      	movs	r1, #0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f00b f904 	bl	80115b4 <USBD_LL_Transmit>

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	4613      	mov	r3, r2
 80063c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	2100      	movs	r1, #0
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f00b f915 	bl	80115fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2204      	movs	r2, #4
 80063e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063ea:	2300      	movs	r3, #0
 80063ec:	2200      	movs	r2, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f00b f8df 	bl	80115b4 <USBD_LL_Transmit>

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2205      	movs	r2, #5
 800640c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006410:	2300      	movs	r3, #0
 8006412:	2200      	movs	r2, #0
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f00b f8ef 	bl	80115fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <OnRadioTxDone>:
 * \retval rxConfigParams   Returns a RxConfigParams_t structure.
 */
static RxConfigParams_t ComputeRxWindowParameters( int8_t datarate, uint32_t rxError );

static void OnRadioTxDone( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
    TimerTime_t curTime = TimerGetCurrentTime( );
 800642e:	f00a fde4 	bl	8010ffa <TimerGetCurrentTime>
 8006432:	6078      	str	r0, [r7, #4]

    if( LoRaMacDeviceClass != CLASS_C )
 8006434:	4b3f      	ldr	r3, [pc, #252]	; (8006534 <OnRadioTxDone+0x10c>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d003      	beq.n	8006444 <OnRadioTxDone+0x1c>
    {
        Radio.Sleep( );
 800643c:	4b3e      	ldr	r3, [pc, #248]	; (8006538 <OnRadioTxDone+0x110>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4798      	blx	r3
 8006442:	e001      	b.n	8006448 <OnRadioTxDone+0x20>
    }
    else
    {
        OnRxWindow2TimerEvent( );
 8006444:	f001 f8aa 	bl	800759c <OnRxWindow2TimerEvent>
    }

    // Setup timers
    //下行数据的开始，是在发送完成后，延时一段时间，分别开启RX1和RX2接收窗口
    if( IsRxWindowsEnabled == true )
 8006448:	4b3c      	ldr	r3, [pc, #240]	; (800653c <OnRadioTxDone+0x114>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d031      	beq.n	80064b4 <OnRadioTxDone+0x8c>
    {
        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
 8006450:	4b3b      	ldr	r3, [pc, #236]	; (8006540 <OnRadioTxDone+0x118>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4619      	mov	r1, r3
 8006456:	483b      	ldr	r0, [pc, #236]	; (8006544 <OnRadioTxDone+0x11c>)
 8006458:	f00a fdb6 	bl	8010fc8 <TimerSetValue>
        TimerStart( &RxWindowTimer1 );
 800645c:	4839      	ldr	r0, [pc, #228]	; (8006544 <OnRadioTxDone+0x11c>)
 800645e:	f00a fbaf 	bl	8010bc0 <TimerStart>
        if( LoRaMacDeviceClass != CLASS_C )
 8006462:	4b34      	ldr	r3, [pc, #208]	; (8006534 <OnRadioTxDone+0x10c>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d008      	beq.n	800647c <OnRadioTxDone+0x54>
        {
            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <OnRadioTxDone+0x120>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	4836      	ldr	r0, [pc, #216]	; (800654c <OnRadioTxDone+0x124>)
 8006472:	f00a fda9 	bl	8010fc8 <TimerSetValue>
            TimerStart( &RxWindowTimer2 );
 8006476:	4835      	ldr	r0, [pc, #212]	; (800654c <OnRadioTxDone+0x124>)
 8006478:	f00a fba2 	bl	8010bc0 <TimerStart>
        }
        if( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) )
 800647c:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <OnRadioTxDone+0x10c>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d003      	beq.n	800648c <OnRadioTxDone+0x64>
 8006484:	4b32      	ldr	r3, [pc, #200]	; (8006550 <OnRadioTxDone+0x128>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d027      	beq.n	80064dc <OnRadioTxDone+0xb4>
        {
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + ACK_TIMEOUT +
                                             randr( -ACK_TIMEOUT_RND, ACK_TIMEOUT_RND ) );
 800648c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006490:	4830      	ldr	r0, [pc, #192]	; (8006554 <OnRadioTxDone+0x12c>)
 8006492:	f00b f931 	bl	80116f8 <randr>
 8006496:	4603      	mov	r3, r0
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + ACK_TIMEOUT +
 8006498:	461a      	mov	r2, r3
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <OnRadioTxDone+0x120>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80064a4:	4619      	mov	r1, r3
 80064a6:	482c      	ldr	r0, [pc, #176]	; (8006558 <OnRadioTxDone+0x130>)
 80064a8:	f00a fd8e 	bl	8010fc8 <TimerSetValue>
            TimerStart( &AckTimeoutTimer );
 80064ac:	482a      	ldr	r0, [pc, #168]	; (8006558 <OnRadioTxDone+0x130>)
 80064ae:	f00a fb87 	bl	8010bc0 <TimerStart>
 80064b2:	e013      	b.n	80064dc <OnRadioTxDone+0xb4>
        }
    }
    else
    {
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80064b4:	4b29      	ldr	r3, [pc, #164]	; (800655c <OnRadioTxDone+0x134>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <OnRadioTxDone+0x138>)
 80064bc:	2203      	movs	r2, #3
 80064be:	705a      	strb	r2, [r3, #1]

        if( LoRaMacFlags.Value == 0 )
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <OnRadioTxDone+0x13c>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <OnRadioTxDone+0xaa>
        {
            LoRaMacFlags.Bits.McpsReq = 1;
 80064c8:	4a26      	ldr	r2, [pc, #152]	; (8006564 <OnRadioTxDone+0x13c>)
 80064ca:	7813      	ldrb	r3, [r2, #0]
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	7013      	strb	r3, [r2, #0]
        }
        LoRaMacFlags.Bits.MacDone = 1;
 80064d2:	4a24      	ldr	r2, [pc, #144]	; (8006564 <OnRadioTxDone+0x13c>)
 80064d4:	7813      	ldrb	r3, [r2, #0]
 80064d6:	f043 0310 	orr.w	r3, r3, #16
 80064da:	7013      	strb	r3, [r2, #0]
    }

    // Update last tx done time for the current channel
    Bands[Channels[Channel].Band].LastTxDoneTime = curTime;
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <OnRadioTxDone+0x140>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4a22      	ldr	r2, [pc, #136]	; (800656c <OnRadioTxDone+0x144>)
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	795b      	ldrb	r3, [r3, #5]
 80064e8:	4619      	mov	r1, r3
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <OnRadioTxDone+0x148>)
 80064ec:	460b      	mov	r3, r1
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	440b      	add	r3, r1
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	3304      	adds	r3, #4
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
    // Update Aggregated last tx done time
    AggregatedLastTxDoneTime = curTime;
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <OnRadioTxDone+0x14c>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
    // Update Backoff
    CalculateBackOff( Channel );
 8006502:	4b19      	ldr	r3, [pc, #100]	; (8006568 <OnRadioTxDone+0x140>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f002 fa78 	bl	80089fc <CalculateBackOff>

    if( NodeAckRequested == false )
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <OnRadioTxDone+0x128>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f083 0301 	eor.w	r3, r3, #1
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <OnRadioTxDone+0x104>
    {
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <OnRadioTxDone+0x134>)
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
        ChannelsNbRepCounter++;
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <OnRadioTxDone+0x150>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <OnRadioTxDone+0x150>)
 800652a:	701a      	strb	r2, [r3, #0]
    }
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200001f4 	.word	0x200001f4
 8006538:	080127e4 	.word	0x080127e4
 800653c:	20000008 	.word	0x20000008
 8006540:	200004c0 	.word	0x200004c0
 8006544:	20000498 	.word	0x20000498
 8006548:	200004c4 	.word	0x200004c4
 800654c:	200004ac 	.word	0x200004ac
 8006550:	2000040c 	.word	0x2000040c
 8006554:	fffffc18 	.word	0xfffffc18
 8006558:	200004e0 	.word	0x200004e0
 800655c:	20000518 	.word	0x20000518
 8006560:	2000052c 	.word	0x2000052c
 8006564:	20000974 	.word	0x20000974
 8006568:	20000441 	.word	0x20000441
 800656c:	20000048 	.word	0x20000048
 8006570:	2000000c 	.word	0x2000000c
 8006574:	20000438 	.word	0x20000438
 8006578:	20000433 	.word	0x20000433

0800657c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
    LoRaMacState |= LORAMAC_RX_ABORT;
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <PrepareRxDoneAbort+0x44>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006588:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <PrepareRxDoneAbort+0x44>)
 800658a:	6013      	str	r3, [r2, #0]

    if( NodeAckRequested )
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <PrepareRxDoneAbort+0x48>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <PrepareRxDoneAbort+0x1c>
    {
        OnAckTimeoutTimerEvent( );
 8006594:	f001 f836 	bl	8007604 <OnAckTimeoutTimerEvent>
    }

    LoRaMacFlags.Bits.McpsInd = 1;
 8006598:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <PrepareRxDoneAbort+0x4c>)
 800659a:	7813      	ldrb	r3, [r2, #0]
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	7013      	strb	r3, [r2, #0]
    LoRaMacFlags.Bits.MacDone = 1;
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <PrepareRxDoneAbort+0x4c>)
 80065a4:	7813      	ldrb	r3, [r2, #0]
 80065a6:	f043 0310 	orr.w	r3, r3, #16
 80065aa:	7013      	strb	r3, [r2, #0]

    // Trig OnMacCheckTimerEvent call as soon as possible
    TimerSetValue( &MacStateCheckTimer, 1 );
 80065ac:	2101      	movs	r1, #1
 80065ae:	4807      	ldr	r0, [pc, #28]	; (80065cc <PrepareRxDoneAbort+0x50>)
 80065b0:	f00a fd0a 	bl	8010fc8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 80065b4:	4805      	ldr	r0, [pc, #20]	; (80065cc <PrepareRxDoneAbort+0x50>)
 80065b6:	f00a fb03 	bl	8010bc0 <TimerStart>
}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000448 	.word	0x20000448
 80065c4:	2000040c 	.word	0x2000040c
 80065c8:	20000974 	.word	0x20000974
 80065cc:	2000044c 	.word	0x2000044c

080065d0 <OnRadioRxDone>:
//OnRadioRxDone携带着MAC�?
static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b09b      	sub	sp, #108	; 0x6c
 80065d4:	af04      	add	r7, sp, #16
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	461a      	mov	r2, r3
 80065de:	4603      	mov	r3, r0
 80065e0:	817b      	strh	r3, [r7, #10]
 80065e2:	460b      	mov	r3, r1
 80065e4:	813b      	strh	r3, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacHeader_t macHdr;
    LoRaMacFrameCtrl_t fCtrl;
    bool skipIndication = false;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    uint8_t pktHeaderLen = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint32_t address = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t appPayloadStartIndex = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t port = 0xFF;
 8006600:	23ff      	movs	r3, #255	; 0xff
 8006602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t frameLen = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t mic = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
    uint32_t micRx = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	633b      	str	r3, [r7, #48]	; 0x30

    uint16_t sequenceCounter = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t sequenceCounterPrev = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t sequenceCounterDiff = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t downLinkCounter = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	653b      	str	r3, [r7, #80]	; 0x50

    MulticastParams_t *curMulticastParams = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t *nwkSKey = LoRaMacNwkSKey;
 8006628:	4b9c      	ldr	r3, [pc, #624]	; (800689c <OnRadioRxDone+0x2cc>)
 800662a:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t *appSKey = LoRaMacAppSKey;
 800662c:	4b9c      	ldr	r3, [pc, #624]	; (80068a0 <OnRadioRxDone+0x2d0>)
 800662e:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t multicast = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    bool isMicOk = false;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

    McpsConfirm.AckReceived = false;
 800663c:	4b99      	ldr	r3, [pc, #612]	; (80068a4 <OnRadioRxDone+0x2d4>)
 800663e:	2200      	movs	r2, #0
 8006640:	711a      	strb	r2, [r3, #4]
    McpsIndication.Rssi = rssi;
 8006642:	4a99      	ldr	r2, [pc, #612]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006644:	893b      	ldrh	r3, [r7, #8]
 8006646:	81d3      	strh	r3, [r2, #14]
    McpsIndication.Snr = snr;
 8006648:	79fa      	ldrb	r2, [r7, #7]
 800664a:	4b97      	ldr	r3, [pc, #604]	; (80068a8 <OnRadioRxDone+0x2d8>)
 800664c:	741a      	strb	r2, [r3, #16]
    McpsIndication.RxSlot = RxSlot;
 800664e:	4b97      	ldr	r3, [pc, #604]	; (80068ac <OnRadioRxDone+0x2dc>)
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	4b95      	ldr	r3, [pc, #596]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006654:	745a      	strb	r2, [r3, #17]
    McpsIndication.Port = 0;
 8006656:	4b94      	ldr	r3, [pc, #592]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006658:	2200      	movs	r2, #0
 800665a:	70da      	strb	r2, [r3, #3]
    McpsIndication.Multicast = 0;
 800665c:	4b92      	ldr	r3, [pc, #584]	; (80068a8 <OnRadioRxDone+0x2d8>)
 800665e:	2200      	movs	r2, #0
 8006660:	709a      	strb	r2, [r3, #2]
    McpsIndication.FramePending = 0;
 8006662:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006664:	2200      	movs	r2, #0
 8006666:	715a      	strb	r2, [r3, #5]
    McpsIndication.Buffer = NULL;
 8006668:	4b8f      	ldr	r3, [pc, #572]	; (80068a8 <OnRadioRxDone+0x2d8>)
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]
    McpsIndication.BufferSize = 0;
 800666e:	4b8e      	ldr	r3, [pc, #568]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006670:	2200      	movs	r2, #0
 8006672:	731a      	strb	r2, [r3, #12]
    McpsIndication.RxData = false;
 8006674:	4b8c      	ldr	r3, [pc, #560]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006676:	2200      	movs	r2, #0
 8006678:	735a      	strb	r2, [r3, #13]
    McpsIndication.AckReceived = false;
 800667a:	4b8b      	ldr	r3, [pc, #556]	; (80068a8 <OnRadioRxDone+0x2d8>)
 800667c:	2200      	movs	r2, #0
 800667e:	749a      	strb	r2, [r3, #18]
    McpsIndication.DownLinkCounter = 0;
 8006680:	4b89      	ldr	r3, [pc, #548]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006682:	2200      	movs	r2, #0
 8006684:	615a      	str	r2, [r3, #20]
    McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006686:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <OnRadioRxDone+0x2d8>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]

    Radio.Sleep( );
 800668c:	4b88      	ldr	r3, [pc, #544]	; (80068b0 <OnRadioRxDone+0x2e0>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4798      	blx	r3
    TimerStop( &RxWindowTimer2 );
 8006692:	4888      	ldr	r0, [pc, #544]	; (80068b4 <OnRadioRxDone+0x2e4>)
 8006694:	f00a fbdc 	bl	8010e50 <TimerStop>

    macHdr.Value = payload[pktHeaderLen++];
 8006698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f887 3020 	strb.w	r3, [r7, #32]

    switch( macHdr.Bits.MType )
 80066ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	f200 83fa 	bhi.w	8006eb4 <OnRadioRxDone+0x8e4>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <OnRadioRxDone+0xf8>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	08006eb5 	.word	0x08006eb5
 80066d0:	0800697d 	.word	0x0800697d
 80066d4:	08006eb5 	.word	0x08006eb5
 80066d8:	0800697d 	.word	0x0800697d
 80066dc:	08006eb5 	.word	0x08006eb5
 80066e0:	08006e43 	.word	0x08006e43
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            if( IsLoRaMacNetworkJoined == true )
 80066e4:	4b74      	ldr	r3, [pc, #464]	; (80068b8 <OnRadioRxDone+0x2e8>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <OnRadioRxDone+0x128>
            {
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80066ec:	4b6e      	ldr	r3, [pc, #440]	; (80068a8 <OnRadioRxDone+0x2d8>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 80066f2:	f7ff ff43 	bl	800657c <PrepareRxDoneAbort>
                return;
 80066f6:	e3ea      	b.n	8006ece <OnRadioRxDone+0x8fe>
            }
            LoRaMacJoinDecrypt( payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1 );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	1c58      	adds	r0, r3, #1
 80066fc:	897b      	ldrh	r3, [r7, #10]
 80066fe:	3b01      	subs	r3, #1
 8006700:	b299      	uxth	r1, r3
 8006702:	4b6e      	ldr	r3, [pc, #440]	; (80068bc <OnRadioRxDone+0x2ec>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b6e      	ldr	r3, [pc, #440]	; (80068c0 <OnRadioRxDone+0x2f0>)
 8006708:	f004 f8b4 	bl	800a874 <LoRaMacJoinDecrypt>

            LoRaMacRxPayload[0] = macHdr.Value;
 800670c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006710:	4b6c      	ldr	r3, [pc, #432]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006712:	701a      	strb	r2, [r3, #0]

            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	3b04      	subs	r3, #4
 8006718:	b299      	uxth	r1, r3
 800671a:	4b68      	ldr	r3, [pc, #416]	; (80068bc <OnRadioRxDone+0x2ec>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f107 0318 	add.w	r3, r7, #24
 8006722:	4868      	ldr	r0, [pc, #416]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006724:	f004 f874 	bl	800a810 <LoRaMacJoinComputeMic>

            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 8006728:	897b      	ldrh	r3, [r7, #10]
 800672a:	3b04      	subs	r3, #4
 800672c:	4a65      	ldr	r2, [pc, #404]	; (80068c4 <OnRadioRxDone+0x2f4>)
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	461a      	mov	r2, r3
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	4313      	orrs	r3, r2
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8006738:	897b      	ldrh	r3, [r7, #10]
 800673a:	3b03      	subs	r3, #3
 800673c:	4a61      	ldr	r2, [pc, #388]	; (80068c4 <OnRadioRxDone+0x2f4>)
 800673e:	5cd3      	ldrb	r3, [r2, r3]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006744:	4313      	orrs	r3, r2
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8006748:	897b      	ldrh	r3, [r7, #10]
 800674a:	3b02      	subs	r3, #2
 800674c:	4a5d      	ldr	r2, [pc, #372]	; (80068c4 <OnRadioRxDone+0x2f4>)
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006754:	4313      	orrs	r3, r2
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8006758:	897b      	ldrh	r3, [r7, #10]
 800675a:	3b01      	subs	r3, #1
 800675c:	4a59      	ldr	r2, [pc, #356]	; (80068c4 <OnRadioRxDone+0x2f4>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006764:	4313      	orrs	r3, r2
 8006766:	633b      	str	r3, [r7, #48]	; 0x30

            if( micRx == mic )
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676c:	429a      	cmp	r2, r3
 800676e:	f040 8101 	bne.w	8006974 <OnRadioRxDone+0x3a4>
            {
                LoRaMacJoinComputeSKeys( LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey );
 8006772:	4b52      	ldr	r3, [pc, #328]	; (80068bc <OnRadioRxDone+0x2ec>)
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	4952      	ldr	r1, [pc, #328]	; (80068c0 <OnRadioRxDone+0x2f0>)
 8006778:	4b53      	ldr	r3, [pc, #332]	; (80068c8 <OnRadioRxDone+0x2f8>)
 800677a:	881a      	ldrh	r2, [r3, #0]
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <OnRadioRxDone+0x2d0>)
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4b46      	ldr	r3, [pc, #280]	; (800689c <OnRadioRxDone+0x2cc>)
 8006782:	f004 f8a1 	bl	800a8c8 <LoRaMacJoinComputeSKeys>

                LoRaMacNetID = ( uint32_t )LoRaMacRxPayload[4];
 8006786:	4b4f      	ldr	r3, [pc, #316]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	461a      	mov	r2, r3
 800678c:	4b4f      	ldr	r3, [pc, #316]	; (80068cc <OnRadioRxDone+0x2fc>)
 800678e:	601a      	str	r2, [r3, #0]
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006792:	795b      	ldrb	r3, [r3, #5]
 8006794:	021a      	lsls	r2, r3, #8
 8006796:	4b4d      	ldr	r3, [pc, #308]	; (80068cc <OnRadioRxDone+0x2fc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4313      	orrs	r3, r2
 800679c:	4a4b      	ldr	r2, [pc, #300]	; (80068cc <OnRadioRxDone+0x2fc>)
 800679e:	6013      	str	r3, [r2, #0]
                LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 80067a0:	4b48      	ldr	r3, [pc, #288]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067a2:	799b      	ldrb	r3, [r3, #6]
 80067a4:	041a      	lsls	r2, r3, #16
 80067a6:	4b49      	ldr	r3, [pc, #292]	; (80068cc <OnRadioRxDone+0x2fc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	4a47      	ldr	r2, [pc, #284]	; (80068cc <OnRadioRxDone+0x2fc>)
 80067ae:	6013      	str	r3, [r2, #0]

                LoRaMacDevAddr = ( uint32_t )LoRaMacRxPayload[7];
 80067b0:	4b44      	ldr	r3, [pc, #272]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067b2:	79db      	ldrb	r3, [r3, #7]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b46      	ldr	r3, [pc, #280]	; (80068d0 <OnRadioRxDone+0x300>)
 80067b8:	601a      	str	r2, [r3, #0]
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[8] << 8 );
 80067ba:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067bc:	7a1b      	ldrb	r3, [r3, #8]
 80067be:	021a      	lsls	r2, r3, #8
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <OnRadioRxDone+0x300>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	4a42      	ldr	r2, [pc, #264]	; (80068d0 <OnRadioRxDone+0x300>)
 80067c8:	6013      	str	r3, [r2, #0]
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[9] << 16 );
 80067ca:	4b3e      	ldr	r3, [pc, #248]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067cc:	7a5b      	ldrb	r3, [r3, #9]
 80067ce:	041a      	lsls	r2, r3, #16
 80067d0:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <OnRadioRxDone+0x300>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	4a3e      	ldr	r2, [pc, #248]	; (80068d0 <OnRadioRxDone+0x300>)
 80067d8:	6013      	str	r3, [r2, #0]
                LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 80067da:	4b3a      	ldr	r3, [pc, #232]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067dc:	7a9b      	ldrb	r3, [r3, #10]
 80067de:	061a      	lsls	r2, r3, #24
 80067e0:	4b3b      	ldr	r3, [pc, #236]	; (80068d0 <OnRadioRxDone+0x300>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <OnRadioRxDone+0x300>)
 80067e8:	6013      	str	r3, [r2, #0]

                // DLSettings
                LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 80067ea:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <OnRadioRxDone+0x2f4>)
 80067ec:	7adb      	ldrb	r3, [r3, #11]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <OnRadioRxDone+0x304>)
 80067fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006800:	7adb      	ldrb	r3, [r3, #11]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	b2da      	uxtb	r2, r3
 8006808:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <OnRadioRxDone+0x304>)
 800680a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                // RxDelay
                LoRaMacParams.ReceiveDelay1 = ( LoRaMacRxPayload[12] & 0x0F );
 800680e:	4b2d      	ldr	r3, [pc, #180]	; (80068c4 <OnRadioRxDone+0x2f4>)
 8006810:	7b1b      	ldrb	r3, [r3, #12]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <OnRadioRxDone+0x304>)
 8006818:	6113      	str	r3, [r2, #16]
                if( LoRaMacParams.ReceiveDelay1 == 0 )
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <OnRadioRxDone+0x304>)
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <OnRadioRxDone+0x258>
                {
                    LoRaMacParams.ReceiveDelay1 = 1;
 8006822:	4b2c      	ldr	r3, [pc, #176]	; (80068d4 <OnRadioRxDone+0x304>)
 8006824:	2201      	movs	r2, #1
 8006826:	611a      	str	r2, [r3, #16]
                }
                LoRaMacParams.ReceiveDelay1 *= 1e3;
 8006828:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <OnRadioRxDone+0x304>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	4618      	mov	r0, r3
 800682e:	f7f9 fdf1 	bl	8000414 <__aeabi_ui2d>
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	4b28      	ldr	r3, [pc, #160]	; (80068d8 <OnRadioRxDone+0x308>)
 8006838:	f7f9 fe66 	bl	8000508 <__aeabi_dmul>
 800683c:	4603      	mov	r3, r0
 800683e:	460c      	mov	r4, r1
 8006840:	4618      	mov	r0, r3
 8006842:	4621      	mov	r1, r4
 8006844:	f7fa f922 	bl	8000a8c <__aeabi_d2uiz>
 8006848:	4602      	mov	r2, r0
 800684a:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <OnRadioRxDone+0x304>)
 800684c:	611a      	str	r2, [r3, #16]
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1e3;
 800684e:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <OnRadioRxDone+0x304>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4618      	mov	r0, r3
 8006854:	f7f9 fdde 	bl	8000414 <__aeabi_ui2d>
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <OnRadioRxDone+0x308>)
 800685e:	f7f9 fc9d 	bl	800019c <__adddf3>
 8006862:	4603      	mov	r3, r0
 8006864:	460c      	mov	r4, r1
 8006866:	4618      	mov	r0, r3
 8006868:	4621      	mov	r1, r4
 800686a:	f7fa f90f 	bl	8000a8c <__aeabi_d2uiz>
 800686e:	4602      	mov	r2, r0
 8006870:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <OnRadioRxDone+0x304>)
 8006872:	615a      	str	r2, [r3, #20]

#if !( defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID ) )
                //CFList
                if( ( size - 1 ) > 16 )
 8006874:	897b      	ldrh	r3, [r7, #10]
 8006876:	3b01      	subs	r3, #1
 8006878:	2b10      	cmp	r3, #16
 800687a:	dd6f      	ble.n	800695c <OnRadioRxDone+0x38c>
                {
                    ChannelParams_t param;
                    param.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800687c:	2350      	movs	r3, #80	; 0x50
 800687e:	753b      	strb	r3, [r7, #20]

                    LoRaMacState |= LORAMAC_TX_CONFIG;
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <OnRadioRxDone+0x30c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f043 0320 	orr.w	r3, r3, #32
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <OnRadioRxDone+0x30c>)
 800688a:	6013      	str	r3, [r2, #0]
                    for( uint8_t i = 3, j = 0; i < ( 5 + 3 ); i++, j += 3 )
 800688c:	2303      	movs	r3, #3
 800688e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006892:	2300      	movs	r3, #0
 8006894:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006898:	e056      	b.n	8006948 <OnRadioRxDone+0x378>
 800689a:	bf00      	nop
 800689c:	200001c4 	.word	0x200001c4
 80068a0:	200001d4 	.word	0x200001d4
 80068a4:	20000518 	.word	0x20000518
 80068a8:	20000500 	.word	0x20000500
 80068ac:	20000538 	.word	0x20000538
 80068b0:	080127e4 	.word	0x080127e4
 80068b4:	200004ac 	.word	0x200004ac
 80068b8:	20000405 	.word	0x20000405
 80068bc:	200001c0 	.word	0x200001c0
 80068c0:	200002fd 	.word	0x200002fd
 80068c4:	200002fc 	.word	0x200002fc
 80068c8:	200001e4 	.word	0x200001e4
 80068cc:	200001e8 	.word	0x200001e8
 80068d0:	200001ec 	.word	0x200001ec
 80068d4:	200009b0 	.word	0x200009b0
 80068d8:	408f4000 	.word	0x408f4000
 80068dc:	20000448 	.word	0x20000448
                    {
                        param.Frequency = ( ( uint32_t )LoRaMacRxPayload[13 + j] | ( ( uint32_t )LoRaMacRxPayload[14 + j] << 8 ) | ( ( uint32_t )LoRaMacRxPayload[15 + j] << 16 ) ) * 100;
 80068e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80068e4:	330d      	adds	r3, #13
 80068e6:	4aa9      	ldr	r2, [pc, #676]	; (8006b8c <OnRadioRxDone+0x5bc>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	4619      	mov	r1, r3
 80068ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80068f0:	330e      	adds	r3, #14
 80068f2:	4aa6      	ldr	r2, [pc, #664]	; (8006b8c <OnRadioRxDone+0x5bc>)
 80068f4:	5cd3      	ldrb	r3, [r2, r3]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	ea41 0203 	orr.w	r2, r1, r3
 80068fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006900:	330f      	adds	r3, #15
 8006902:	49a2      	ldr	r1, [pc, #648]	; (8006b8c <OnRadioRxDone+0x5bc>)
 8006904:	5ccb      	ldrb	r3, [r1, r3]
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	4313      	orrs	r3, r2
 800690a:	2264      	movs	r2, #100	; 0x64
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	613b      	str	r3, [r7, #16]
                        if( param.Frequency != 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <OnRadioRxDone+0x35a>
                        {
                            LoRaMacChannelAdd( i, param );
 8006918:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
 800691c:	f107 0310 	add.w	r3, r7, #16
 8006920:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006924:	f003 fa44 	bl	8009db0 <LoRaMacChannelAdd>
 8006928:	e004      	b.n	8006934 <OnRadioRxDone+0x364>
                        }
                        else
                        {
                            LoRaMacChannelRemove( i );
 800692a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800692e:	4618      	mov	r0, r3
 8006930:	f003 fb56 	bl	8009fe0 <LoRaMacChannelRemove>
                    for( uint8_t i = 3, j = 0; i < ( 5 + 3 ); i++, j += 3 )
 8006934:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006938:	3301      	adds	r3, #1
 800693a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800693e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006942:	3303      	adds	r3, #3
 8006944:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006948:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800694c:	2b07      	cmp	r3, #7
 800694e:	d9c7      	bls.n	80068e0 <OnRadioRxDone+0x310>
                        }
                    }
                    LoRaMacState &= ~LORAMAC_TX_CONFIG;
 8006950:	4b8f      	ldr	r3, [pc, #572]	; (8006b90 <OnRadioRxDone+0x5c0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f023 0320 	bic.w	r3, r3, #32
 8006958:	4a8d      	ldr	r2, [pc, #564]	; (8006b90 <OnRadioRxDone+0x5c0>)
 800695a:	6013      	str	r3, [r2, #0]
                }
#endif
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800695c:	4b8d      	ldr	r3, [pc, #564]	; (8006b94 <OnRadioRxDone+0x5c4>)
 800695e:	2200      	movs	r2, #0
 8006960:	705a      	strb	r2, [r3, #1]
                IsLoRaMacNetworkJoined = true;
 8006962:	4b8d      	ldr	r3, [pc, #564]	; (8006b98 <OnRadioRxDone+0x5c8>)
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]
                LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8006968:	4b8c      	ldr	r3, [pc, #560]	; (8006b9c <OnRadioRxDone+0x5cc>)
 800696a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800696e:	4b8c      	ldr	r3, [pc, #560]	; (8006ba0 <OnRadioRxDone+0x5d0>)
 8006970:	705a      	strb	r2, [r3, #1]
            }
            else
            {
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
            }
            break;
 8006972:	e2a5      	b.n	8006ec0 <OnRadioRxDone+0x8f0>
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8006974:	4b87      	ldr	r3, [pc, #540]	; (8006b94 <OnRadioRxDone+0x5c4>)
 8006976:	2206      	movs	r2, #6
 8006978:	705a      	strb	r2, [r3, #1]
            break;
 800697a:	e2a1      	b.n	8006ec0 <OnRadioRxDone+0x8f0>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            {
                address = payload[pktHeaderLen++];
 800697c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8006986:	461a      	mov	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
                address |= ( (uint32_t)payload[pktHeaderLen++] << 8 );
 8006990:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800699a:	461a      	mov	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a6:	4313      	orrs	r3, r2
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
                address |= ( (uint32_t)payload[pktHeaderLen++] << 16 );
 80069aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80069b4:	461a      	mov	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c0:	4313      	orrs	r3, r2
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38
                address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 80069c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	061b      	lsls	r3, r3, #24
 80069d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069da:	4313      	orrs	r3, r2
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38

                if( address != LoRaMacDevAddr )
 80069de:	4b71      	ldr	r3, [pc, #452]	; (8006ba4 <OnRadioRxDone+0x5d4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d025      	beq.n	8006a34 <OnRadioRxDone+0x464>
                {
                    curMulticastParams = MulticastChannels;
 80069e8:	4b6f      	ldr	r3, [pc, #444]	; (8006ba8 <OnRadioRxDone+0x5d8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	64fb      	str	r3, [r7, #76]	; 0x4c
                    while( curMulticastParams != NULL )
 80069ee:	e014      	b.n	8006a1a <OnRadioRxDone+0x44a>
                    {
                        if( address == curMulticastParams->Address )
 80069f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10c      	bne.n	8006a14 <OnRadioRxDone+0x444>
                        {
                            multicast = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            nwkSKey = curMulticastParams->NwkSKey;
 8006a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a02:	3304      	adds	r3, #4
 8006a04:	64bb      	str	r3, [r7, #72]	; 0x48
                            appSKey = curMulticastParams->AppSKey;
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	3314      	adds	r3, #20
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
                            downLinkCounter = curMulticastParams->DownLinkCounter;
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	653b      	str	r3, [r7, #80]	; 0x50
                            break;
 8006a12:	e005      	b.n	8006a20 <OnRadioRxDone+0x450>
                        }
                        curMulticastParams = curMulticastParams->Next;
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
                    while( curMulticastParams != NULL )
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e7      	bne.n	80069f0 <OnRadioRxDone+0x420>
                    }
                    if( multicast == 0 )
 8006a20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10f      	bne.n	8006a48 <OnRadioRxDone+0x478>
                    {
                        // We are not the destination of this frame.
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <OnRadioRxDone+0x5dc>)
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	705a      	strb	r2, [r3, #1]
                        PrepareRxDoneAbort( );
 8006a2e:	f7ff fda5 	bl	800657c <PrepareRxDoneAbort>
                        return;
 8006a32:	e24c      	b.n	8006ece <OnRadioRxDone+0x8fe>
                    }
                }
                else
                {
                    multicast = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    nwkSKey = LoRaMacNwkSKey;
 8006a3a:	4b5d      	ldr	r3, [pc, #372]	; (8006bb0 <OnRadioRxDone+0x5e0>)
 8006a3c:	64bb      	str	r3, [r7, #72]	; 0x48
                    appSKey = LoRaMacAppSKey;
 8006a3e:	4b5d      	ldr	r3, [pc, #372]	; (8006bb4 <OnRadioRxDone+0x5e4>)
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
                    downLinkCounter = DownLinkCounter;
 8006a42:	4b5d      	ldr	r3, [pc, #372]	; (8006bb8 <OnRadioRxDone+0x5e8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	653b      	str	r3, [r7, #80]	; 0x50
                }

                fCtrl.Value = payload[pktHeaderLen++];
 8006a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8006a52:	461a      	mov	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	773b      	strb	r3, [r7, #28]

                sequenceCounter = ( uint16_t )payload[pktHeaderLen++];
 8006a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
                sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 8006a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b21a      	sxth	r2, r3
 8006a86:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

                appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 8006a90:	7f3b      	ldrb	r3, [r7, #28]
 8006a92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	3308      	adds	r3, #8
 8006a9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

                micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	3b04      	subs	r3, #4
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	4313      	orrs	r3, r2
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8006ab0:	897b      	ldrh	r3, [r7, #10]
 8006ab2:	3b03      	subs	r3, #3
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	3b02      	subs	r3, #2
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
                micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8006ad4:	897b      	ldrh	r3, [r7, #10]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30

                sequenceCounterPrev = ( uint16_t )downLinkCounter;
 8006ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                sequenceCounterDiff = ( sequenceCounter - sequenceCounterPrev );
 8006aea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006aec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	857b      	strh	r3, [r7, #42]	; 0x2a

                if( sequenceCounterDiff < ( 1 << 15 ) )
 8006af2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	db1a      	blt.n	8006b30 <OnRadioRxDone+0x560>
                {
                    downLinkCounter += sequenceCounterDiff;
 8006afa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006afc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006afe:	4413      	add	r3, r2
 8006b00:	653b      	str	r3, [r7, #80]	; 0x50
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 8006b02:	897b      	ldrh	r3, [r7, #10]
 8006b04:	3b04      	subs	r3, #4
 8006b06:	b299      	uxth	r1, r3
 8006b08:	f107 0318 	add.w	r3, r7, #24
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2301      	movs	r3, #1
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f003 fd54 	bl	800a5c8 <LoRaMacComputeMic>
                    if( micRx == mic )
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d123      	bne.n	8006b70 <OnRadioRxDone+0x5a0>
                    {
                        isMicOk = true;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b2e:	e01f      	b.n	8006b70 <OnRadioRxDone+0x5a0>
                    }
                }
                else
                {
                    // check for sequence roll-over
                    uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 8006b30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006b34:	461a      	mov	r2, r3
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
                    LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 8006b40:	897b      	ldrh	r3, [r7, #10]
 8006b42:	3b04      	subs	r3, #4
 8006b44:	b299      	uxth	r1, r3
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	2301      	movs	r3, #1
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f003 fd35 	bl	800a5c8 <LoRaMacComputeMic>
                    if( micRx == mic )
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d104      	bne.n	8006b70 <OnRadioRxDone+0x5a0>
                    {
                        isMicOk = true;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                        downLinkCounter = downLinkCounterTmp;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                // Check for a the maximum allowed counter difference
                if( sequenceCounterDiff >= MAX_FCNT_GAP )
 8006b70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b76:	d321      	bcc.n	8006bbc <OnRadioRxDone+0x5ec>
                {
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <OnRadioRxDone+0x5dc>)
 8006b7a:	2209      	movs	r2, #9
 8006b7c:	705a      	strb	r2, [r3, #1]
                    McpsIndication.DownLinkCounter = downLinkCounter;
 8006b7e:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <OnRadioRxDone+0x5dc>)
 8006b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b82:	6153      	str	r3, [r2, #20]
                    PrepareRxDoneAbort( );
 8006b84:	f7ff fcfa 	bl	800657c <PrepareRxDoneAbort>
                    return;
 8006b88:	e1a1      	b.n	8006ece <OnRadioRxDone+0x8fe>
 8006b8a:	bf00      	nop
 8006b8c:	200002fc 	.word	0x200002fc
 8006b90:	20000448 	.word	0x20000448
 8006b94:	2000052c 	.word	0x2000052c
 8006b98:	20000405 	.word	0x20000405
 8006b9c:	20000978 	.word	0x20000978
 8006ba0:	200009b0 	.word	0x200009b0
 8006ba4:	200001ec 	.word	0x200001ec
 8006ba8:	200001f0 	.word	0x200001f0
 8006bac:	20000500 	.word	0x20000500
 8006bb0:	200001c4 	.word	0x200001c4
 8006bb4:	200001d4 	.word	0x200001d4
 8006bb8:	20000400 	.word	0x20000400
                }

                if( isMicOk == true )
 8006bbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8138 	beq.w	8006e36 <OnRadioRxDone+0x866>
                {
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006bc6:	4baf      	ldr	r3, [pc, #700]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	705a      	strb	r2, [r3, #1]
                    McpsIndication.Multicast = multicast;
 8006bcc:	4aad      	ldr	r2, [pc, #692]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006bce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bd2:	7093      	strb	r3, [r2, #2]
                    McpsIndication.FramePending = fCtrl.Bits.FPending;
 8006bd4:	7f3b      	ldrb	r3, [r7, #28]
 8006bd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4ba9      	ldr	r3, [pc, #676]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006be0:	715a      	strb	r2, [r3, #5]
                    McpsIndication.Buffer = NULL;
 8006be2:	4ba8      	ldr	r3, [pc, #672]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	609a      	str	r2, [r3, #8]
                    McpsIndication.BufferSize = 0;
 8006be8:	4ba6      	ldr	r3, [pc, #664]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	731a      	strb	r2, [r3, #12]
                    McpsIndication.DownLinkCounter = downLinkCounter;
 8006bee:	4aa5      	ldr	r2, [pc, #660]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf2:	6153      	str	r3, [r2, #20]

                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006bf4:	4ba4      	ldr	r3, [pc, #656]	; (8006e88 <OnRadioRxDone+0x8b8>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	705a      	strb	r2, [r3, #1]

                    AdrAckCounter = 0;
 8006bfa:	4ba4      	ldr	r3, [pc, #656]	; (8006e8c <OnRadioRxDone+0x8bc>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
                    MacCommandsBufferToRepeatIndex = 0;
 8006c00:	4ba3      	ldr	r3, [pc, #652]	; (8006e90 <OnRadioRxDone+0x8c0>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]

                    // Update 32 bits downlink counter
                    if( multicast == 1 )
 8006c06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d118      	bne.n	8006c40 <OnRadioRxDone+0x670>
                    {
                        McpsIndication.McpsIndication = MCPS_MULTICAST;
 8006c0e:	4b9d      	ldr	r3, [pc, #628]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c10:	2202      	movs	r2, #2
 8006c12:	701a      	strb	r2, [r3, #0]

                        if( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8006c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d10c      	bne.n	8006c38 <OnRadioRxDone+0x668>
                            ( curMulticastParams->DownLinkCounter != 0 ) )
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        if( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d008      	beq.n	8006c38 <OnRadioRxDone+0x668>
                        {
                            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8006c26:	4b97      	ldr	r3, [pc, #604]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c28:	2207      	movs	r2, #7
 8006c2a:	705a      	strb	r2, [r3, #1]
                            McpsIndication.DownLinkCounter = downLinkCounter;
 8006c2c:	4a95      	ldr	r2, [pc, #596]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	6153      	str	r3, [r2, #20]
                            PrepareRxDoneAbort( );
 8006c32:	f7ff fca3 	bl	800657c <PrepareRxDoneAbort>
                            return;
 8006c36:	e14a      	b.n	8006ece <OnRadioRxDone+0x8fe>
                        }
                        curMulticastParams->DownLinkCounter = downLinkCounter;
 8006c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c3e:	e034      	b.n	8006caa <OnRadioRxDone+0x6da>
                    }
                    else
                    {
                        if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8006c40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c44:	f023 031f 	bic.w	r3, r3, #31
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8006c4c:	d112      	bne.n	8006c74 <OnRadioRxDone+0x6a4>
                        {
                            SrvAckRequested = true;
 8006c4e:	4b91      	ldr	r3, [pc, #580]	; (8006e94 <OnRadioRxDone+0x8c4>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
                            McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8006c54:	4b8b      	ldr	r3, [pc, #556]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]

                            if( ( DownLinkCounter == downLinkCounter ) &&
 8006c5a:	4b8f      	ldr	r3, [pc, #572]	; (8006e98 <OnRadioRxDone+0x8c8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d11f      	bne.n	8006ca4 <OnRadioRxDone+0x6d4>
                                ( DownLinkCounter != 0 ) )
 8006c64:	4b8c      	ldr	r3, [pc, #560]	; (8006e98 <OnRadioRxDone+0x8c8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
                            if( ( DownLinkCounter == downLinkCounter ) &&
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01b      	beq.n	8006ca4 <OnRadioRxDone+0x6d4>
                                // Duplicated confirmed downlink. Skip indication.
                                // In this case, the MAC layer shall accept the MAC commands
                                // which are included in the downlink retransmission.
                                // It should not provide the same frame to the application
                                // layer again.
                                skipIndication = true;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006c72:	e017      	b.n	8006ca4 <OnRadioRxDone+0x6d4>
                            }
                        }
                        else
                        {
                            SrvAckRequested = false;
 8006c74:	4b87      	ldr	r3, [pc, #540]	; (8006e94 <OnRadioRxDone+0x8c4>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
                            McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8006c7a:	4b82      	ldr	r3, [pc, #520]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]

                            if( ( DownLinkCounter == downLinkCounter ) &&
 8006c80:	4b85      	ldr	r3, [pc, #532]	; (8006e98 <OnRadioRxDone+0x8c8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d10c      	bne.n	8006ca4 <OnRadioRxDone+0x6d4>
                                ( DownLinkCounter != 0 ) )
 8006c8a:	4b83      	ldr	r3, [pc, #524]	; (8006e98 <OnRadioRxDone+0x8c8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
                            if( ( DownLinkCounter == downLinkCounter ) &&
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d008      	beq.n	8006ca4 <OnRadioRxDone+0x6d4>
                            {
                                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8006c92:	4b7c      	ldr	r3, [pc, #496]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c94:	2207      	movs	r2, #7
 8006c96:	705a      	strb	r2, [r3, #1]
                                McpsIndication.DownLinkCounter = downLinkCounter;
 8006c98:	4a7a      	ldr	r2, [pc, #488]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c9c:	6153      	str	r3, [r2, #20]
                                PrepareRxDoneAbort( );
 8006c9e:	f7ff fc6d 	bl	800657c <PrepareRxDoneAbort>
                                return;
 8006ca2:	e114      	b.n	8006ece <OnRadioRxDone+0x8fe>
                            }
                        }
                        DownLinkCounter = downLinkCounter;
 8006ca4:	4a7c      	ldr	r2, [pc, #496]	; (8006e98 <OnRadioRxDone+0x8c8>)
 8006ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca8:	6013      	str	r3, [r2, #0]

                    // This must be done before parsing the payload and the MAC commands.
                    // We need to reset the MacCommandsBufferIndex here, since we need
                    // to take retransmissions and repititions into account. Error cases
                    // will be handled in function OnMacStateCheckTimerEvent.
                    if( McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8006caa:	4b77      	ldr	r3, [pc, #476]	; (8006e88 <OnRadioRxDone+0x8b8>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d109      	bne.n	8006cc6 <OnRadioRxDone+0x6f6>
                    {
                        if( fCtrl.Bits.Ack == 1 )
 8006cb2:	7f3b      	ldrb	r3, [r7, #28]
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <OnRadioRxDone+0x6fc>
                        {// Reset MacCommandsBufferIndex when we have received an ACK.
                            MacCommandsBufferIndex = 0;
 8006cbe:	4b77      	ldr	r3, [pc, #476]	; (8006e9c <OnRadioRxDone+0x8cc>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e002      	b.n	8006ccc <OnRadioRxDone+0x6fc>
                        }
                    }
                    else
                    {// Reset the variable if we have received any valid frame.
                        MacCommandsBufferIndex = 0;
 8006cc6:	4b75      	ldr	r3, [pc, #468]	; (8006e9c <OnRadioRxDone+0x8cc>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
                    }

                    // Process payload and MAC commands
                    if( ( ( size - 4 ) - appPayloadStartIndex ) > 0 )
 8006ccc:	897b      	ldrh	r3, [r7, #10]
 8006cce:	1f1a      	subs	r2, r3, #4
 8006cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd70      	ble.n	8006dbc <OnRadioRxDone+0x7ec>
                    {
                        port = payload[appPayloadStartIndex++];
 8006cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        frameLen = ( size - 4 ) - appPayloadStartIndex;
 8006cf0:	897b      	ldrh	r3, [r7, #10]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                        McpsIndication.Port = port;
 8006d02:	4a60      	ldr	r2, [pc, #384]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006d04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006d08:	70d3      	strb	r3, [r2, #3]
                        //MAC命令，要么使用Fport0来单独传输，要么使用�?的FPort来和数据一起传�?
                        if( port == 0 )
 8006d0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d122      	bne.n	8006d58 <OnRadioRxDone+0x788>
                        {
                            // Only allow frames which do not have fOpts
                            if( fCtrl.Bits.FOptsLen == 0 )
 8006d12:	7f3b      	ldrb	r3, [r7, #28]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d118      	bne.n	8006d50 <OnRadioRxDone+0x780>
                            {
                                LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8006d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	18d0      	adds	r0, r2, r3
 8006d26:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	4b5c      	ldr	r3, [pc, #368]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006d2e:	9302      	str	r3, [sp, #8]
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	2301      	movs	r3, #1
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3c:	f003 fd50 	bl	800a7e0 <LoRaMacPayloadDecrypt>
                                                       DOWN_LINK,
                                                       downLinkCounter,
                                                       LoRaMacRxPayload );

                                // Decode frame payload MAC commands
                                ProcessMacCommands( LoRaMacRxPayload, 0, frameLen, snr );
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006d46:	2100      	movs	r1, #0
 8006d48:	4855      	ldr	r0, [pc, #340]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006d4a:	f001 f9cb 	bl	80080e4 <ProcessMacCommands>
 8006d4e:	e042      	b.n	8006dd6 <OnRadioRxDone+0x806>
                            }
                            else
                            {
                                skipIndication = true;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006d56:	e03e      	b.n	8006dd6 <OnRadioRxDone+0x806>
                            }
                        }
                        else//这里就是要么使用�?的FPort来和数据一起传�?
                        {
                            if( fCtrl.Bits.FOptsLen > 0 )
 8006d58:	7f3b      	ldrb	r3, [r7, #28]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <OnRadioRxDone+0x7a6>
                            {
                                // Decode Options field MAC commands. Omit the fPort.
                                ProcessMacCommands( payload, 8, appPayloadStartIndex - 1, snr );
 8006d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2108      	movs	r1, #8
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f001 f9b7 	bl	80080e4 <ProcessMacCommands>
                            }

                            LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8006d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	18d0      	adds	r0, r2, r3
 8006d7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006d82:	b299      	uxth	r1, r3
 8006d84:	4b46      	ldr	r3, [pc, #280]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006d86:	9302      	str	r3, [sp, #8]
 8006d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d94:	f003 fd24 	bl	800a7e0 <LoRaMacPayloadDecrypt>
                                                   address,
                                                   DOWN_LINK,
                                                   downLinkCounter,
                                                   LoRaMacRxPayload );

                            if( skipIndication == false )
 8006d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d017      	beq.n	8006dd6 <OnRadioRxDone+0x806>
                            {
                                McpsIndication.Buffer = LoRaMacRxPayload;
 8006da6:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006da8:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006daa:	609a      	str	r2, [r3, #8]
                                McpsIndication.BufferSize = frameLen;
 8006dac:	4a35      	ldr	r2, [pc, #212]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006dae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006db2:	7313      	strb	r3, [r2, #12]
                                McpsIndication.RxData = true;
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	735a      	strb	r2, [r3, #13]
 8006dba:	e00c      	b.n	8006dd6 <OnRadioRxDone+0x806>
                            }
                        }
                    }
                    else
                    {
                        if( fCtrl.Bits.FOptsLen > 0 )
 8006dbc:	7f3b      	ldrb	r3, [r7, #28]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d006      	beq.n	8006dd6 <OnRadioRxDone+0x806>
                        {
                            // Decode Options field MAC commands MAC帧进来以后，通过层层筛选，最终到达这个函数来处理MAC命令
                            ProcessMacCommands( payload, 8, appPayloadStartIndex, snr );
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006dce:	2108      	movs	r1, #8
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f001 f987 	bl	80080e4 <ProcessMacCommands>
                        }
                    }

                    if( skipIndication == false )
 8006dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dda:	f083 0301 	eor.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01b      	beq.n	8006e1c <OnRadioRxDone+0x84c>
                    {
                        // Check if the frame is an acknowledgement
                        if( fCtrl.Bits.Ack == 1 )
 8006de4:	7f3b      	ldrb	r3, [r7, #28]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <OnRadioRxDone+0x834>
                        {
                            McpsConfirm.AckReceived = true;
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <OnRadioRxDone+0x8b8>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	711a      	strb	r2, [r3, #4]
                            McpsIndication.AckReceived = true;
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	749a      	strb	r2, [r3, #18]

                            // Stop the AckTimeout timer as no more retransmissions
                            // are needed.
                            TimerStop( &AckTimeoutTimer );
 8006dfc:	4829      	ldr	r0, [pc, #164]	; (8006ea4 <OnRadioRxDone+0x8d4>)
 8006dfe:	f00a f827 	bl	8010e50 <TimerStop>
 8006e02:	e00b      	b.n	8006e1c <OnRadioRxDone+0x84c>
                        }
                        else
                        {
                            McpsConfirm.AckReceived = false;
 8006e04:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <OnRadioRxDone+0x8b8>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	711a      	strb	r2, [r3, #4]

                            if( AckTimeoutRetriesCounter > AckTimeoutRetries )
 8006e0a:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <OnRadioRxDone+0x8d8>)
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	4b27      	ldr	r3, [pc, #156]	; (8006eac <OnRadioRxDone+0x8dc>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d902      	bls.n	8006e1c <OnRadioRxDone+0x84c>
                            {
                                // Stop the AckTimeout timer as no more retransmissions
                                // are needed.
                                TimerStop( &AckTimeoutTimer );
 8006e16:	4823      	ldr	r0, [pc, #140]	; (8006ea4 <OnRadioRxDone+0x8d4>)
 8006e18:	f00a f81a 	bl	8010e50 <TimerStop>
                            }
                        }
                    }
                    // Provide always an indication, skip the callback to the user application,
                    // in case of a confirmed downlink retransmission.
                    LoRaMacFlags.Bits.McpsInd = 1;
 8006e1c:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <OnRadioRxDone+0x8e0>)
 8006e1e:	7813      	ldrb	r3, [r2, #0]
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	7013      	strb	r3, [r2, #0]
                    LoRaMacFlags.Bits.McpsIndSkip = skipIndication;
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <OnRadioRxDone+0x8e0>)
 8006e28:	7813      	ldrb	r3, [r2, #0]
 8006e2a:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8006e2e:	f361 0382 	bfi	r3, r1, #2, #1
 8006e32:	7013      	strb	r3, [r2, #0]

                    PrepareRxDoneAbort( );
                    return;
                }
            }
            break;
 8006e34:	e044      	b.n	8006ec0 <OnRadioRxDone+0x8f0>
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006e38:	220b      	movs	r2, #11
 8006e3a:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 8006e3c:	f7ff fb9e 	bl	800657c <PrepareRxDoneAbort>
                    return;
 8006e40:	e045      	b.n	8006ece <OnRadioRxDone+0x8fe>
        case FRAME_TYPE_PROPRIETARY:
            {
                memcpy1( LoRaMacRxPayload, &payload[pktHeaderLen], size );
 8006e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	897a      	ldrh	r2, [r7, #10]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4814      	ldr	r0, [pc, #80]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006e50:	f00a fc69 	bl	8011726 <memcpy1>

                McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006e56:	2203      	movs	r2, #3
 8006e58:	701a      	strb	r2, [r3, #0]
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	705a      	strb	r2, [r3, #1]
                McpsIndication.Buffer = LoRaMacRxPayload;
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006e62:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <OnRadioRxDone+0x8d0>)
 8006e64:	609a      	str	r2, [r3, #8]
                McpsIndication.BufferSize = size - pktHeaderLen;
 8006e66:	897b      	ldrh	r3, [r7, #10]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <OnRadioRxDone+0x8b4>)
 8006e74:	731a      	strb	r2, [r3, #12]

                LoRaMacFlags.Bits.McpsInd = 1;
 8006e76:	4a0e      	ldr	r2, [pc, #56]	; (8006eb0 <OnRadioRxDone+0x8e0>)
 8006e78:	7813      	ldrb	r3, [r2, #0]
 8006e7a:	f043 0302 	orr.w	r3, r3, #2
 8006e7e:	7013      	strb	r3, [r2, #0]
                break;
 8006e80:	e01e      	b.n	8006ec0 <OnRadioRxDone+0x8f0>
 8006e82:	bf00      	nop
 8006e84:	20000500 	.word	0x20000500
 8006e88:	20000518 	.word	0x20000518
 8006e8c:	20000408 	.word	0x20000408
 8006e90:	20000410 	.word	0x20000410
 8006e94:	2000040d 	.word	0x2000040d
 8006e98:	20000400 	.word	0x20000400
 8006e9c:	2000040f 	.word	0x2000040f
 8006ea0:	200002fc 	.word	0x200002fc
 8006ea4:	200004e0 	.word	0x200004e0
 8006ea8:	200000c9 	.word	0x200000c9
 8006eac:	200000c8 	.word	0x200000c8
 8006eb0:	20000974 	.word	0x20000974
            }
        default:
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <OnRadioRxDone+0x904>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	705a      	strb	r2, [r3, #1]
            PrepareRxDoneAbort( );
 8006eba:	f7ff fb5f 	bl	800657c <PrepareRxDoneAbort>
            break;
 8006ebe:	bf00      	nop
    }
    LoRaMacFlags.Bits.MacDone = 1;
 8006ec0:	4a05      	ldr	r2, [pc, #20]	; (8006ed8 <OnRadioRxDone+0x908>)
 8006ec2:	7813      	ldrb	r3, [r2, #0]
 8006ec4:	f043 0310 	orr.w	r3, r3, #16
 8006ec8:	7013      	strb	r3, [r2, #0]

    // Trig OnMacCheckTimerEvent call as soon as possible
    OnMacStateCheckTimerEvent();
 8006eca:	f000 f8a9 	bl	8007020 <OnMacStateCheckTimerEvent>
//    TimerSetValue( &MacStateCheckTimer, 1 );
//    TimerStart( &MacStateCheckTimer );
}
 8006ece:	375c      	adds	r7, #92	; 0x5c
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd90      	pop	{r4, r7, pc}
 8006ed4:	20000500 	.word	0x20000500
 8006ed8:	20000974 	.word	0x20000974

08006edc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
    if( LoRaMacDeviceClass != CLASS_C )
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <OnRadioTxTimeout+0x34>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d003      	beq.n	8006ef0 <OnRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <OnRadioTxTimeout+0x38>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4798      	blx	r3
 8006eee:	e001      	b.n	8006ef4 <OnRadioTxTimeout+0x18>
    }
    else
    {
        OnRxWindow2TimerEvent( );
 8006ef0:	f000 fb54 	bl	800759c <OnRxWindow2TimerEvent>
    }

    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8006ef4:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <OnRadioTxTimeout+0x3c>)
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	705a      	strb	r2, [r3, #1]
    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <OnRadioTxTimeout+0x40>)
 8006efc:	2202      	movs	r2, #2
 8006efe:	705a      	strb	r2, [r3, #1]
    LoRaMacFlags.Bits.MacDone = 1;
 8006f00:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <OnRadioTxTimeout+0x44>)
 8006f02:	7813      	ldrb	r3, [r2, #0]
 8006f04:	f043 0310 	orr.w	r3, r3, #16
 8006f08:	7013      	strb	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200001f4 	.word	0x200001f4
 8006f14:	080127e4 	.word	0x080127e4
 8006f18:	20000518 	.word	0x20000518
 8006f1c:	2000052c 	.word	0x2000052c
 8006f20:	20000974 	.word	0x20000974

08006f24 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
    if( LoRaMacDeviceClass != CLASS_C )
 8006f28:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <OnRadioRxError+0x78>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d003      	beq.n	8006f38 <OnRadioRxError+0x14>
    {
        Radio.Sleep( );
 8006f30:	4b1b      	ldr	r3, [pc, #108]	; (8006fa0 <OnRadioRxError+0x7c>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	4798      	blx	r3
 8006f36:	e001      	b.n	8006f3c <OnRadioRxError+0x18>
    }
    else
    {
        OnRxWindow2TimerEvent( );
 8006f38:	f000 fb30 	bl	800759c <OnRxWindow2TimerEvent>
    }

    if( RxSlot == 0 )
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <OnRadioRxError+0x80>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d119      	bne.n	8006f78 <OnRadioRxError+0x54>
    {
        if( NodeAckRequested == true )
 8006f44:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <OnRadioRxError+0x84>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <OnRadioRxError+0x2e>
        {
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8006f4c:	4b17      	ldr	r3, [pc, #92]	; (8006fac <OnRadioRxError+0x88>)
 8006f4e:	2204      	movs	r2, #4
 8006f50:	705a      	strb	r2, [r3, #1]
        }
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <OnRadioRxError+0x8c>)
 8006f54:	2204      	movs	r2, #4
 8006f56:	705a      	strb	r2, [r3, #1]

        if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <OnRadioRxError+0x90>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f00a f853 	bl	8011008 <TimerGetElapsedTime>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <OnRadioRxError+0x94>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d314      	bcc.n	8006f96 <OnRadioRxError+0x72>
        {
            LoRaMacFlags.Bits.MacDone = 1;
 8006f6c:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <OnRadioRxError+0x98>)
 8006f6e:	7813      	ldrb	r3, [r2, #0]
 8006f70:	f043 0310 	orr.w	r3, r3, #16
 8006f74:	7013      	strb	r3, [r2, #0]
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
        }
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
        LoRaMacFlags.Bits.MacDone = 1;
    }
}
 8006f76:	e00e      	b.n	8006f96 <OnRadioRxError+0x72>
        if( NodeAckRequested == true )
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <OnRadioRxError+0x84>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <OnRadioRxError+0x62>
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <OnRadioRxError+0x88>)
 8006f82:	2205      	movs	r2, #5
 8006f84:	705a      	strb	r2, [r3, #1]
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <OnRadioRxError+0x8c>)
 8006f88:	2205      	movs	r2, #5
 8006f8a:	705a      	strb	r2, [r3, #1]
        LoRaMacFlags.Bits.MacDone = 1;
 8006f8c:	4a0b      	ldr	r2, [pc, #44]	; (8006fbc <OnRadioRxError+0x98>)
 8006f8e:	7813      	ldrb	r3, [r2, #0]
 8006f90:	f043 0310 	orr.w	r3, r3, #16
 8006f94:	7013      	strb	r3, [r2, #0]
}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200001f4 	.word	0x200001f4
 8006fa0:	080127e4 	.word	0x080127e4
 8006fa4:	20000538 	.word	0x20000538
 8006fa8:	2000040c 	.word	0x2000040c
 8006fac:	20000518 	.word	0x20000518
 8006fb0:	2000052c 	.word	0x2000052c
 8006fb4:	20000438 	.word	0x20000438
 8006fb8:	200004c4 	.word	0x200004c4
 8006fbc:	20000974 	.word	0x20000974

08006fc0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
    if( LoRaMacDeviceClass != CLASS_C )
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <OnRadioRxTimeout+0x44>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d003      	beq.n	8006fd4 <OnRadioRxTimeout+0x14>
    {
        Radio.Sleep( );
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <OnRadioRxTimeout+0x48>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4798      	blx	r3
 8006fd2:	e001      	b.n	8006fd8 <OnRadioRxTimeout+0x18>
    }
    else
    {
        OnRxWindow2TimerEvent( );
 8006fd4:	f000 fae2 	bl	800759c <OnRxWindow2TimerEvent>
    }

    if( RxSlot == 1 )
 8006fd8:	4b0c      	ldr	r3, [pc, #48]	; (800700c <OnRadioRxTimeout+0x4c>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10e      	bne.n	8006ffe <OnRadioRxTimeout+0x3e>
    {
        if( NodeAckRequested == true )
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <OnRadioRxTimeout+0x50>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <OnRadioRxTimeout+0x2e>
        {
            McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <OnRadioRxTimeout+0x54>)
 8006fea:	2203      	movs	r2, #3
 8006fec:	705a      	strb	r2, [r3, #1]
        }
        MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <OnRadioRxTimeout+0x58>)
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	705a      	strb	r2, [r3, #1]
        LoRaMacFlags.Bits.MacDone = 1;
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <OnRadioRxTimeout+0x5c>)
 8006ff6:	7813      	ldrb	r3, [r2, #0]
 8006ff8:	f043 0310 	orr.w	r3, r3, #16
 8006ffc:	7013      	strb	r3, [r2, #0]
    }
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200001f4 	.word	0x200001f4
 8007008:	080127e4 	.word	0x080127e4
 800700c:	20000538 	.word	0x20000538
 8007010:	2000040c 	.word	0x2000040c
 8007014:	20000518 	.word	0x20000518
 8007018:	2000052c 	.word	0x2000052c
 800701c:	20000974 	.word	0x20000974

08007020 <OnMacStateCheckTimerEvent>:

static void OnMacStateCheckTimerEvent( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
    TimerStop( &MacStateCheckTimer );
 8007026:	489e      	ldr	r0, [pc, #632]	; (80072a0 <OnMacStateCheckTimerEvent+0x280>)
 8007028:	f009 ff12 	bl	8010e50 <TimerStop>
    bool txTimeout = false;
 800702c:	2300      	movs	r3, #0
 800702e:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacFlags.Bits.MacDone == 1 )
 8007030:	4b9c      	ldr	r3, [pc, #624]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 81a3 	beq.w	8007386 <OnMacStateCheckTimerEvent+0x366>
    {
        if( ( LoRaMacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007040:	4b99      	ldr	r3, [pc, #612]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <OnMacStateCheckTimerEvent+0x44>
        {
            LoRaMacState &= ~LORAMAC_RX_ABORT;
 800704c:	4b96      	ldr	r3, [pc, #600]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007054:	4a94      	ldr	r2, [pc, #592]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007056:	6013      	str	r3, [r2, #0]
            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8007058:	4b93      	ldr	r3, [pc, #588]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	4a91      	ldr	r2, [pc, #580]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007062:	6013      	str	r3, [r2, #0]
        }

        if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
 8007064:	4b8f      	ldr	r3, [pc, #572]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <OnMacStateCheckTimerEvent+0x60>
 8007072:	4b8c      	ldr	r3, [pc, #560]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01c      	beq.n	80070ba <OnMacStateCheckTimerEvent+0x9a>
        {
            if( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8007080:	4b8a      	ldr	r3, [pc, #552]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d003      	beq.n	8007090 <OnMacStateCheckTimerEvent+0x70>
                ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 8007088:	4b89      	ldr	r3, [pc, #548]	; (80072b0 <OnMacStateCheckTimerEvent+0x290>)
 800708a:	785b      	ldrb	r3, [r3, #1]
            if( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800708c:	2b02      	cmp	r3, #2
 800708e:	d114      	bne.n	80070ba <OnMacStateCheckTimerEvent+0x9a>
            {
                // Stop transmit cycle due to tx timeout.
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8007090:	4b85      	ldr	r3, [pc, #532]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	4a83      	ldr	r2, [pc, #524]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 800709a:	6013      	str	r3, [r2, #0]
                MacCommandsBufferIndex = 0;
 800709c:	4b85      	ldr	r3, [pc, #532]	; (80072b4 <OnMacStateCheckTimerEvent+0x294>)
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 80070a2:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	4b81      	ldr	r3, [pc, #516]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 80070a8:	715a      	strb	r2, [r3, #5]
                McpsConfirm.AckReceived = false;
 80070aa:	4b80      	ldr	r3, [pc, #512]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	711a      	strb	r2, [r3, #4]
                McpsConfirm.TxTimeOnAir = 0;
 80070b0:	4b7e      	ldr	r3, [pc, #504]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
                txTimeout = true;
 80070b6:	2301      	movs	r3, #1
 80070b8:	71fb      	strb	r3, [r7, #7]
            }
        }

        if( ( NodeAckRequested == false ) && ( txTimeout == false ) )
 80070ba:	4b80      	ldr	r3, [pc, #512]	; (80072bc <OnMacStateCheckTimerEvent+0x29c>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f083 0301 	eor.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8083 	beq.w	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	f083 0301 	eor.w	r3, r3, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d07c      	beq.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
        {
            if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
 80070d6:	4b73      	ldr	r3, [pc, #460]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <OnMacStateCheckTimerEvent+0xd2>
 80070e4:	4b6f      	ldr	r3, [pc, #444]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d06e      	beq.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
            {
                if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 80070f2:	4b6c      	ldr	r3, [pc, #432]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02d      	beq.n	800715c <OnMacStateCheckTimerEvent+0x13c>
 8007100:	4b6b      	ldr	r3, [pc, #428]	; (80072b0 <OnMacStateCheckTimerEvent+0x290>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d129      	bne.n	800715c <OnMacStateCheckTimerEvent+0x13c>
                {// Procedure for the join request
                    MlmeConfirm.NbRetries = JoinRequestTrials;
 8007108:	4b6d      	ldr	r3, [pc, #436]	; (80072c0 <OnMacStateCheckTimerEvent+0x2a0>)
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	4b68      	ldr	r3, [pc, #416]	; (80072b0 <OnMacStateCheckTimerEvent+0x290>)
 800710e:	729a      	strb	r2, [r3, #10]

                    if( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007110:	4b67      	ldr	r3, [pc, #412]	; (80072b0 <OnMacStateCheckTimerEvent+0x290>)
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10c      	bne.n	8007132 <OnMacStateCheckTimerEvent+0x112>
                    {// Node joined successfully
                        UpLinkCounter = 0;
 8007118:	4b6a      	ldr	r3, [pc, #424]	; (80072c4 <OnMacStateCheckTimerEvent+0x2a4>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
                        ChannelsNbRepCounter = 0;
 800711e:	4b6a      	ldr	r3, [pc, #424]	; (80072c8 <OnMacStateCheckTimerEvent+0x2a8>)
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8007124:	4b60      	ldr	r3, [pc, #384]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	4a5e      	ldr	r2, [pc, #376]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 800712e:	6013      	str	r3, [r2, #0]
                    if( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007130:	e04e      	b.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
                    }
                    else
                    {
                        if( JoinRequestTrials >= MaxJoinRequestTrials )
 8007132:	4b63      	ldr	r3, [pc, #396]	; (80072c0 <OnMacStateCheckTimerEvent+0x2a0>)
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	4b65      	ldr	r3, [pc, #404]	; (80072cc <OnMacStateCheckTimerEvent+0x2ac>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d306      	bcc.n	800714c <OnMacStateCheckTimerEvent+0x12c>
                        {
                            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800713e:	4b5a      	ldr	r3, [pc, #360]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007148:	6013      	str	r3, [r2, #0]
                    if( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800714a:	e041      	b.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
                        }
                        else
                        {
                            LoRaMacFlags.Bits.MacDone = 0;
 800714c:	4a55      	ldr	r2, [pc, #340]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 800714e:	7813      	ldrb	r3, [r2, #0]
 8007150:	f36f 1304 	bfc	r3, #4, #1
 8007154:	7013      	strb	r3, [r2, #0]
                            // Sends the same frame again
                            OnTxDelayedTimerEvent( );
 8007156:	f000 f999 	bl	800748c <OnTxDelayedTimerEvent>
                    if( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800715a:	e039      	b.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
                        }
                    }
                }
                else
                {// Procedure for all other frames
                    if( ( ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep ) || ( LoRaMacFlags.Bits.McpsInd == 1 ) )
 800715c:	4b5c      	ldr	r3, [pc, #368]	; (80072d0 <OnMacStateCheckTimerEvent+0x2b0>)
 800715e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007162:	4b59      	ldr	r3, [pc, #356]	; (80072c8 <OnMacStateCheckTimerEvent+0x2a8>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d906      	bls.n	8007178 <OnMacStateCheckTimerEvent+0x158>
 800716a:	4b4e      	ldr	r3, [pc, #312]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d024      	beq.n	80071c2 <OnMacStateCheckTimerEvent+0x1a2>
                    {
                        if( LoRaMacFlags.Bits.McpsInd == 0 )
 8007178:	4b4a      	ldr	r3, [pc, #296]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d107      	bne.n	8007196 <OnMacStateCheckTimerEvent+0x176>
                        {   // Maximum repititions without downlink. Reset MacCommandsBufferIndex. Increase ADR Ack counter.
                            // Only process the case when the MAC did not receive a downlink.
                            MacCommandsBufferIndex = 0;
 8007186:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <OnMacStateCheckTimerEvent+0x294>)
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
                            AdrAckCounter++;
 800718c:	4b51      	ldr	r3, [pc, #324]	; (80072d4 <OnMacStateCheckTimerEvent+0x2b4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	4a50      	ldr	r2, [pc, #320]	; (80072d4 <OnMacStateCheckTimerEvent+0x2b4>)
 8007194:	6013      	str	r3, [r2, #0]
                        }

                        ChannelsNbRepCounter = 0;
 8007196:	4b4c      	ldr	r3, [pc, #304]	; (80072c8 <OnMacStateCheckTimerEvent+0x2a8>)
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]

                        if( IsUpLinkCounterFixed == false )
 800719c:	4b4e      	ldr	r3, [pc, #312]	; (80072d8 <OnMacStateCheckTimerEvent+0x2b8>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f083 0301 	eor.w	r3, r3, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <OnMacStateCheckTimerEvent+0x194>
                        {
                            UpLinkCounter++;
 80071aa:	4b46      	ldr	r3, [pc, #280]	; (80072c4 <OnMacStateCheckTimerEvent+0x2a4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	4a44      	ldr	r2, [pc, #272]	; (80072c4 <OnMacStateCheckTimerEvent+0x2a4>)
 80071b2:	6013      	str	r3, [r2, #0]
                        }

                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 80071b4:	4b3c      	ldr	r3, [pc, #240]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	4a3a      	ldr	r2, [pc, #232]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e006      	b.n	80071d0 <OnMacStateCheckTimerEvent+0x1b0>
                    }
                    else
                    {
                        LoRaMacFlags.Bits.MacDone = 0;
 80071c2:	4a38      	ldr	r2, [pc, #224]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 80071c4:	7813      	ldrb	r3, [r2, #0]
 80071c6:	f36f 1304 	bfc	r3, #4, #1
 80071ca:	7013      	strb	r3, [r2, #0]
                        // Sends the same frame again
                        OnTxDelayedTimerEvent( );
 80071cc:	f000 f95e 	bl	800748c <OnTxDelayedTimerEvent>
                    }
                }
            }
        }

        if( LoRaMacFlags.Bits.McpsInd == 1 )
 80071d0:	4b34      	ldr	r3, [pc, #208]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d025      	beq.n	800722a <OnMacStateCheckTimerEvent+0x20a>
        {// Procedure if we received a frame
            if( ( McpsConfirm.AckReceived == true ) || ( AckTimeoutRetriesCounter > AckTimeoutRetries ) )
 80071de:	4b33      	ldr	r3, [pc, #204]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 80071e0:	791b      	ldrb	r3, [r3, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <OnMacStateCheckTimerEvent+0x1d2>
 80071e6:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	4b3c      	ldr	r3, [pc, #240]	; (80072dc <OnMacStateCheckTimerEvent+0x2bc>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d91b      	bls.n	800722a <OnMacStateCheckTimerEvent+0x20a>
            {
                AckTimeoutRetry = false;
 80071f2:	4b3b      	ldr	r3, [pc, #236]	; (80072e0 <OnMacStateCheckTimerEvent+0x2c0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 80071f8:	4b30      	ldr	r3, [pc, #192]	; (80072bc <OnMacStateCheckTimerEvent+0x29c>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
                if( IsUpLinkCounterFixed == false )
 80071fe:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <OnMacStateCheckTimerEvent+0x2b8>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	f083 0301 	eor.w	r3, r3, #1
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <OnMacStateCheckTimerEvent+0x1f6>
                {
                    UpLinkCounter++;
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <OnMacStateCheckTimerEvent+0x2a4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <OnMacStateCheckTimerEvent+0x2a4>)
 8007214:	6013      	str	r3, [r2, #0]
                }
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8007216:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	4b24      	ldr	r3, [pc, #144]	; (80072ac <OnMacStateCheckTimerEvent+0x28c>)
 800721c:	715a      	strb	r2, [r3, #5]

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800721e:	4b22      	ldr	r3, [pc, #136]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	4a20      	ldr	r2, [pc, #128]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007228:	6013      	str	r3, [r2, #0]
            }
        }

        if( ( AckTimeoutRetry == true ) && ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == 0 ) )
 800722a:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <OnMacStateCheckTimerEvent+0x2c0>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80a9 	beq.w	8007386 <OnMacStateCheckTimerEvent+0x366>
 8007234:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <OnMacStateCheckTimerEvent+0x288>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 80a2 	bne.w	8007386 <OnMacStateCheckTimerEvent+0x366>
        {// Retransmissions procedure for confirmed uplinks
            AckTimeoutRetry = false;
 8007242:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <OnMacStateCheckTimerEvent+0x2c0>)
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
            if( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	4b23      	ldr	r3, [pc, #140]	; (80072dc <OnMacStateCheckTimerEvent+0x2bc>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d270      	bcs.n	8007336 <OnMacStateCheckTimerEvent+0x316>
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d86c      	bhi.n	8007336 <OnMacStateCheckTimerEvent+0x316>
            {
                AckTimeoutRetriesCounter++;
 800725c:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 8007266:	701a      	strb	r2, [r3, #0]

                if( ( AckTimeoutRetriesCounter % 2 ) == 1 )
 8007268:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <OnMacStateCheckTimerEvent+0x298>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <OnMacStateCheckTimerEvent+0x268>
                {
                    LoRaMacParams.ChannelsDatarate = MAX( LoRaMacParams.ChannelsDatarate - 1, LORAMAC_TX_MIN_DATARATE );
 8007276:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <OnMacStateCheckTimerEvent+0x2b0>)
 8007278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800727c:	3b01      	subs	r3, #1
 800727e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007282:	b25a      	sxtb	r2, r3
 8007284:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <OnMacStateCheckTimerEvent+0x2b0>)
 8007286:	705a      	strb	r2, [r3, #1]
                }
                // Try to send the frame again
                if( ScheduleTx( ) == LORAMAC_STATUS_OK )
 8007288:	f001 fab6 	bl	80087f8 <ScheduleTx>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d128      	bne.n	80072e4 <OnMacStateCheckTimerEvent+0x2c4>
                {
                    LoRaMacFlags.Bits.MacDone = 0;
 8007292:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <OnMacStateCheckTimerEvent+0x284>)
 8007294:	7813      	ldrb	r3, [r2, #0]
 8007296:	f36f 1304 	bfc	r3, #4, #1
 800729a:	7013      	strb	r3, [r2, #0]
                if( ScheduleTx( ) == LORAMAC_STATUS_OK )
 800729c:	e072      	b.n	8007384 <OnMacStateCheckTimerEvent+0x364>
 800729e:	bf00      	nop
 80072a0:	2000044c 	.word	0x2000044c
 80072a4:	20000974 	.word	0x20000974
 80072a8:	20000448 	.word	0x20000448
 80072ac:	20000518 	.word	0x20000518
 80072b0:	2000052c 	.word	0x2000052c
 80072b4:	2000040f 	.word	0x2000040f
 80072b8:	200000c9 	.word	0x200000c9
 80072bc:	2000040c 	.word	0x2000040c
 80072c0:	200004fc 	.word	0x200004fc
 80072c4:	200003fc 	.word	0x200003fc
 80072c8:	20000433 	.word	0x20000433
 80072cc:	200004fd 	.word	0x200004fd
 80072d0:	200009b0 	.word	0x200009b0
 80072d4:	20000408 	.word	0x20000408
 80072d8:	20000404 	.word	0x20000404
 80072dc:	200000c8 	.word	0x200000c8
 80072e0:	200004f4 	.word	0x200004f4
                }
                else
                {
                    // The DR is not applicable for the payload size
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80072e4:	4b5b      	ldr	r3, [pc, #364]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 80072e6:	2208      	movs	r2, #8
 80072e8:	705a      	strb	r2, [r3, #1]

                    MacCommandsBufferIndex = 0;
 80072ea:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <OnMacStateCheckTimerEvent+0x438>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 80072f0:	4b5a      	ldr	r3, [pc, #360]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	4a58      	ldr	r2, [pc, #352]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 80072fa:	6013      	str	r3, [r2, #0]
                    NodeAckRequested = false;
 80072fc:	4b58      	ldr	r3, [pc, #352]	; (8007460 <OnMacStateCheckTimerEvent+0x440>)
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]
                    McpsConfirm.AckReceived = false;
 8007302:	4b54      	ldr	r3, [pc, #336]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 8007304:	2200      	movs	r2, #0
 8007306:	711a      	strb	r2, [r3, #4]
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8007308:	4b56      	ldr	r3, [pc, #344]	; (8007464 <OnMacStateCheckTimerEvent+0x444>)
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	4b51      	ldr	r3, [pc, #324]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 800730e:	715a      	strb	r2, [r3, #5]
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8007310:	4b55      	ldr	r3, [pc, #340]	; (8007468 <OnMacStateCheckTimerEvent+0x448>)
 8007312:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	4b4e      	ldr	r3, [pc, #312]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 800731a:	709a      	strb	r2, [r3, #2]
                    if( IsUpLinkCounterFixed == false )
 800731c:	4b53      	ldr	r3, [pc, #332]	; (800746c <OnMacStateCheckTimerEvent+0x44c>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f083 0301 	eor.w	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02c      	beq.n	8007384 <OnMacStateCheckTimerEvent+0x364>
                    {
                        UpLinkCounter++;
 800732a:	4b51      	ldr	r3, [pc, #324]	; (8007470 <OnMacStateCheckTimerEvent+0x450>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	4a4f      	ldr	r2, [pc, #316]	; (8007470 <OnMacStateCheckTimerEvent+0x450>)
 8007332:	6013      	str	r3, [r2, #0]
                if( ScheduleTx( ) == LORAMAC_STATUS_OK )
 8007334:	e026      	b.n	8007384 <OnMacStateCheckTimerEvent+0x364>
            }
            else
            {
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
                // Re-enable default channels LC1, LC2, LC3
                LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );
 8007336:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <OnMacStateCheckTimerEvent+0x448>)
 8007338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800733a:	f043 0307 	orr.w	r3, r3, #7
 800733e:	b29a      	uxth	r2, r3
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <OnMacStateCheckTimerEvent+0x448>)
 8007342:	859a      	strh	r2, [r3, #44]	; 0x2c
                // Re-enable default channels
                ReenableChannels( LoRaMacParamsDefaults.ChannelsMask[4], LoRaMacParams.ChannelsMask );
#else
    #error "Please define a frequency band in the compiler options."
#endif
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8007344:	4b45      	ldr	r3, [pc, #276]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	4a43      	ldr	r2, [pc, #268]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 800734e:	6013      	str	r3, [r2, #0]

                MacCommandsBufferIndex = 0;
 8007350:	4b41      	ldr	r3, [pc, #260]	; (8007458 <OnMacStateCheckTimerEvent+0x438>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 8007356:	4b42      	ldr	r3, [pc, #264]	; (8007460 <OnMacStateCheckTimerEvent+0x440>)
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
                McpsConfirm.AckReceived = false;
 800735c:	4b3d      	ldr	r3, [pc, #244]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 800735e:	2200      	movs	r2, #0
 8007360:	711a      	strb	r2, [r3, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8007362:	4b40      	ldr	r3, [pc, #256]	; (8007464 <OnMacStateCheckTimerEvent+0x444>)
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	4b3b      	ldr	r3, [pc, #236]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 8007368:	715a      	strb	r2, [r3, #5]
                if( IsUpLinkCounterFixed == false )
 800736a:	4b40      	ldr	r3, [pc, #256]	; (800746c <OnMacStateCheckTimerEvent+0x44c>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f083 0301 	eor.w	r3, r3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d006      	beq.n	8007386 <OnMacStateCheckTimerEvent+0x366>
                {
                    UpLinkCounter++;
 8007378:	4b3d      	ldr	r3, [pc, #244]	; (8007470 <OnMacStateCheckTimerEvent+0x450>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3301      	adds	r3, #1
 800737e:	4a3c      	ldr	r2, [pc, #240]	; (8007470 <OnMacStateCheckTimerEvent+0x450>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e000      	b.n	8007386 <OnMacStateCheckTimerEvent+0x366>
                if( ScheduleTx( ) == LORAMAC_STATUS_OK )
 8007384:	bf00      	nop
                }
            }
        }
    }
    // Handle reception for Class B and Class C
    if( ( LoRaMacState & LORAMAC_RX ) == LORAMAC_RX )
 8007386:	4b35      	ldr	r3, [pc, #212]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <OnMacStateCheckTimerEvent+0x37e>
    {
        LoRaMacState &= ~LORAMAC_RX;
 8007392:	4b32      	ldr	r3, [pc, #200]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 0302 	bic.w	r3, r3, #2
 800739a:	4a30      	ldr	r2, [pc, #192]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 800739c:	6013      	str	r3, [r2, #0]
    }
    if( LoRaMacState == LORAMAC_IDLE )
 800739e:	4b2f      	ldr	r3, [pc, #188]	; (800745c <OnMacStateCheckTimerEvent+0x43c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d127      	bne.n	80073f6 <OnMacStateCheckTimerEvent+0x3d6>
    {
        if( LoRaMacFlags.Bits.McpsReq == 1 )
 80073a6:	4b33      	ldr	r3, [pc, #204]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <OnMacStateCheckTimerEvent+0x3a8>
        {
            LoRaMacPrimitives->MacMcpsConfirm( &McpsConfirm );
 80073b4:	4b30      	ldr	r3, [pc, #192]	; (8007478 <OnMacStateCheckTimerEvent+0x458>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4826      	ldr	r0, [pc, #152]	; (8007454 <OnMacStateCheckTimerEvent+0x434>)
 80073bc:	4798      	blx	r3
            LoRaMacFlags.Bits.McpsReq = 0;
 80073be:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 80073c0:	7813      	ldrb	r3, [r2, #0]
 80073c2:	f36f 0300 	bfc	r3, #0, #1
 80073c6:	7013      	strb	r3, [r2, #0]
        }

        if( LoRaMacFlags.Bits.MlmeReq == 1 )
 80073c8:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <OnMacStateCheckTimerEvent+0x3ca>
        {
            LoRaMacPrimitives->MacMlmeConfirm( &MlmeConfirm );
 80073d6:	4b28      	ldr	r3, [pc, #160]	; (8007478 <OnMacStateCheckTimerEvent+0x458>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	4827      	ldr	r0, [pc, #156]	; (800747c <OnMacStateCheckTimerEvent+0x45c>)
 80073de:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeReq = 0;
 80073e0:	4a24      	ldr	r2, [pc, #144]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	f36f 03c3 	bfc	r3, #3, #1
 80073e8:	7013      	strb	r3, [r2, #0]
        }

        // Procedure done. Reset variables.
        LoRaMacFlags.Bits.MacDone = 0;
 80073ea:	4a22      	ldr	r2, [pc, #136]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 80073ec:	7813      	ldrb	r3, [r2, #0]
 80073ee:	f36f 1304 	bfc	r3, #4, #1
 80073f2:	7013      	strb	r3, [r2, #0]
 80073f4:	e007      	b.n	8007406 <OnMacStateCheckTimerEvent+0x3e6>
    }
    else
    {
        // Operation not finished restart timer
        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80073f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80073fa:	4821      	ldr	r0, [pc, #132]	; (8007480 <OnMacStateCheckTimerEvent+0x460>)
 80073fc:	f009 fde4 	bl	8010fc8 <TimerSetValue>
        TimerStart( &MacStateCheckTimer );
 8007400:	481f      	ldr	r0, [pc, #124]	; (8007480 <OnMacStateCheckTimerEvent+0x460>)
 8007402:	f009 fbdd 	bl	8010bc0 <TimerStart>
    }

    if( LoRaMacFlags.Bits.McpsInd == 1 )
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01b      	beq.n	800744c <OnMacStateCheckTimerEvent+0x42c>
    {
        if( LoRaMacDeviceClass == CLASS_C )
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <OnMacStateCheckTimerEvent+0x464>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d101      	bne.n	8007420 <OnMacStateCheckTimerEvent+0x400>
        {// Activate RX2 window for Class C
            OnRxWindow2TimerEvent( );
 800741c:	f000 f8be 	bl	800759c <OnRxWindow2TimerEvent>
        }
        if( LoRaMacFlags.Bits.McpsIndSkip == 0 )
 8007420:	4b14      	ldr	r3, [pc, #80]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <OnMacStateCheckTimerEvent+0x418>
        {
            LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <OnMacStateCheckTimerEvent+0x458>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4814      	ldr	r0, [pc, #80]	; (8007488 <OnMacStateCheckTimerEvent+0x468>)
 8007436:	4798      	blx	r3
        }
        LoRaMacFlags.Bits.McpsIndSkip = 0;
 8007438:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 800743a:	7813      	ldrb	r3, [r2, #0]
 800743c:	f36f 0382 	bfc	r3, #2, #1
 8007440:	7013      	strb	r3, [r2, #0]
        LoRaMacFlags.Bits.McpsInd = 0;
 8007442:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <OnMacStateCheckTimerEvent+0x454>)
 8007444:	7813      	ldrb	r3, [r2, #0]
 8007446:	f36f 0341 	bfc	r3, #1, #1
 800744a:	7013      	strb	r3, [r2, #0]
    }
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000518 	.word	0x20000518
 8007458:	2000040f 	.word	0x2000040f
 800745c:	20000448 	.word	0x20000448
 8007460:	2000040c 	.word	0x2000040c
 8007464:	200000c9 	.word	0x200000c9
 8007468:	200009b0 	.word	0x200009b0
 800746c:	20000404 	.word	0x20000404
 8007470:	200003fc 	.word	0x200003fc
 8007474:	20000974 	.word	0x20000974
 8007478:	20000460 	.word	0x20000460
 800747c:	2000052c 	.word	0x2000052c
 8007480:	2000044c 	.word	0x2000044c
 8007484:	200001f4 	.word	0x200001f4
 8007488:	20000500 	.word	0x20000500

0800748c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    LoRaMacFrameCtrl_t fCtrl;

    TimerStop( &TxDelayedTimer );
 8007492:	481f      	ldr	r0, [pc, #124]	; (8007510 <OnTxDelayedTimerEvent+0x84>)
 8007494:	f009 fcdc 	bl	8010e50 <TimerStop>
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8007498:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <OnTxDelayedTimerEvent+0x88>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <OnTxDelayedTimerEvent+0x88>)
 80074a2:	6013      	str	r3, [r2, #0]

    if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) )
 80074a4:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <OnTxDelayedTimerEvent+0x8c>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d027      	beq.n	8007502 <OnTxDelayedTimerEvent+0x76>
 80074b2:	4b1a      	ldr	r3, [pc, #104]	; (800751c <OnTxDelayedTimerEvent+0x90>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d123      	bne.n	8007502 <OnTxDelayedTimerEvent+0x76>
    {
        ResetMacParameters( );
 80074ba:	f001 fb6d 	bl	8008b98 <ResetMacParameters>
        // Add a +1, since we start to count from 0
        LoRaMacParams.ChannelsDatarate = AlternateDatarate( JoinRequestTrials + 1 );
 80074be:	4b18      	ldr	r3, [pc, #96]	; (8007520 <OnTxDelayedTimerEvent+0x94>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3301      	adds	r3, #1
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 fb17 	bl	8008afc <AlternateDatarate>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4b14      	ldr	r3, [pc, #80]	; (8007524 <OnTxDelayedTimerEvent+0x98>)
 80074d4:	705a      	strb	r2, [r3, #1]

        macHdr.Value = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	713b      	strb	r3, [r7, #4]
        macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80074da:	793b      	ldrb	r3, [r7, #4]
 80074dc:	f36f 1347 	bfc	r3, #5, #3
 80074e0:	713b      	strb	r3, [r7, #4]

        fCtrl.Value = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	703b      	strb	r3, [r7, #0]
        fCtrl.Bits.Adr = AdrCtrlOn;
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <OnTxDelayedTimerEvent+0x9c>)
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	783b      	ldrb	r3, [r7, #0]
 80074ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80074f0:	703b      	strb	r3, [r7, #0]

        /* In case of join request retransmissions, the stack must prepare
         * the frame again, because the network server keeps track of the random
         * LoRaMacDevNonce values to prevent reply attacks. */
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 80074f2:	4639      	mov	r1, r7
 80074f4:	1d38      	adds	r0, r7, #4
 80074f6:	2300      	movs	r3, #0
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	2300      	movs	r3, #0
 80074fc:	2200      	movs	r2, #0
 80074fe:	f001 fbdb 	bl	8008cb8 <PrepareFrame>
    }

    ScheduleTx( );
 8007502:	f001 f979 	bl	80087f8 <ScheduleTx>
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000484 	.word	0x20000484
 8007514:	20000448 	.word	0x20000448
 8007518:	20000974 	.word	0x20000974
 800751c:	2000052c 	.word	0x2000052c
 8007520:	200004fc 	.word	0x200004fc
 8007524:	200009b0 	.word	0x200009b0
 8007528:	20000406 	.word	0x20000406

0800752c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void )
{
 800752c:	b590      	push	{r4, r7, lr}
 800752e:	b083      	sub	sp, #12
 8007530:	af02      	add	r7, sp, #8
    TimerStop( &RxWindowTimer1 );
 8007532:	4813      	ldr	r0, [pc, #76]	; (8007580 <OnRxWindow1TimerEvent+0x54>)
 8007534:	f009 fc8c 	bl	8010e50 <TimerStop>
    RxSlot = 0;
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <OnRxWindow1TimerEvent+0x58>)
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]

    if( LoRaMacDeviceClass == CLASS_C )
 800753e:	4b12      	ldr	r3, [pc, #72]	; (8007588 <OnRxWindow1TimerEvent+0x5c>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d102      	bne.n	800754c <OnRxWindow1TimerEvent+0x20>
    {
        Radio.Standby( );
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <OnRxWindow1TimerEvent+0x60>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	4798      	blx	r3
    }

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    RxWindowSetup( Channels[Channel].Frequency, RxWindowsParams[0].Datarate, RxWindowsParams[0].Bandwidth, RxWindowsParams[0].RxWindowTimeout, false );
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <OnRxWindow1TimerEvent+0x64>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	4b10      	ldr	r3, [pc, #64]	; (8007594 <OnRxWindow1TimerEvent+0x68>)
 8007554:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <OnRxWindow1TimerEvent+0x6c>)
 800755a:	f993 1000 	ldrsb.w	r1, [r3]
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <OnRxWindow1TimerEvent+0x6c>)
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	461c      	mov	r4, r3
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <OnRxWindow1TimerEvent+0x6c>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b29a      	uxth	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	4622      	mov	r2, r4
 8007572:	f000 fa03 	bl	800797c <RxWindowSetup>
#elif ( defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID ) )
    RxWindowSetup( LORAMAC_FIRST_RX1_CHANNEL + ( Channel % 8 ) * LORAMAC_STEPWIDTH_RX1_CHANNEL, RxWindowsParams[0].Datarate, RxWindowsParams[0].Bandwidth, RxWindowsParams[0].RxWindowTimeout, false );
#else
    #error "Please define a frequency band in the compiler options."
#endif
}
 8007576:	bf00      	nop
 8007578:	3704      	adds	r7, #4
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}
 800757e:	bf00      	nop
 8007580:	20000498 	.word	0x20000498
 8007584:	20000538 	.word	0x20000538
 8007588:	200001f4 	.word	0x200001f4
 800758c:	080127e4 	.word	0x080127e4
 8007590:	20000441 	.word	0x20000441
 8007594:	20000048 	.word	0x20000048
 8007598:	200004c8 	.word	0x200004c8

0800759c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void )
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b085      	sub	sp, #20
 80075a0:	af02      	add	r7, sp, #8
    bool rxContinuousMode = false;
 80075a2:	2300      	movs	r3, #0
 80075a4:	71fb      	strb	r3, [r7, #7]

    TimerStop( &RxWindowTimer2 );
 80075a6:	4812      	ldr	r0, [pc, #72]	; (80075f0 <OnRxWindow2TimerEvent+0x54>)
 80075a8:	f009 fc52 	bl	8010e50 <TimerStop>

    if( LoRaMacDeviceClass == CLASS_C )
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <OnRxWindow2TimerEvent+0x58>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d101      	bne.n	80075b8 <OnRxWindow2TimerEvent+0x1c>
    {
        rxContinuousMode = true;
 80075b4:	2301      	movs	r3, #1
 80075b6:	71fb      	strb	r3, [r7, #7]
    }
    if( RxWindowSetup( LoRaMacParams.Rx2Channel.Frequency, RxWindowsParams[1].Datarate, RxWindowsParams[1].Bandwidth, RxWindowsParams[1].RxWindowTimeout, rxContinuousMode ) == true )
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <OnRxWindow2TimerEvent+0x5c>)
 80075ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <OnRxWindow2TimerEvent+0x60>)
 80075be:	f993 100c 	ldrsb.w	r1, [r3, #12]
 80075c2:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <OnRxWindow2TimerEvent+0x60>)
 80075c4:	7b5b      	ldrb	r3, [r3, #13]
 80075c6:	461c      	mov	r4, r3
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <OnRxWindow2TimerEvent+0x60>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	4622      	mov	r2, r4
 80075d6:	f000 f9d1 	bl	800797c <RxWindowSetup>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <OnRxWindow2TimerEvent+0x4a>
    {
        RxSlot = 1;
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <OnRxWindow2TimerEvent+0x64>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
    }
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200004ac 	.word	0x200004ac
 80075f4:	200001f4 	.word	0x200001f4
 80075f8:	200009b0 	.word	0x200009b0
 80075fc:	200004c8 	.word	0x200004c8
 8007600:	20000538 	.word	0x20000538

08007604 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
    TimerStop( &AckTimeoutTimer );
 8007608:	480d      	ldr	r0, [pc, #52]	; (8007640 <OnAckTimeoutTimerEvent+0x3c>)
 800760a:	f009 fc21 	bl	8010e50 <TimerStop>

    if( NodeAckRequested == true )
 800760e:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <OnAckTimeoutTimerEvent+0x40>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <OnAckTimeoutTimerEvent+0x24>
    {
        AckTimeoutRetry = true;
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <OnAckTimeoutTimerEvent+0x44>)
 8007618:	2201      	movs	r2, #1
 800761a:	701a      	strb	r2, [r3, #0]
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <OnAckTimeoutTimerEvent+0x48>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f023 0304 	bic.w	r3, r3, #4
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <OnAckTimeoutTimerEvent+0x48>)
 8007626:	6013      	str	r3, [r2, #0]
    }
    if( LoRaMacDeviceClass == CLASS_C )
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <OnAckTimeoutTimerEvent+0x4c>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d104      	bne.n	800763a <OnAckTimeoutTimerEvent+0x36>
    {
        LoRaMacFlags.Bits.MacDone = 1;
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <OnAckTimeoutTimerEvent+0x50>)
 8007632:	7813      	ldrb	r3, [r2, #0]
 8007634:	f043 0310 	orr.w	r3, r3, #16
 8007638:	7013      	strb	r3, [r2, #0]
    }
}
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	200004e0 	.word	0x200004e0
 8007644:	2000040c 	.word	0x2000040c
 8007648:	200004f4 	.word	0x200004f4
 800764c:	20000448 	.word	0x20000448
 8007650:	200001f4 	.word	0x200001f4
 8007654:	20000974 	.word	0x20000974

08007658 <SetNextChannel>:

static bool SetNextChannel( TimerTime_t* time )
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b08b      	sub	sp, #44	; 0x2c
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
    uint8_t nbEnabledChannels = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t delayTx = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t enabledChannels[LORA_MAX_NB_CHANNELS];
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	623b      	str	r3, [r7, #32]

    memset1( enabledChannels, 0, LORA_MAX_NB_CHANNELS );
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	2210      	movs	r2, #16
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f00a f88c 	bl	8011798 <memset1>
        ( CountBits( LoRaMacParams.ChannelsMask[5], 16 ) == 0 ) )
    {
        memcpy1( ( uint8_t* )LoRaMacParams.ChannelsMask, ( uint8_t* )LoRaMacParamsDefaults.ChannelsMask, sizeof( LoRaMacParams.ChannelsMask ) );
    }
#else
    if( CountBits( LoRaMacParams.ChannelsMask[0], 16 ) == 0 )
 8007680:	4bb6      	ldr	r3, [pc, #728]	; (800795c <SetNextChannel+0x304>)
 8007682:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007684:	2110      	movs	r1, #16
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fa78 	bl	8007b7c <CountBits>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <SetNextChannel+0x48>
    {
        // Re-enable default channels, if no channel is enabled
        LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );
 8007692:	4bb2      	ldr	r3, [pc, #712]	; (800795c <SetNextChannel+0x304>)
 8007694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007696:	f043 0307 	orr.w	r3, r3, #7
 800769a:	b29a      	uxth	r2, r3
 800769c:	4baf      	ldr	r3, [pc, #700]	; (800795c <SetNextChannel+0x304>)
 800769e:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
#endif

    // Update Aggregated duty cycle
    if( AggregatedTimeOff <= TimerGetElapsedTime( AggregatedLastTxDoneTime ) )
 80076a0:	4baf      	ldr	r3, [pc, #700]	; (8007960 <SetNextChannel+0x308>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f009 fcaf 	bl	8011008 <TimerGetElapsedTime>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4bad      	ldr	r3, [pc, #692]	; (8007964 <SetNextChannel+0x30c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	f0c0 811a 	bcc.w	80078ea <SetNextChannel+0x292>
    {
        AggregatedTimeOff = 0;
 80076b6:	4bab      	ldr	r3, [pc, #684]	; (8007964 <SetNextChannel+0x30c>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        for( uint8_t i = 0; i < LORA_MAX_NB_BANDS; i++ )
 80076bc:	2300      	movs	r3, #0
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e080      	b.n	80077c4 <SetNextChannel+0x16c>
        {
            if( ( IsLoRaMacNetworkJoined == false ) || ( DutyCycleOn == true ) )
 80076c2:	4ba9      	ldr	r3, [pc, #676]	; (8007968 <SetNextChannel+0x310>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f083 0301 	eor.w	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <SetNextChannel+0x80>
 80076d0:	4ba6      	ldr	r3, [pc, #664]	; (800796c <SetNextChannel+0x314>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d061      	beq.n	800779c <SetNextChannel+0x144>
            {
                if( Bands[i].TimeOff <= TimerGetElapsedTime( Bands[i].LastTxDoneTime ) )
 80076d8:	7ffa      	ldrb	r2, [r7, #31]
 80076da:	49a5      	ldr	r1, [pc, #660]	; (8007970 <SetNextChannel+0x318>)
 80076dc:	4613      	mov	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	3308      	adds	r3, #8
 80076e8:	681c      	ldr	r4, [r3, #0]
 80076ea:	7ffa      	ldrb	r2, [r7, #31]
 80076ec:	49a0      	ldr	r1, [pc, #640]	; (8007970 <SetNextChannel+0x318>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3304      	adds	r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f009 fc83 	bl	8011008 <TimerGetElapsedTime>
 8007702:	4603      	mov	r3, r0
 8007704:	429c      	cmp	r4, r3
 8007706:	d809      	bhi.n	800771c <SetNextChannel+0xc4>
                {
                    Bands[i].TimeOff = 0;
 8007708:	7ffa      	ldrb	r2, [r7, #31]
 800770a:	4999      	ldr	r1, [pc, #612]	; (8007970 <SetNextChannel+0x318>)
 800770c:	4613      	mov	r3, r2
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3308      	adds	r3, #8
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
                }
                if( Bands[i].TimeOff != 0 )
 800771c:	7ffa      	ldrb	r2, [r7, #31]
 800771e:	4994      	ldr	r1, [pc, #592]	; (8007970 <SetNextChannel+0x318>)
 8007720:	4613      	mov	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	3308      	adds	r3, #8
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d045      	beq.n	80077be <SetNextChannel+0x166>
                {
                    nextTxDelay = MIN( Bands[i].TimeOff - TimerGetElapsedTime( Bands[i].LastTxDoneTime ), nextTxDelay );
 8007732:	7ffa      	ldrb	r2, [r7, #31]
 8007734:	498e      	ldr	r1, [pc, #568]	; (8007970 <SetNextChannel+0x318>)
 8007736:	4613      	mov	r3, r2
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	3308      	adds	r3, #8
 8007742:	681c      	ldr	r4, [r3, #0]
 8007744:	7ffa      	ldrb	r2, [r7, #31]
 8007746:	498a      	ldr	r1, [pc, #552]	; (8007970 <SetNextChannel+0x318>)
 8007748:	4613      	mov	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	3304      	adds	r3, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f009 fc56 	bl	8011008 <TimerGetElapsedTime>
 800775c:	4603      	mov	r3, r0
 800775e:	1ae3      	subs	r3, r4, r3
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	429a      	cmp	r2, r3
 8007764:	d917      	bls.n	8007796 <SetNextChannel+0x13e>
 8007766:	7ffa      	ldrb	r2, [r7, #31]
 8007768:	4981      	ldr	r1, [pc, #516]	; (8007970 <SetNextChannel+0x318>)
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3308      	adds	r3, #8
 8007776:	681c      	ldr	r4, [r3, #0]
 8007778:	7ffa      	ldrb	r2, [r7, #31]
 800777a:	497d      	ldr	r1, [pc, #500]	; (8007970 <SetNextChannel+0x318>)
 800777c:	4613      	mov	r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	3304      	adds	r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f009 fc3c 	bl	8011008 <TimerGetElapsedTime>
 8007790:	4603      	mov	r3, r0
 8007792:	1ae3      	subs	r3, r4, r3
 8007794:	e000      	b.n	8007798 <SetNextChannel+0x140>
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	623b      	str	r3, [r7, #32]
                if( Bands[i].TimeOff != 0 )
 800779a:	e010      	b.n	80077be <SetNextChannel+0x166>
                }
            }
            else
            {
                if( DutyCycleOn == false )
 800779c:	4b73      	ldr	r3, [pc, #460]	; (800796c <SetNextChannel+0x314>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f083 0301 	eor.w	r3, r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <SetNextChannel+0x166>
                {
                    Bands[i].TimeOff = 0;
 80077aa:	7ffa      	ldrb	r2, [r7, #31]
 80077ac:	4970      	ldr	r1, [pc, #448]	; (8007970 <SetNextChannel+0x318>)
 80077ae:	4613      	mov	r3, r2
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	3308      	adds	r3, #8
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
        for( uint8_t i = 0; i < LORA_MAX_NB_BANDS; i++ )
 80077be:	7ffb      	ldrb	r3, [r7, #31]
 80077c0:	3301      	adds	r3, #1
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	7ffb      	ldrb	r3, [r7, #31]
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	f67f af7b 	bls.w	80076c2 <SetNextChannel+0x6a>
                }
            }
        }

        // Search how many channels are enabled
        for( uint8_t i = 0, k = 0; i < LORA_MAX_NB_CHANNELS; i += 16, k++ )
 80077cc:	2300      	movs	r3, #0
 80077ce:	77bb      	strb	r3, [r7, #30]
 80077d0:	2300      	movs	r3, #0
 80077d2:	777b      	strb	r3, [r7, #29]
 80077d4:	e084      	b.n	80078e0 <SetNextChannel+0x288>
        {
            for( uint8_t j = 0; j < 16; j++ )
 80077d6:	2300      	movs	r3, #0
 80077d8:	773b      	strb	r3, [r7, #28]
 80077da:	e078      	b.n	80078ce <SetNextChannel+0x276>
            {
#if defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
                if( ( ChannelsMaskRemaining[k] & ( 1 << j ) ) != 0 )
#else
                if( ( LoRaMacParams.ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80077dc:	7f7b      	ldrb	r3, [r7, #29]
 80077de:	4a5f      	ldr	r2, [pc, #380]	; (800795c <SetNextChannel+0x304>)
 80077e0:	3314      	adds	r3, #20
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	889b      	ldrh	r3, [r3, #4]
 80077e8:	461a      	mov	r2, r3
 80077ea:	7f3b      	ldrb	r3, [r7, #28]
 80077ec:	fa42 f303 	asr.w	r3, r2, r3
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d067      	beq.n	80078c8 <SetNextChannel+0x270>
#endif
                {
                    if( Channels[i + j].Frequency == 0 )
 80077f8:	7fba      	ldrb	r2, [r7, #30]
 80077fa:	7f3b      	ldrb	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	4a5d      	ldr	r2, [pc, #372]	; (8007974 <SetNextChannel+0x31c>)
 8007800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05a      	beq.n	80078be <SetNextChannel+0x266>
                    { // Check if the channel is enabled
                        continue;
                    }
#if defined( USE_BAND_868 ) || defined( USE_BAND_433 ) || defined( USE_BAND_780 )
                    if( IsLoRaMacNetworkJoined == false )
 8007808:	4b57      	ldr	r3, [pc, #348]	; (8007968 <SetNextChannel+0x310>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f083 0301 	eor.w	r3, r3, #1
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d007      	beq.n	8007826 <SetNextChannel+0x1ce>
                    {
                        if( ( JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8007816:	7f3b      	ldrb	r3, [r7, #28]
 8007818:	2207      	movs	r2, #7
 800781a:	fa42 f303 	asr.w	r3, r2, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d04d      	beq.n	80078c2 <SetNextChannel+0x26a>
                        {
                            continue;
                        }
                    }
#endif
                    if( ( ( Channels[i + j].DrRange.Fields.Min <= LoRaMacParams.ChannelsDatarate ) &&
 8007826:	7fba      	ldrb	r2, [r7, #30]
 8007828:	7f3b      	ldrb	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	4a51      	ldr	r2, [pc, #324]	; (8007974 <SetNextChannel+0x31c>)
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	791b      	ldrb	r3, [r3, #4]
 8007834:	f343 0303 	sbfx	r3, r3, #0, #4
 8007838:	b25b      	sxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	4b47      	ldr	r3, [pc, #284]	; (800795c <SetNextChannel+0x304>)
 800783e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007842:	429a      	cmp	r2, r3
 8007844:	dc10      	bgt.n	8007868 <SetNextChannel+0x210>
                          ( LoRaMacParams.ChannelsDatarate <= Channels[i + j].DrRange.Fields.Max ) ) == false )
 8007846:	4b45      	ldr	r3, [pc, #276]	; (800795c <SetNextChannel+0x304>)
 8007848:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800784c:	7fb9      	ldrb	r1, [r7, #30]
 800784e:	7f3b      	ldrb	r3, [r7, #28]
 8007850:	440b      	add	r3, r1
 8007852:	4948      	ldr	r1, [pc, #288]	; (8007974 <SetNextChannel+0x31c>)
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	440b      	add	r3, r1
 8007858:	791b      	ldrb	r3, [r3, #4]
 800785a:	f343 1303 	sbfx	r3, r3, #4, #4
 800785e:	b25b      	sxtb	r3, r3
                    if( ( ( Channels[i + j].DrRange.Fields.Min <= LoRaMacParams.ChannelsDatarate ) &&
 8007860:	429a      	cmp	r2, r3
 8007862:	dc01      	bgt.n	8007868 <SetNextChannel+0x210>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <SetNextChannel+0x212>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d02b      	beq.n	80078c6 <SetNextChannel+0x26e>
                    { // Check if the current channel selection supports the given datarate
                        continue;
                    }
                    if( Bands[Channels[i + j].Band].TimeOff > 0 )
 800786e:	7fba      	ldrb	r2, [r7, #30]
 8007870:	7f3b      	ldrb	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	4a3f      	ldr	r2, [pc, #252]	; (8007974 <SetNextChannel+0x31c>)
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4413      	add	r3, r2
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	4619      	mov	r1, r3
 800787e:	4a3c      	ldr	r2, [pc, #240]	; (8007970 <SetNextChannel+0x318>)
 8007880:	460b      	mov	r3, r1
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	440b      	add	r3, r1
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	3308      	adds	r3, #8
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <SetNextChannel+0x246>
                    { // Check if the band is available for transmission
                        delayTx++;
 8007892:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007896:	3301      	adds	r3, #1
 8007898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                        continue;
 800789c:	e014      	b.n	80078c8 <SetNextChannel+0x270>
                    }
                    enabledChannels[nbEnabledChannels++] = i + j;
 800789e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80078a8:	4619      	mov	r1, r3
 80078aa:	7fba      	ldrb	r2, [r7, #30]
 80078ac:	7f3b      	ldrb	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078b6:	440b      	add	r3, r1
 80078b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80078bc:	e004      	b.n	80078c8 <SetNextChannel+0x270>
                        continue;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <SetNextChannel+0x270>
                            continue;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <SetNextChannel+0x270>
                        continue;
 80078c6:	bf00      	nop
            for( uint8_t j = 0; j < 16; j++ )
 80078c8:	7f3b      	ldrb	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	773b      	strb	r3, [r7, #28]
 80078ce:	7f3b      	ldrb	r3, [r7, #28]
 80078d0:	2b0f      	cmp	r3, #15
 80078d2:	d983      	bls.n	80077dc <SetNextChannel+0x184>
        for( uint8_t i = 0, k = 0; i < LORA_MAX_NB_CHANNELS; i += 16, k++ )
 80078d4:	7fbb      	ldrb	r3, [r7, #30]
 80078d6:	3310      	adds	r3, #16
 80078d8:	77bb      	strb	r3, [r7, #30]
 80078da:	7f7b      	ldrb	r3, [r7, #29]
 80078dc:	3301      	adds	r3, #1
 80078de:	777b      	strb	r3, [r7, #29]
 80078e0:	7fbb      	ldrb	r3, [r7, #30]
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	f67f af77 	bls.w	80077d6 <SetNextChannel+0x17e>
 80078e8:	e00e      	b.n	8007908 <SetNextChannel+0x2b0>
            }
        }
    }
    else
    {
        delayTx++;
 80078ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078ee:	3301      	adds	r3, #1
 80078f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        nextTxDelay = AggregatedTimeOff - TimerGetElapsedTime( AggregatedLastTxDoneTime );
 80078f4:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <SetNextChannel+0x30c>)
 80078f6:	681c      	ldr	r4, [r3, #0]
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <SetNextChannel+0x308>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f009 fb83 	bl	8011008 <TimerGetElapsedTime>
 8007902:	4603      	mov	r3, r0
 8007904:	1ae3      	subs	r3, r4, r3
 8007906:	623b      	str	r3, [r7, #32]
    }

    if( nbEnabledChannels > 0 )
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <SetNextChannel+0x2e0>
    {
        Channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8007910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007914:	3b01      	subs	r3, #1
 8007916:	4619      	mov	r1, r3
 8007918:	2000      	movs	r0, #0
 800791a:	f009 feed 	bl	80116f8 <randr>
 800791e:	4603      	mov	r3, r0
 8007920:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007924:	4413      	add	r3, r2
 8007926:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <SetNextChannel+0x320>)
 800792c:	701a      	strb	r2, [r3, #0]
        if( Channel < ( LORA_MAX_NB_CHANNELS - 8 ) )
        {
            DisableChannelInMask( Channel, ChannelsMaskRemaining );
        }
#endif
        *time = 0;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
        return true;
 8007934:	2301      	movs	r3, #1
 8007936:	e00c      	b.n	8007952 <SetNextChannel+0x2fa>
    }
    else
    {
        if( delayTx > 0 )
 8007938:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <SetNextChannel+0x2f2>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	601a      	str	r2, [r3, #0]
            return true;
 8007946:	2301      	movs	r3, #1
 8007948:	e003      	b.n	8007952 <SetNextChannel+0x2fa>
        }
        // Datarate not supported by any channel
        *time = 0;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
        return false;
 8007950:	2300      	movs	r3, #0
    }
}
 8007952:	4618      	mov	r0, r3
 8007954:	372c      	adds	r7, #44	; 0x2c
 8007956:	46bd      	mov	sp, r7
 8007958:	bd90      	pop	{r4, r7, pc}
 800795a:	bf00      	nop
 800795c:	200009b0 	.word	0x200009b0
 8007960:	20000438 	.word	0x20000438
 8007964:	2000043c 	.word	0x2000043c
 8007968:	20000405 	.word	0x20000405
 800796c:	20000440 	.word	0x20000440
 8007970:	2000000c 	.word	0x2000000c
 8007974:	20000048 	.word	0x20000048
 8007978:	20000441 	.word	0x20000441

0800797c <RxWindowSetup>:

static bool RxWindowSetup( uint32_t freq, int8_t datarate, uint32_t bandwidth, uint16_t timeout, bool rxContinuous )
{
 800797c:	b590      	push	{r4, r7, lr}
 800797e:	b091      	sub	sp, #68	; 0x44
 8007980:	af0a      	add	r7, sp, #40	; 0x28
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	461a      	mov	r2, r3
 8007988:	460b      	mov	r3, r1
 800798a:	72fb      	strb	r3, [r7, #11]
 800798c:	4613      	mov	r3, r2
 800798e:	813b      	strh	r3, [r7, #8]
    uint8_t downlinkDatarate = Datarates[datarate];
 8007990:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007994:	4a4a      	ldr	r2, [pc, #296]	; (8007ac0 <RxWindowSetup+0x144>)
 8007996:	5cd3      	ldrb	r3, [r2, r3]
 8007998:	75bb      	strb	r3, [r7, #22]
    RadioModems_t modem;

    if( Radio.GetStatus( ) == RF_IDLE )
 800799a:	4b4a      	ldr	r3, [pc, #296]	; (8007ac4 <RxWindowSetup+0x148>)
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 8087 	bne.w	8007ab6 <RxWindowSetup+0x13a>
    {
        Radio.SetChannel( freq );
 80079a8:	4b46      	ldr	r3, [pc, #280]	; (8007ac4 <RxWindowSetup+0x148>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3

        // Store downlink datarate
        McpsIndication.RxDatarate = ( uint8_t ) datarate;
 80079b0:	7afa      	ldrb	r2, [r7, #11]
 80079b2:	4b45      	ldr	r3, [pc, #276]	; (8007ac8 <RxWindowSetup+0x14c>)
 80079b4:	711a      	strb	r2, [r3, #4]

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
        if( datarate == DR_7 )
 80079b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d12e      	bne.n	8007a1c <RxWindowSetup+0xa0>
        {
            modem = MODEM_FSK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
            Radio.SetRxConfig( modem, 50e3, downlinkDatarate * 1e3, 0, 83.333e3, 5, timeout, false, 0, true, 0, 0, false, rxContinuous );
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <RxWindowSetup+0x148>)
 80079c4:	699c      	ldr	r4, [r3, #24]
 80079c6:	7dbb      	ldrb	r3, [r7, #22]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7f8 fd33 	bl	8000434 <__aeabi_i2d>
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	4b3e      	ldr	r3, [pc, #248]	; (8007acc <RxWindowSetup+0x150>)
 80079d4:	f7f8 fd98 	bl	8000508 <__aeabi_dmul>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4610      	mov	r0, r2
 80079de:	4619      	mov	r1, r3
 80079e0:	f7f9 f854 	bl	8000a8c <__aeabi_d2uiz>
 80079e4:	4602      	mov	r2, r0
 80079e6:	7df8      	ldrb	r0, [r7, #23]
 80079e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	2300      	movs	r3, #0
 80079f0:	9308      	str	r3, [sp, #32]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9306      	str	r3, [sp, #24]
 80079fa:	2301      	movs	r3, #1
 80079fc:	9305      	str	r3, [sp, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	893b      	ldrh	r3, [r7, #8]
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	2305      	movs	r3, #5
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <RxWindowSetup+0x154>)
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	2300      	movs	r3, #0
 8007a14:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007a18:	47a0      	blx	r4
 8007a1a:	e01d      	b.n	8007a58 <RxWindowSetup+0xdc>
        }
        else
        {
            modem = MODEM_LORA;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
            Radio.SetRxConfig( modem, bandwidth, downlinkDatarate, 1, 0, 8, timeout, false, 0, false, 0, 0, true, rxContinuous );
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <RxWindowSetup+0x148>)
 8007a22:	699c      	ldr	r4, [r3, #24]
 8007a24:	7dba      	ldrb	r2, [r7, #22]
 8007a26:	7df8      	ldrb	r0, [r7, #23]
 8007a28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	2301      	movs	r3, #1
 8007a30:	9308      	str	r3, [sp, #32]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9307      	str	r3, [sp, #28]
 8007a36:	2300      	movs	r3, #0
 8007a38:	9306      	str	r3, [sp, #24]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9303      	str	r3, [sp, #12]
 8007a46:	893b      	ldrh	r3, [r7, #8]
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2301      	movs	r3, #1
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	47a0      	blx	r4
#elif defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL ) || defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, bandwidth, downlinkDatarate, 1, 0, 8, timeout, false, 0, false, 0, 0, true, rxContinuous );
#endif

        if( RepeaterSupport == true )
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <RxWindowSetup+0x158>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <RxWindowSetup+0xfc>
        {
            Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateRepeater[datarate] + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <RxWindowSetup+0x148>)
 8007a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a64:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007a68:	491b      	ldr	r1, [pc, #108]	; (8007ad8 <RxWindowSetup+0x15c>)
 8007a6a:	5c8a      	ldrb	r2, [r1, r2]
 8007a6c:	320d      	adds	r2, #13
 8007a6e:	b2d1      	uxtb	r1, r2
 8007a70:	7dfa      	ldrb	r2, [r7, #23]
 8007a72:	4610      	mov	r0, r2
 8007a74:	4798      	blx	r3
 8007a76:	e00a      	b.n	8007a8e <RxWindowSetup+0x112>
        }
        else
        {
            Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarate[datarate] + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <RxWindowSetup+0x148>)
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007a80:	4916      	ldr	r1, [pc, #88]	; (8007adc <RxWindowSetup+0x160>)
 8007a82:	5c8a      	ldrb	r2, [r1, r2]
 8007a84:	320d      	adds	r2, #13
 8007a86:	b2d1      	uxtb	r1, r2
 8007a88:	7dfa      	ldrb	r2, [r7, #23]
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
        }

        if( rxContinuous == false )
 8007a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a92:	f083 0301 	eor.w	r3, r3, #1
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d006      	beq.n	8007aaa <RxWindowSetup+0x12e>
        {
            Radio.Rx( LoRaMacParams.MaxRxWindow );
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <RxWindowSetup+0x148>)
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <RxWindowSetup+0x164>)
 8007aa2:	68d2      	ldr	r2, [r2, #12]
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	e003      	b.n	8007ab2 <RxWindowSetup+0x136>
        }
        else
        {
            Radio.Rx( 0 ); // Continuous mode
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <RxWindowSetup+0x148>)
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	2000      	movs	r0, #0
 8007ab0:	4798      	blx	r3
        }
        return true;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <RxWindowSetup+0x13c>
    }
    return false;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}
 8007ac0:	0801248c 	.word	0x0801248c
 8007ac4:	080127e4 	.word	0x080127e4
 8007ac8:	20000500 	.word	0x20000500
 8007acc:	408f4000 	.word	0x408f4000
 8007ad0:	00014585 	.word	0x00014585
 8007ad4:	200001f6 	.word	0x200001f6
 8007ad8:	080124bc 	.word	0x080124bc
 8007adc:	080124b4 	.word	0x080124b4
 8007ae0:	200009b0 	.word	0x200009b0

08007ae4 <Rx2FreqInRange>:

static bool Rx2FreqInRange( uint32_t freq )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    if( Radio.CheckRfFrequency( freq ) == true )
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <Rx2FreqInRange+0x24>)
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <Rx2FreqInRange+0x1a>
        ( freq >= LORAMAC_FIRST_RX1_CHANNEL ) &&
        ( freq <= LORAMAC_LAST_RX1_CHANNEL ) &&
        ( ( ( freq - ( uint32_t ) LORAMAC_FIRST_RX1_CHANNEL ) % ( uint32_t ) LORAMAC_STEPWIDTH_RX1_CHANNEL ) == 0 ) )
#endif
    {
        return true;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <Rx2FreqInRange+0x1c>
    }
    return false;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	080127e4 	.word	0x080127e4

08007b0c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
 8007b16:	460b      	mov	r3, r1
 8007b18:	71bb      	strb	r3, [r7, #6]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	81bb      	strh	r3, [r7, #12]

    // Get the maximum payload length
    if( RepeaterSupport == true )
 8007b26:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <ValidatePayloadLength+0x64>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <ValidatePayloadLength+0x2e>
    {
        maxN = MaxPayloadOfDatarateRepeater[datarate];
 8007b2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007b32:	4a10      	ldr	r2, [pc, #64]	; (8007b74 <ValidatePayloadLength+0x68>)
 8007b34:	5cd3      	ldrb	r3, [r2, r3]
 8007b36:	81fb      	strh	r3, [r7, #14]
 8007b38:	e004      	b.n	8007b44 <ValidatePayloadLength+0x38>
    }
    else
    {
        maxN = MaxPayloadOfDatarate[datarate];
 8007b3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <ValidatePayloadLength+0x6c>)
 8007b40:	5cd3      	ldrb	r3, [r2, r3]
 8007b42:	81fb      	strh	r3, [r7, #14]
    }

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	797b      	ldrb	r3, [r7, #5]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007b50:	89ba      	ldrh	r2, [r7, #12]
 8007b52:	89fb      	ldrh	r3, [r7, #14]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d804      	bhi.n	8007b62 <ValidatePayloadLength+0x56>
 8007b58:	89bb      	ldrh	r3, [r7, #12]
 8007b5a:	2bff      	cmp	r3, #255	; 0xff
 8007b5c:	d801      	bhi.n	8007b62 <ValidatePayloadLength+0x56>
    {
        return true;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <ValidatePayloadLength+0x58>
    }
    return false;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	200001f6 	.word	0x200001f6
 8007b74:	080124bc 	.word	0x080124bc
 8007b78:	080124b4 	.word	0x080124b4

08007b7c <CountBits>:

static uint8_t CountBits( uint16_t mask, uint8_t nbBits )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	460a      	mov	r2, r1
 8007b86:	80fb      	strh	r3, [r7, #6]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8007b90:	2300      	movs	r3, #0
 8007b92:	73bb      	strb	r3, [r7, #14]
 8007b94:	e011      	b.n	8007bba <CountBits+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8007b96:	88fa      	ldrh	r2, [r7, #6]
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba0:	401a      	ands	r2, r3
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d102      	bne.n	8007bb4 <CountBits+0x38>
        {
            nbActiveBits++;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	73bb      	strb	r3, [r7, #14]
 8007bba:	7bba      	ldrb	r2, [r7, #14]
 8007bbc:	797b      	ldrb	r3, [r7, #5]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3e9      	bcc.n	8007b96 <CountBits+0x1a>
        }
    }
    return nbActiveBits;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr
	...

08007bd0 <ValidateDatarate>:
}
#endif
#endif

static bool ValidateDatarate( int8_t datarate, uint16_t* channelsMask )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	71fb      	strb	r3, [r7, #7]
    if( ValueInRange( datarate, LORAMAC_TX_MIN_DATARATE, LORAMAC_TX_MAX_DATARATE ) == false )
 8007bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be0:	2207      	movs	r2, #7
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f86c 	bl	8007cc2 <ValueInRange>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <ValidateDatarate+0x2a>
    {
        return false;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e044      	b.n	8007c84 <ValidateDatarate+0xb4>
    }
    for( uint8_t i = 0, k = 0; i < LORA_MAX_NB_CHANNELS; i += 16, k++ )
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73bb      	strb	r3, [r7, #14]
 8007c02:	e03b      	b.n	8007c7c <ValidateDatarate+0xac>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8007c04:	2300      	movs	r3, #0
 8007c06:	737b      	strb	r3, [r7, #13]
 8007c08:	e02f      	b.n	8007c6a <ValidateDatarate+0x9a>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	7b7b      	ldrb	r3, [r7, #13]
 8007c18:	fa42 f303 	asr.w	r3, r2, r3
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01f      	beq.n	8007c64 <ValidateDatarate+0x94>
            {// Check datarate validity for enabled channels
                if( ValueInRange( datarate, Channels[i + j].DrRange.Fields.Min, Channels[i + j].DrRange.Fields.Max ) == true )
 8007c24:	7bfa      	ldrb	r2, [r7, #15]
 8007c26:	7b7b      	ldrb	r3, [r7, #13]
 8007c28:	4413      	add	r3, r2
 8007c2a:	4a18      	ldr	r2, [pc, #96]	; (8007c8c <ValidateDatarate+0xbc>)
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	4413      	add	r3, r2
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	f343 0303 	sbfx	r3, r3, #0, #4
 8007c36:	b25b      	sxtb	r3, r3
 8007c38:	4619      	mov	r1, r3
 8007c3a:	7bfa      	ldrb	r2, [r7, #15]
 8007c3c:	7b7b      	ldrb	r3, [r7, #13]
 8007c3e:	4413      	add	r3, r2
 8007c40:	4a12      	ldr	r2, [pc, #72]	; (8007c8c <ValidateDatarate+0xbc>)
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	791b      	ldrb	r3, [r3, #4]
 8007c48:	f343 1303 	sbfx	r3, r3, #4, #4
 8007c4c:	b25b      	sxtb	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f834 	bl	8007cc2 <ValueInRange>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <ValidateDatarate+0x94>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e00f      	b.n	8007c84 <ValidateDatarate+0xb4>
        for( uint8_t j = 0; j < 16; j++ )
 8007c64:	7b7b      	ldrb	r3, [r7, #13]
 8007c66:	3301      	adds	r3, #1
 8007c68:	737b      	strb	r3, [r7, #13]
 8007c6a:	7b7b      	ldrb	r3, [r7, #13]
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d9cc      	bls.n	8007c0a <ValidateDatarate+0x3a>
    for( uint8_t i = 0, k = 0; i < LORA_MAX_NB_CHANNELS; i += 16, k++ )
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	3310      	adds	r3, #16
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	73bb      	strb	r3, [r7, #14]
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	d9c0      	bls.n	8007c04 <ValidateDatarate+0x34>
                }
            }
        }
    }
    return false;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000048 	.word	0x20000048

08007c90 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	460a      	mov	r2, r1
 8007c9a:	71fb      	strb	r3, [r7, #7]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71bb      	strb	r3, [r7, #6]
    int8_t resultTxPower = txPower;
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    resultTxPower =  MAX( txPower, maxBandTxPower );
 8007ca4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8007ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bfb8      	it	lt
 8007cb0:	4613      	movlt	r3, r2
 8007cb2:	73fb      	strb	r3, [r7, #15]
        {// Limit tx power to max 21dBm
            resultTxPower = MAX( txPower, TX_POWER_20_DBM );
        }
    }
#endif
    return resultTxPower;
 8007cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <ValueInRange>:

static bool ValueInRange( int8_t value, int8_t min, int8_t max )
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	4603      	mov	r3, r0
 8007cca:	71fb      	strb	r3, [r7, #7]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	71bb      	strb	r3, [r7, #6]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8007cd4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007cd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	db07      	blt.n	8007cf0 <ValueInRange+0x2e>
 8007ce0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007ce4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	dc01      	bgt.n	8007cf0 <ValueInRange+0x2e>
    {
        return true;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <ValueInRange+0x30>
    }
    return false;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <DisableChannelInMask>:

static bool DisableChannelInMask( uint8_t id, uint16_t* mask )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
    uint8_t index = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
    index = id / 16;
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	73fb      	strb	r3, [r7, #15]

    if( ( index > 4 ) || ( id >= LORA_MAX_NB_CHANNELS ) )
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d802      	bhi.n	8007d1e <DisableChannelInMask+0x22>
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d901      	bls.n	8007d22 <DisableChannelInMask+0x26>
    {
        return false;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e017      	b.n	8007d52 <DisableChannelInMask+0x56>
    }

    // Deactivate channel
    mask[index] &= ~( 1 << ( id % 16 ) );
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b21a      	sxth	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	2101      	movs	r1, #1
 8007d36:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	b21b      	sxth	r3, r3
 8007d40:	4013      	ands	r3, r2
 8007d42:	b219      	sxth	r1, r3
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	b28a      	uxth	r2, r1
 8007d4e:	801a      	strh	r2, [r3, #0]

    return true;
 8007d50:	2301      	movs	r3, #1
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <AdrNextDr>:
//一旦ADR
static bool AdrNextDr( bool adrEnabled, bool updateChannelMask, int8_t* datarateOut )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	603a      	str	r2, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	71bb      	strb	r3, [r7, #6]
    bool adrAckReq = false;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
    int8_t datarate = LoRaMacParams.ChannelsDatarate;
 8007d70:	4b23      	ldr	r3, [pc, #140]	; (8007e00 <AdrNextDr+0xa4>)
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	73bb      	strb	r3, [r7, #14]

    if( adrEnabled == true )
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d037      	beq.n	8007dec <AdrNextDr+0x90>
    {
        if( datarate == LORAMAC_TX_MIN_DATARATE )
 8007d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <AdrNextDr+0x34>
        {
            AdrAckCounter = 0;
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <AdrNextDr+0xa8>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e02d      	b.n	8007dec <AdrNextDr+0x90>
        }
        else
        {
            if( AdrAckCounter >= ADR_ACK_LIMIT )
 8007d90:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <AdrNextDr+0xa8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b3f      	cmp	r3, #63	; 0x3f
 8007d96:	d905      	bls.n	8007da4 <AdrNextDr+0x48>
            {
                adrAckReq = true;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
                LoRaMacParams.ChannelsTxPower = LORAMAC_MAX_TX_POWER;
 8007d9c:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <AdrNextDr+0xa4>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	e001      	b.n	8007da8 <AdrNextDr+0x4c>
            }
            else
            {
                adrAckReq = false;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
            }
            if( AdrAckCounter >= ( ADR_ACK_LIMIT + ADR_ACK_DELAY ) )
 8007da8:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <AdrNextDr+0xa8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b5f      	cmp	r3, #95	; 0x5f
 8007dae:	d91d      	bls.n	8007dec <AdrNextDr+0x90>
            {
                if( ( AdrAckCounter % ADR_ACK_DELAY ) == 1 )
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <AdrNextDr+0xa8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d117      	bne.n	8007dec <AdrNextDr+0x90>
                {
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
                    if( datarate > LORAMAC_TX_MIN_DATARATE )
 8007dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dd05      	ble.n	8007dd0 <AdrNextDr+0x74>
                    {
                        datarate--;
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	73bb      	strb	r3, [r7, #14]
                    }
                    if( datarate == LORAMAC_TX_MIN_DATARATE )
 8007dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <AdrNextDr+0x90>
                    {
                        if( updateChannelMask == true )
 8007dd8:	79bb      	ldrb	r3, [r7, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d006      	beq.n	8007dec <AdrNextDr+0x90>
                        {
                            // Re-enable default channels LC1, LC2, LC3
                            LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <AdrNextDr+0xa4>)
 8007de0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007de2:	f043 0307 	orr.w	r3, r3, #7
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <AdrNextDr+0xa4>)
 8007dea:	859a      	strh	r2, [r3, #44]	; 0x2c
                }
            }
        }
    }

    *datarateOut = datarate;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	7bba      	ldrb	r2, [r7, #14]
 8007df0:	701a      	strb	r2, [r3, #0]

    return adrAckReq;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	200009b0 	.word	0x200009b0
 8007e04:	20000408 	.word	0x20000408

08007e08 <AddMacCommand>:

static LoRaMacStatus_t AddMacCommand( uint8_t cmd, uint8_t p1, uint8_t p2 )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
 8007e12:	460b      	mov	r3, r1
 8007e14:	71bb      	strb	r3, [r7, #6]
 8007e16:	4613      	mov	r3, r2
 8007e18:	717b      	strb	r3, [r7, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_BUSY;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
    // The maximum buffer length must take MAC commands to re-send into account.
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8007e1e:	4b78      	ldr	r3, [pc, #480]	; (8008000 <AddMacCommand+0x1f8>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f1c3 030f 	rsb	r3, r3, #15
 8007e26:	73bb      	strb	r3, [r7, #14]

    switch( cmd )
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	3b02      	subs	r3, #2
 8007e2c:	2b06      	cmp	r3, #6
 8007e2e:	f200 80cc 	bhi.w	8007fca <AddMacCommand+0x1c2>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <AddMacCommand+0x30>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e7b 	.word	0x08007e7b
 8007e40:	08007eb9 	.word	0x08007eb9
 8007e44:	08007edf 	.word	0x08007edf
 8007e48:	08007f1b 	.word	0x08007f1b
 8007e4c:	08007f6b 	.word	0x08007f6b
 8007e50:	08007fa7 	.word	0x08007fa7
    {
        case MOTE_MAC_LINK_CHECK_REQ:
            if( MacCommandsBufferIndex < bufLen )
 8007e54:	4b6b      	ldr	r3, [pc, #428]	; (8008004 <AddMacCommand+0x1fc>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	7bba      	ldrb	r2, [r7, #14]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	f240 80b7 	bls.w	8007fce <AddMacCommand+0x1c6>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007e60:	4b68      	ldr	r3, [pc, #416]	; (8008004 <AddMacCommand+0x1fc>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	b2d1      	uxtb	r1, r2
 8007e68:	4a66      	ldr	r2, [pc, #408]	; (8008004 <AddMacCommand+0x1fc>)
 8007e6a:	7011      	strb	r1, [r2, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4a66      	ldr	r2, [pc, #408]	; (8008008 <AddMacCommand+0x200>)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	5453      	strb	r3, [r2, r1]
                // No payload for this command
                status = LORAMAC_STATUS_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007e78:	e0a9      	b.n	8007fce <AddMacCommand+0x1c6>
        case MOTE_MAC_LINK_ADR_ANS:
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8007e7a:	4b62      	ldr	r3, [pc, #392]	; (8008004 <AddMacCommand+0x1fc>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	f280 80a4 	bge.w	8007fd2 <AddMacCommand+0x1ca>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007e8a:	4b5e      	ldr	r3, [pc, #376]	; (8008004 <AddMacCommand+0x1fc>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	b2d1      	uxtb	r1, r2
 8007e92:	4a5c      	ldr	r2, [pc, #368]	; (8008004 <AddMacCommand+0x1fc>)
 8007e94:	7011      	strb	r1, [r2, #0]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4a5b      	ldr	r2, [pc, #364]	; (8008008 <AddMacCommand+0x200>)
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	5453      	strb	r3, [r2, r1]
                // Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8007e9e:	4b59      	ldr	r3, [pc, #356]	; (8008004 <AddMacCommand+0x1fc>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	b2d1      	uxtb	r1, r2
 8007ea6:	4a57      	ldr	r2, [pc, #348]	; (8008004 <AddMacCommand+0x1fc>)
 8007ea8:	7011      	strb	r1, [r2, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4a56      	ldr	r2, [pc, #344]	; (8008008 <AddMacCommand+0x200>)
 8007eae:	79bb      	ldrb	r3, [r7, #6]
 8007eb0:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007eb6:	e08c      	b.n	8007fd2 <AddMacCommand+0x1ca>
        case MOTE_MAC_DUTY_CYCLE_ANS:
            if( MacCommandsBufferIndex < bufLen )
 8007eb8:	4b52      	ldr	r3, [pc, #328]	; (8008004 <AddMacCommand+0x1fc>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	7bba      	ldrb	r2, [r7, #14]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	f240 8089 	bls.w	8007fd6 <AddMacCommand+0x1ce>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <AddMacCommand+0x1fc>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	b2d1      	uxtb	r1, r2
 8007ecc:	4a4d      	ldr	r2, [pc, #308]	; (8008004 <AddMacCommand+0x1fc>)
 8007ece:	7011      	strb	r1, [r2, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4a4d      	ldr	r2, [pc, #308]	; (8008008 <AddMacCommand+0x200>)
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007edc:	e07b      	b.n	8007fd6 <AddMacCommand+0x1ce>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8007ede:	4b49      	ldr	r3, [pc, #292]	; (8008004 <AddMacCommand+0x1fc>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	da76      	bge.n	8007fda <AddMacCommand+0x1d2>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007eec:	4b45      	ldr	r3, [pc, #276]	; (8008004 <AddMacCommand+0x1fc>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	b2d1      	uxtb	r1, r2
 8007ef4:	4a43      	ldr	r2, [pc, #268]	; (8008004 <AddMacCommand+0x1fc>)
 8007ef6:	7011      	strb	r1, [r2, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4a43      	ldr	r2, [pc, #268]	; (8008008 <AddMacCommand+0x200>)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	5453      	strb	r3, [r2, r1]
                // Status: Datarate ACK, Channel ACK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8007f00:	4b40      	ldr	r3, [pc, #256]	; (8008004 <AddMacCommand+0x1fc>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	b2d1      	uxtb	r1, r2
 8007f08:	4a3e      	ldr	r2, [pc, #248]	; (8008004 <AddMacCommand+0x1fc>)
 8007f0a:	7011      	strb	r1, [r2, #0]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4a3e      	ldr	r2, [pc, #248]	; (8008008 <AddMacCommand+0x200>)
 8007f10:	79bb      	ldrb	r3, [r7, #6]
 8007f12:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007f18:	e05f      	b.n	8007fda <AddMacCommand+0x1d2>
        case MOTE_MAC_DEV_STATUS_ANS:
            if( MacCommandsBufferIndex < ( bufLen - 2 ) )
 8007f1a:	4b3a      	ldr	r3, [pc, #232]	; (8008004 <AddMacCommand+0x1fc>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	3b02      	subs	r3, #2
 8007f24:	429a      	cmp	r2, r3
 8007f26:	da5a      	bge.n	8007fde <AddMacCommand+0x1d6>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007f28:	4b36      	ldr	r3, [pc, #216]	; (8008004 <AddMacCommand+0x1fc>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	b2d1      	uxtb	r1, r2
 8007f30:	4a34      	ldr	r2, [pc, #208]	; (8008004 <AddMacCommand+0x1fc>)
 8007f32:	7011      	strb	r1, [r2, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	4a34      	ldr	r2, [pc, #208]	; (8008008 <AddMacCommand+0x200>)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	5453      	strb	r3, [r2, r1]
                // 1st byte Battery
                // 2nd byte Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8007f3c:	4b31      	ldr	r3, [pc, #196]	; (8008004 <AddMacCommand+0x1fc>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	b2d1      	uxtb	r1, r2
 8007f44:	4a2f      	ldr	r2, [pc, #188]	; (8008004 <AddMacCommand+0x1fc>)
 8007f46:	7011      	strb	r1, [r2, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <AddMacCommand+0x200>)
 8007f4c:	79bb      	ldrb	r3, [r7, #6]
 8007f4e:	5453      	strb	r3, [r2, r1]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 8007f50:	4b2c      	ldr	r3, [pc, #176]	; (8008004 <AddMacCommand+0x1fc>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	b2d1      	uxtb	r1, r2
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <AddMacCommand+0x1fc>)
 8007f5a:	7011      	strb	r1, [r2, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	; (8008008 <AddMacCommand+0x200>)
 8007f60:	797b      	ldrb	r3, [r7, #5]
 8007f62:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007f68:	e039      	b.n	8007fde <AddMacCommand+0x1d6>
        case MOTE_MAC_NEW_CHANNEL_ANS:
            if( MacCommandsBufferIndex < ( bufLen - 1 ) )
 8007f6a:	4b26      	ldr	r3, [pc, #152]	; (8008004 <AddMacCommand+0x1fc>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	429a      	cmp	r2, r3
 8007f76:	da34      	bge.n	8007fe2 <AddMacCommand+0x1da>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007f78:	4b22      	ldr	r3, [pc, #136]	; (8008004 <AddMacCommand+0x1fc>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	b2d1      	uxtb	r1, r2
 8007f80:	4a20      	ldr	r2, [pc, #128]	; (8008004 <AddMacCommand+0x1fc>)
 8007f82:	7011      	strb	r1, [r2, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	4a20      	ldr	r2, [pc, #128]	; (8008008 <AddMacCommand+0x200>)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <AddMacCommand+0x1fc>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	b2d1      	uxtb	r1, r2
 8007f94:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <AddMacCommand+0x1fc>)
 8007f96:	7011      	strb	r1, [r2, #0]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	; (8008008 <AddMacCommand+0x200>)
 8007f9c:	79bb      	ldrb	r3, [r7, #6]
 8007f9e:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007fa4:	e01d      	b.n	8007fe2 <AddMacCommand+0x1da>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            if( MacCommandsBufferIndex < bufLen )
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <AddMacCommand+0x1fc>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	7bba      	ldrb	r2, [r7, #14]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d91a      	bls.n	8007fe6 <AddMacCommand+0x1de>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8007fb0:	4b14      	ldr	r3, [pc, #80]	; (8008004 <AddMacCommand+0x1fc>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	b2d1      	uxtb	r1, r2
 8007fb8:	4a12      	ldr	r2, [pc, #72]	; (8008004 <AddMacCommand+0x1fc>)
 8007fba:	7011      	strb	r1, [r2, #0]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4a12      	ldr	r2, [pc, #72]	; (8008008 <AddMacCommand+0x200>)
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8007fc8:	e00d      	b.n	8007fe6 <AddMacCommand+0x1de>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e013      	b.n	8007ff6 <AddMacCommand+0x1ee>
            break;
 8007fce:	bf00      	nop
 8007fd0:	e00a      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fd2:	bf00      	nop
 8007fd4:	e008      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fd6:	bf00      	nop
 8007fd8:	e006      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fda:	bf00      	nop
 8007fdc:	e004      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <AddMacCommand+0x1e0>
            break;
 8007fe6:	bf00      	nop
    }
    if( status == LORAMAC_STATUS_OK )
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <AddMacCommand+0x1ec>
    {
        MacCommandsInNextTx = true;
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <AddMacCommand+0x204>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr
 8008000:	20000410 	.word	0x20000410
 8008004:	2000040f 	.word	0x2000040f
 8008008:	20000414 	.word	0x20000414
 800800c:	2000040e 	.word	0x2000040e

08008010 <ParseMacCommandsToRepeat>:

static uint8_t ParseMacCommandsToRepeat( uint8_t* cmdBufIn, uint8_t length, uint8_t* cmdBufOut )
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	460b      	mov	r3, r1
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]
    uint8_t cmdCount = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	75bb      	strb	r3, [r7, #22]

    if( ( cmdBufIn == NULL ) || ( cmdBufOut == NULL ) )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <ParseMacCommandsToRepeat+0x22>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <ParseMacCommandsToRepeat+0x26>
    {
        return 0;
 8008032:	2300      	movs	r3, #0
 8008034:	e051      	b.n	80080da <ParseMacCommandsToRepeat+0xca>
    }

    for( i = 0; i < length; i++ )
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
 800803a:	e049      	b.n	80080d0 <ParseMacCommandsToRepeat+0xc0>
    {
        switch( cmdBufIn[i] )
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	3b02      	subs	r3, #2
 8008046:	2b06      	cmp	r3, #6
 8008048:	d83e      	bhi.n	80080c8 <ParseMacCommandsToRepeat+0xb8>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <ParseMacCommandsToRepeat+0x40>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080c9 	.word	0x080080c9
 8008054:	080080c1 	.word	0x080080c1
 8008058:	080080c9 	.word	0x080080c9
 800805c:	0800806d 	.word	0x0800806d
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080c1 	.word	0x080080c1
 8008068:	080080a1 	.word	0x080080a1
        {
            // STICKY
            case MOTE_MAC_RX_PARAM_SETUP_ANS:
            {
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	75fa      	strb	r2, [r7, #23]
 8008072:	461a      	mov	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	441a      	add	r2, r3
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	75b9      	strb	r1, [r7, #22]
 800807e:	4619      	mov	r1, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	440b      	add	r3, r1
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	701a      	strb	r2, [r3, #0]
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	441a      	add	r2, r3
 800808e:	7dbb      	ldrb	r3, [r7, #22]
 8008090:	1c59      	adds	r1, r3, #1
 8008092:	75b9      	strb	r1, [r7, #22]
 8008094:	4619      	mov	r1, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	440b      	add	r3, r1
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	701a      	strb	r2, [r3, #0]
                break;
 800809e:	e014      	b.n	80080ca <ParseMacCommandsToRepeat+0xba>
            }
            case MOTE_MAC_RX_TIMING_SETUP_ANS:
            {
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	441a      	add	r2, r3
 80080a6:	7dbb      	ldrb	r3, [r7, #22]
 80080a8:	1c59      	adds	r1, r3, #1
 80080aa:	75b9      	strb	r1, [r7, #22]
 80080ac:	4619      	mov	r1, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	440b      	add	r3, r1
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	701a      	strb	r2, [r3, #0]
                break;
 80080b6:	e008      	b.n	80080ca <ParseMacCommandsToRepeat+0xba>
            }
            // NON-STICKY
            case MOTE_MAC_DEV_STATUS_ANS:
            { // 2 bytes payload
                i += 2;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	3302      	adds	r3, #2
 80080bc:	75fb      	strb	r3, [r7, #23]
                break;
 80080be:	e004      	b.n	80080ca <ParseMacCommandsToRepeat+0xba>
            }
            case MOTE_MAC_LINK_ADR_ANS:
            case MOTE_MAC_NEW_CHANNEL_ANS:
            { // 1 byte payload
                i++;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	3301      	adds	r3, #1
 80080c4:	75fb      	strb	r3, [r7, #23]
                break;
 80080c6:	e000      	b.n	80080ca <ParseMacCommandsToRepeat+0xba>
            case MOTE_MAC_LINK_CHECK_REQ:
            { // 0 byte payload
                break;
            }
            default:
                break;
 80080c8:	bf00      	nop
    for( i = 0; i < length; i++ )
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	3301      	adds	r3, #1
 80080ce:	75fb      	strb	r3, [r7, #23]
 80080d0:	7dfa      	ldrb	r2, [r7, #23]
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3b1      	bcc.n	800803c <ParseMacCommandsToRepeat+0x2c>
        }
    }

    return cmdCount;
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr )
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b08d      	sub	sp, #52	; 0x34
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	70fb      	strb	r3, [r7, #3]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70bb      	strb	r3, [r7, #2]
 80080fa:	4613      	mov	r3, r2
 80080fc:	707b      	strb	r3, [r7, #1]
    while( macIndex < commandsSize )
 80080fe:	e31a      	b.n	8008736 <ProcessMacCommands+0x652>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	70fa      	strb	r2, [r7, #3]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	3b02      	subs	r3, #2
 8008110:	2b06      	cmp	r3, #6
 8008112:	f200 8316 	bhi.w	8008742 <ProcessMacCommands+0x65e>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <ProcessMacCommands+0x38>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008139 	.word	0x08008139
 8008120:	08008165 	.word	0x08008165
 8008124:	080083c3 	.word	0x080083c3
 8008128:	0800840d 	.word	0x0800840d
 800812c:	08008537 	.word	0x08008537
 8008130:	0800856d 	.word	0x0800856d
 8008134:	080086b7 	.word	0x080086b7
        {
            case SRV_MAC_LINK_CHECK_ANS:
                MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008138:	4bad      	ldr	r3, [pc, #692]	; (80083f0 <ProcessMacCommands+0x30c>)
 800813a:	2200      	movs	r2, #0
 800813c:	705a      	strb	r2, [r3, #1]
                MlmeConfirm.DemodMargin = payload[macIndex++];
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	70fa      	strb	r2, [r7, #3]
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4413      	add	r3, r2
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	4ba8      	ldr	r3, [pc, #672]	; (80083f0 <ProcessMacCommands+0x30c>)
 800814e:	721a      	strb	r2, [r3, #8]
                MlmeConfirm.NbGateways = payload[macIndex++];
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	70fa      	strb	r2, [r7, #3]
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	781a      	ldrb	r2, [r3, #0]
 800815e:	4ba4      	ldr	r3, [pc, #656]	; (80083f0 <ProcessMacCommands+0x30c>)
 8008160:	725a      	strb	r2, [r3, #9]
                break;
 8008162:	e2e8      	b.n	8008736 <ProcessMacCommands+0x652>
            case SRV_MAC_LINK_ADR_REQ:
                {
                    uint8_t i;
                    uint8_t status = 0x07;
 8008164:	2307      	movs	r3, #7
 8008166:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    uint16_t chMask;
                    int8_t txPower = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	77fb      	strb	r3, [r7, #31]
                    int8_t datarate = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	77bb      	strb	r3, [r7, #30]
                    uint8_t nbRep = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    uint8_t chMaskCntl = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	777b      	strb	r3, [r7, #29]
                    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800817c:	f107 0310 	add.w	r3, r7, #16
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	609a      	str	r2, [r3, #8]

                    // Initialize local copy of the channels mask array
                    for( i = 0; i < 6; i++ )
 8008188:	2300      	movs	r3, #0
 800818a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800818e:	e014      	b.n	80081ba <ProcessMacCommands+0xd6>
                    {
                        channelsMask[i] = LoRaMacParams.ChannelsMask[i];
 8008190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008194:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008198:	4996      	ldr	r1, [pc, #600]	; (80083f4 <ProcessMacCommands+0x310>)
 800819a:	3314      	adds	r3, #20
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	440b      	add	r3, r1
 80081a0:	8899      	ldrh	r1, [r3, #4]
 80081a2:	0053      	lsls	r3, r2, #1
 80081a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80081a8:	4413      	add	r3, r2
 80081aa:	460a      	mov	r2, r1
 80081ac:	f823 2c20 	strh.w	r2, [r3, #-32]
                    for( i = 0; i < 6; i++ )
 80081b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081b4:	3301      	adds	r3, #1
 80081b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081be:	2b05      	cmp	r3, #5
 80081c0:	d9e6      	bls.n	8008190 <ProcessMacCommands+0xac>
                    }
                    datarate = payload[macIndex++];
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	70fa      	strb	r2, [r7, #3]
 80081c8:	461a      	mov	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	77bb      	strb	r3, [r7, #30]
                    txPower = datarate & 0x0F;
 80081d2:	7fbb      	ldrb	r3, [r7, #30]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	77fb      	strb	r3, [r7, #31]
                    datarate = ( datarate >> 4 ) & 0x0F;
 80081da:	7fbb      	ldrb	r3, [r7, #30]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	77bb      	strb	r3, [r7, #30]

                    if( ( AdrCtrlOn == false ) &&
 80081e2:	4b85      	ldr	r3, [pc, #532]	; (80083f8 <ProcessMacCommands+0x314>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f083 0301 	eor.w	r3, r3, #1
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d016      	beq.n	800821e <ProcessMacCommands+0x13a>
                        ( ( LoRaMacParams.ChannelsDatarate != datarate ) || ( LoRaMacParams.ChannelsTxPower != txPower ) ) )
 80081f0:	4b80      	ldr	r3, [pc, #512]	; (80083f4 <ProcessMacCommands+0x310>)
 80081f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
                    if( ( AdrCtrlOn == false ) &&
 80081f6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d106      	bne.n	800820c <ProcessMacCommands+0x128>
                        ( ( LoRaMacParams.ChannelsDatarate != datarate ) || ( LoRaMacParams.ChannelsTxPower != txPower ) ) )
 80081fe:	4b7d      	ldr	r3, [pc, #500]	; (80083f4 <ProcessMacCommands+0x310>)
 8008200:	f993 3000 	ldrsb.w	r3, [r3]
 8008204:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8008208:	429a      	cmp	r2, r3
 800820a:	d008      	beq.n	800821e <ProcessMacCommands+0x13a>
                    { // ADR disabled don't handle ADR requests if server tries to change datarate or txpower
                        // Answer the server with fail status
                        // Power ACK     = 0
                        // Data rate ACK = 0
                        // Channel mask  = 0
                        AddMacCommand( MOTE_MAC_LINK_ADR_ANS, 0, 0 );
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	2003      	movs	r0, #3
 8008212:	f7ff fdf9 	bl	8007e08 <AddMacCommand>
                        macIndex += 3;  // Skip over the remaining bytes of the request
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	3303      	adds	r3, #3
 800821a:	70fb      	strb	r3, [r7, #3]
 800821c:	e28b      	b.n	8008736 <ProcessMacCommands+0x652>
                        break;
                    }
                    chMask = ( uint16_t )payload[macIndex++];
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	70fa      	strb	r2, [r7, #3]
 8008224:	461a      	mov	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4413      	add	r3, r2
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    chMask |= ( uint16_t )payload[macIndex++] << 8;
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	70fa      	strb	r2, [r7, #3]
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4413      	add	r3, r2
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	b21a      	sxth	r2, r3
 8008240:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008244:	4313      	orrs	r3, r2
 8008246:	b21b      	sxth	r3, r3
 8008248:	85bb      	strh	r3, [r7, #44]	; 0x2c

                    nbRep = payload[macIndex++];
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	70fa      	strb	r2, [r7, #3]
 8008250:	461a      	mov	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4413      	add	r3, r2
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    chMaskCntl = ( nbRep >> 4 ) & 0x07;
 800825c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008260:	091b      	lsrs	r3, r3, #4
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	777b      	strb	r3, [r7, #29]
                    nbRep &= 0x0F;
 800826a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if( nbRep == 0 )
 8008276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <ProcessMacCommands+0x1a0>
                    {
                        nbRep = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
                    if( ( chMaskCntl == 0 ) && ( chMask == 0 ) )
 8008284:	7f7b      	ldrb	r3, [r7, #29]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <ProcessMacCommands+0x1ba>
 800828a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <ProcessMacCommands+0x1ba>
                    {
                        status &= 0xFE; // Channel mask KO
 8008290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800829c:	e04a      	b.n	8008334 <ProcessMacCommands+0x250>
                    }
                    else if( ( ( chMaskCntl >= 1 ) && ( chMaskCntl <= 5 )) ||
 800829e:	7f7b      	ldrb	r3, [r7, #29]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <ProcessMacCommands+0x1c6>
 80082a4:	7f7b      	ldrb	r3, [r7, #29]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d902      	bls.n	80082b0 <ProcessMacCommands+0x1cc>
 80082aa:	7f7b      	ldrb	r3, [r7, #29]
 80082ac:	2b06      	cmp	r3, #6
 80082ae:	d906      	bls.n	80082be <ProcessMacCommands+0x1da>
                             ( chMaskCntl >= 7 ) )
                    {
                        // RFU
                        status &= 0xFE; // Channel mask KO
 80082b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80082bc:	e03a      	b.n	8008334 <ProcessMacCommands+0x250>
                    }
                    else
                    {
                        for( i = 0; i < LORA_MAX_NB_CHANNELS; i++ )
 80082be:	2300      	movs	r3, #0
 80082c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082c4:	e030      	b.n	8008328 <ProcessMacCommands+0x244>
                        {
                            if( chMaskCntl == 6 )
 80082c6:	7f7b      	ldrb	r3, [r7, #29]
 80082c8:	2b06      	cmp	r3, #6
 80082ca:	d112      	bne.n	80082f2 <ProcessMacCommands+0x20e>
                            {
                                if( Channels[i].Frequency != 0 )
 80082cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082d0:	4a4a      	ldr	r2, [pc, #296]	; (80083fc <ProcessMacCommands+0x318>)
 80082d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d021      	beq.n	800831e <ProcessMacCommands+0x23a>
                                {
                                    chMask |= 1 << i;
 80082da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082de:	2201      	movs	r2, #1
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	b21a      	sxth	r2, r3
 80082e6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80082ea:	4313      	orrs	r3, r2
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80082f0:	e015      	b.n	800831e <ProcessMacCommands+0x23a>
                                }
                            }
                            else
                            {
                                if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80082f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80082f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082f8:	fa42 f303 	asr.w	r3, r2, r3
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <ProcessMacCommands+0x23a>
                                    ( Channels[i].Frequency == 0 ) )
 8008304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008308:	4a3c      	ldr	r2, [pc, #240]	; (80083fc <ProcessMacCommands+0x318>)
 800830a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
                                if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	d105      	bne.n	800831e <ProcessMacCommands+0x23a>
                                {// Trying to enable an undefined channel
                                    status &= 0xFE; // Channel mask KO
 8008312:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                        for( i = 0; i < LORA_MAX_NB_CHANNELS; i++ )
 800831e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008322:	3301      	adds	r3, #1
 8008324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800832c:	2b0f      	cmp	r3, #15
 800832e:	d9ca      	bls.n	80082c6 <ProcessMacCommands+0x1e2>
                                }
                            }
                        }
                        channelsMask[0] = chMask;
 8008330:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008332:	823b      	strh	r3, [r7, #16]
#endif
                    }
#else
    #error "Please define a frequency band in the compiler options."
#endif
                    if( ValidateDatarate( datarate, channelsMask ) == false )
 8008334:	f107 0210 	add.w	r2, r7, #16
 8008338:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fc46 	bl	8007bd0 <ValidateDatarate>
 8008344:	4603      	mov	r3, r0
 8008346:	f083 0301 	eor.w	r3, r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <ProcessMacCommands+0x278>
                    {
                        status &= 0xFD; // Datarate KO
 8008350:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008354:	f023 0302 	bic.w	r3, r3, #2
 8008358:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    }

                    //
                    // Remark MaxTxPower = 0 and MinTxPower = 5
                    //
                    if( ValueInRange( txPower, LORAMAC_MAX_TX_POWER, LORAMAC_MIN_TX_POWER ) == false )
 800835c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008360:	2205      	movs	r2, #5
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fcac 	bl	8007cc2 <ValueInRange>
 800836a:	4603      	mov	r3, r0
 800836c:	f083 0301 	eor.w	r3, r3, #1
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <ProcessMacCommands+0x29e>
                    {
                        status &= 0xFB; // TxPower KO
 8008376:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800837a:	f023 0304 	bic.w	r3, r3, #4
 800837e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    }
                    if( ( status & 0x07 ) == 0x07 )
 8008382:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b07      	cmp	r3, #7
 800838c:	d111      	bne.n	80083b2 <ProcessMacCommands+0x2ce>
                    {
                        LoRaMacParams.ChannelsDatarate = datarate;
 800838e:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <ProcessMacCommands+0x310>)
 8008390:	7fbb      	ldrb	r3, [r7, #30]
 8008392:	7053      	strb	r3, [r2, #1]
                        LoRaMacParams.ChannelsTxPower = txPower;
 8008394:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <ProcessMacCommands+0x310>)
 8008396:	7ffb      	ldrb	r3, [r7, #31]
 8008398:	7013      	strb	r3, [r2, #0]

                        memcpy1( ( uint8_t* )LoRaMacParams.ChannelsMask, ( uint8_t* )channelsMask, sizeof( LoRaMacParams.ChannelsMask ) );
 800839a:	f107 0310 	add.w	r3, r7, #16
 800839e:	220c      	movs	r2, #12
 80083a0:	4619      	mov	r1, r3
 80083a2:	4817      	ldr	r0, [pc, #92]	; (8008400 <ProcessMacCommands+0x31c>)
 80083a4:	f009 f9bf 	bl	8011726 <memcpy1>

                        LoRaMacParams.ChannelsNbRep = nbRep;
 80083a8:	4a12      	ldr	r2, [pc, #72]	; (80083f4 <ProcessMacCommands+0x310>)
 80083aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ae:	f882 3020 	strb.w	r3, [r2, #32]
                        ChannelsMaskRemaining[3] &= channelsMask[3];
                        ChannelsMaskRemaining[4] = channelsMask[4];
                        ChannelsMaskRemaining[5] = channelsMask[5];
#endif
                    }
                    AddMacCommand( MOTE_MAC_LINK_ADR_ANS, status, 0 );
 80083b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80083b6:	2200      	movs	r2, #0
 80083b8:	4619      	mov	r1, r3
 80083ba:	2003      	movs	r0, #3
 80083bc:	f7ff fd24 	bl	8007e08 <AddMacCommand>
                }
                break;
 80083c0:	e1b9      	b.n	8008736 <ProcessMacCommands+0x652>
            case SRV_MAC_DUTY_CYCLE_REQ:
                MaxDCycle = payload[macIndex++];
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	70fa      	strb	r2, [r7, #3]
 80083c8:	461a      	mov	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <ProcessMacCommands+0x320>)
 80083d2:	701a      	strb	r2, [r3, #0]
                AggregatedDCycle = 1 << MaxDCycle;
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <ProcessMacCommands+0x320>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	2301      	movs	r3, #1
 80083dc:	4093      	lsls	r3, r2
 80083de:	b29a      	uxth	r2, r3
 80083e0:	4b09      	ldr	r3, [pc, #36]	; (8008408 <ProcessMacCommands+0x324>)
 80083e2:	801a      	strh	r2, [r3, #0]
                AddMacCommand( MOTE_MAC_DUTY_CYCLE_ANS, 0, 0 );
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	2004      	movs	r0, #4
 80083ea:	f7ff fd0d 	bl	8007e08 <AddMacCommand>
                break;
 80083ee:	e1a2      	b.n	8008736 <ProcessMacCommands+0x652>
 80083f0:	2000052c 	.word	0x2000052c
 80083f4:	200009b0 	.word	0x200009b0
 80083f8:	20000406 	.word	0x20000406
 80083fc:	20000048 	.word	0x20000048
 8008400:	200009dc 	.word	0x200009dc
 8008404:	20000434 	.word	0x20000434
 8008408:	20000436 	.word	0x20000436
            case SRV_MAC_RX_PARAM_SETUP_REQ:
                {
                    uint8_t status = 0x07;
 800840c:	2307      	movs	r3, #7
 800840e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    int8_t datarate = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    int8_t drOffset = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    uint32_t freq = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	623b      	str	r3, [r7, #32]

                    drOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	091b      	lsrs	r3, r3, #4
 800842c:	b2db      	uxtb	r3, r3
 800842e:	b25b      	sxtb	r3, r3
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    datarate = payload[macIndex] & 0x0F;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b25b      	sxtb	r3, r3
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    macIndex++;
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	3301      	adds	r3, #1
 800844e:	70fb      	strb	r3, [r7, #3]

                    freq =  ( uint32_t )payload[macIndex++];
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	70fa      	strb	r2, [r7, #3]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	623b      	str	r3, [r7, #32]
                    freq |= ( uint32_t )payload[macIndex++] << 8;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	70fa      	strb	r2, [r7, #3]
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4413      	add	r3, r2
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	6a3a      	ldr	r2, [r7, #32]
 8008472:	4313      	orrs	r3, r2
 8008474:	623b      	str	r3, [r7, #32]
                    freq |= ( uint32_t )payload[macIndex++] << 16;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	70fa      	strb	r2, [r7, #3]
 800847c:	461a      	mov	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	4313      	orrs	r3, r2
 800848a:	623b      	str	r3, [r7, #32]
                    freq *= 100;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	2264      	movs	r2, #100	; 0x64
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	623b      	str	r3, [r7, #32]

                    if( Rx2FreqInRange( freq ) == false )
 8008496:	6a38      	ldr	r0, [r7, #32]
 8008498:	f7ff fb24 	bl	8007ae4 <Rx2FreqInRange>
 800849c:	4603      	mov	r3, r0
 800849e:	f083 0301 	eor.w	r3, r3, #1
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <ProcessMacCommands+0x3d0>
                    {
                        status &= 0xFE; // Channel frequency KO
 80084a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    }

                    if( ValueInRange( datarate, LORAMAC_RX_MIN_DATARATE, LORAMAC_RX_MAX_DATARATE ) == false )
 80084b4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80084b8:	2207      	movs	r2, #7
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fc00 	bl	8007cc2 <ValueInRange>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f083 0301 	eor.w	r3, r3, #1
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d005      	beq.n	80084da <ProcessMacCommands+0x3f6>
                    {
                        status &= 0xFD; // Datarate KO
 80084ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80084d2:	f023 0302 	bic.w	r3, r3, #2
 80084d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        ( datarate > DR_13 ) )
                    {
                        status &= 0xFD; // Datarate KO
                    }
#endif
                    if( ValueInRange( drOffset, LORAMAC_MIN_RX1_DR_OFFSET, LORAMAC_MAX_RX1_DR_OFFSET ) == false )
 80084da:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80084de:	2205      	movs	r2, #5
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fbed 	bl	8007cc2 <ValueInRange>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f083 0301 	eor.w	r3, r3, #1
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <ProcessMacCommands+0x41c>
                    {
                        status &= 0xFB; // Rx1DrOffset range KO
 80084f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80084f8:	f023 0304 	bic.w	r3, r3, #4
 80084fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    }

                    if( ( status & 0x07 ) == 0x07 )
 8008500:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	2b07      	cmp	r3, #7
 800850a:	d10c      	bne.n	8008526 <ProcessMacCommands+0x442>
                    {
                        LoRaMacParams.Rx2Channel.Datarate = datarate;
 800850c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008510:	4b8e      	ldr	r3, [pc, #568]	; (800874c <ProcessMacCommands+0x668>)
 8008512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        LoRaMacParams.Rx2Channel.Frequency = freq;
 8008516:	4a8d      	ldr	r2, [pc, #564]	; (800874c <ProcessMacCommands+0x668>)
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	6253      	str	r3, [r2, #36]	; 0x24
                        LoRaMacParams.Rx1DrOffset = drOffset;
 800851c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008520:	4b8a      	ldr	r3, [pc, #552]	; (800874c <ProcessMacCommands+0x668>)
 8008522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    }
                    AddMacCommand( MOTE_MAC_RX_PARAM_SETUP_ANS, status, 0 );
 8008526:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800852a:	2200      	movs	r2, #0
 800852c:	4619      	mov	r1, r3
 800852e:	2005      	movs	r0, #5
 8008530:	f7ff fc6a 	bl	8007e08 <AddMacCommand>
                }
                break;
 8008534:	e0ff      	b.n	8008736 <ProcessMacCommands+0x652>
            case SRV_MAC_DEV_STATUS_REQ:
                {
                    uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008536:	23ff      	movs	r3, #255	; 0xff
 8008538:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    if( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) )
 800853c:	4b84      	ldr	r3, [pc, #528]	; (8008750 <ProcessMacCommands+0x66c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <ProcessMacCommands+0x478>
 8008544:	4b82      	ldr	r3, [pc, #520]	; (8008750 <ProcessMacCommands+0x66c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <ProcessMacCommands+0x478>
                    {
                        batteryLevel = LoRaMacCallbacks->GetBatteryLevel( );
 800854e:	4b80      	ldr	r3, [pc, #512]	; (8008750 <ProcessMacCommands+0x66c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    }
                    AddMacCommand( MOTE_MAC_DEV_STATUS_ANS, batteryLevel, snr );
 800855c:	787a      	ldrb	r2, [r7, #1]
 800855e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008562:	4619      	mov	r1, r3
 8008564:	2006      	movs	r0, #6
 8008566:	f7ff fc4f 	bl	8007e08 <AddMacCommand>
                    break;
 800856a:	e0e4      	b.n	8008736 <ProcessMacCommands+0x652>
                }
            case SRV_MAC_NEW_CHANNEL_REQ:
                {
                    uint8_t status = 0x03;
 800856c:	2303      	movs	r3, #3
 800856e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

#if defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL ) || defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
                    status &= 0xFC; // Channel frequency and datarate KO
                    macIndex += 5;
#else
                    int8_t channelIndex = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    ChannelParams_t chParam;

                    channelIndex = payload[macIndex++];
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	70fa      	strb	r2, [r7, #3]
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    chParam.Frequency = ( uint32_t )payload[macIndex++];
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	70fa      	strb	r2, [r7, #3]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	60bb      	str	r3, [r7, #8]
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	70fa      	strb	r2, [r7, #3]
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	021a      	lsls	r2, r3, #8
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]
                    chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	70fa      	strb	r2, [r7, #3]
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	041a      	lsls	r2, r3, #16
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60bb      	str	r3, [r7, #8]
                    chParam.Frequency *= 100;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2264      	movs	r2, #100	; 0x64
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	60bb      	str	r3, [r7, #8]
                    chParam.DrRange.Value = payload[macIndex++];
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	70fa      	strb	r2, [r7, #3]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4413      	add	r3, r2
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	733b      	strb	r3, [r7, #12]

                    LoRaMacState |= LORAMAC_TX_CONFIG;
 80085e2:	4b5c      	ldr	r3, [pc, #368]	; (8008754 <ProcessMacCommands+0x670>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f043 0320 	orr.w	r3, r3, #32
 80085ea:	4a5a      	ldr	r2, [pc, #360]	; (8008754 <ProcessMacCommands+0x670>)
 80085ec:	6013      	str	r3, [r2, #0]
                    if( chParam.Frequency == 0 )
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d119      	bne.n	8008628 <ProcessMacCommands+0x544>
                    {
                        if( channelIndex < 3 )
 80085f4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	dc06      	bgt.n	800860a <ProcessMacCommands+0x526>
                        {
                            status &= 0xFC;
 80085fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008608:	e047      	b.n	800869a <ProcessMacCommands+0x5b6>
                        }
                        else
                        {
                            if( LoRaMacChannelRemove( channelIndex ) != LORAMAC_STATUS_OK )
 800860a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fce6 	bl	8009fe0 <LoRaMacChannelRemove>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d03f      	beq.n	800869a <ProcessMacCommands+0x5b6>
                            {
                                status &= 0xFC;
 800861a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008626:	e038      	b.n	800869a <ProcessMacCommands+0x5b6>
                            }
                        }
                    }
                    else
                    {
                        switch( LoRaMacChannelAdd( channelIndex, chParam ) )
 8008628:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008634:	f001 fbbc 	bl	8009db0 <LoRaMacChannelAdd>
 8008638:	4603      	mov	r3, r0
 800863a:	2b06      	cmp	r3, #6
 800863c:	d825      	bhi.n	800868a <ProcessMacCommands+0x5a6>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <ProcessMacCommands+0x560>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008699 	.word	0x08008699
 8008648:	0800868b 	.word	0x0800868b
 800864c:	0800868b 	.word	0x0800868b
 8008650:	0800868b 	.word	0x0800868b
 8008654:	08008661 	.word	0x08008661
 8008658:	0800866f 	.word	0x0800866f
 800865c:	0800867d 	.word	0x0800867d
                            {
                                break;
                            }
                            case LORAMAC_STATUS_FREQUENCY_INVALID:
                            {
                                status &= 0xFE;
 8008660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                                break;
 800866c:	e015      	b.n	800869a <ProcessMacCommands+0x5b6>
                            }
                            case LORAMAC_STATUS_DATARATE_INVALID:
                            {
                                status &= 0xFD;
 800866e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008672:	f023 0302 	bic.w	r3, r3, #2
 8008676:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                                break;
 800867a:	e00e      	b.n	800869a <ProcessMacCommands+0x5b6>
                            }
                            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
                            {
                                status &= 0xFC;
 800867c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                                break;
 8008688:	e007      	b.n	800869a <ProcessMacCommands+0x5b6>
                            }
                            default:
                            {
                                status &= 0xFC;
 800868a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800868e:	f023 0303 	bic.w	r3, r3, #3
 8008692:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                                break;
 8008696:	e000      	b.n	800869a <ProcessMacCommands+0x5b6>
                                break;
 8008698:	bf00      	nop
                            }
                        }
                    }
                    LoRaMacState &= ~LORAMAC_TX_CONFIG;
 800869a:	4b2e      	ldr	r3, [pc, #184]	; (8008754 <ProcessMacCommands+0x670>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f023 0320 	bic.w	r3, r3, #32
 80086a2:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <ProcessMacCommands+0x670>)
 80086a4:	6013      	str	r3, [r2, #0]
#endif
                    AddMacCommand( MOTE_MAC_NEW_CHANNEL_ANS, status, 0 );
 80086a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086aa:	2200      	movs	r2, #0
 80086ac:	4619      	mov	r1, r3
 80086ae:	2007      	movs	r0, #7
 80086b0:	f7ff fbaa 	bl	8007e08 <AddMacCommand>
                }
                break;
 80086b4:	e03f      	b.n	8008736 <ProcessMacCommands+0x652>
            case SRV_MAC_RX_TIMING_SETUP_REQ:
                {
                    uint8_t delay = payload[macIndex++] & 0x0F;
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	70fa      	strb	r2, [r7, #3]
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    if( delay == 0 )
 80086cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <ProcessMacCommands+0x5fa>
                    {
                        delay++;
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d8:	3301      	adds	r3, #1
 80086da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    }
                    LoRaMacParams.ReceiveDelay1 = delay * 1e3;
 80086de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f7 fea6 	bl	8000434 <__aeabi_i2d>
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	4b1a      	ldr	r3, [pc, #104]	; (8008758 <ProcessMacCommands+0x674>)
 80086ee:	f7f7 ff0b 	bl	8000508 <__aeabi_dmul>
 80086f2:	4603      	mov	r3, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	4618      	mov	r0, r3
 80086f8:	4621      	mov	r1, r4
 80086fa:	f7f8 f9c7 	bl	8000a8c <__aeabi_d2uiz>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b12      	ldr	r3, [pc, #72]	; (800874c <ProcessMacCommands+0x668>)
 8008702:	611a      	str	r2, [r3, #16]
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1e3;
 8008704:	4b11      	ldr	r3, [pc, #68]	; (800874c <ProcessMacCommands+0x668>)
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	4618      	mov	r0, r3
 800870a:	f7f7 fe83 	bl	8000414 <__aeabi_ui2d>
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	4b11      	ldr	r3, [pc, #68]	; (8008758 <ProcessMacCommands+0x674>)
 8008714:	f7f7 fd42 	bl	800019c <__adddf3>
 8008718:	4603      	mov	r3, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4618      	mov	r0, r3
 800871e:	4621      	mov	r1, r4
 8008720:	f7f8 f9b4 	bl	8000a8c <__aeabi_d2uiz>
 8008724:	4602      	mov	r2, r0
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <ProcessMacCommands+0x668>)
 8008728:	615a      	str	r2, [r3, #20]
                    AddMacCommand( MOTE_MAC_RX_TIMING_SETUP_ANS, 0, 0 );
 800872a:	2200      	movs	r2, #0
 800872c:	2100      	movs	r1, #0
 800872e:	2008      	movs	r0, #8
 8008730:	f7ff fb6a 	bl	8007e08 <AddMacCommand>
                }
                break;
 8008734:	bf00      	nop
    while( macIndex < commandsSize )
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	78bb      	ldrb	r3, [r7, #2]
 800873a:	429a      	cmp	r2, r3
 800873c:	f4ff ace0 	bcc.w	8008100 <ProcessMacCommands+0x1c>
 8008740:	e000      	b.n	8008744 <ProcessMacCommands+0x660>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8008742:	bf00      	nop
        }
    }
}
 8008744:	3734      	adds	r7, #52	; 0x34
 8008746:	46bd      	mov	sp, r7
 8008748:	bd90      	pop	{r4, r7, pc}
 800874a:	bf00      	nop
 800874c:	200009b0 	.word	0x200009b0
 8008750:	20000464 	.word	0x20000464
 8008754:	20000448 	.word	0x20000448
 8008758:	408f4000 	.word	0x408f4000

0800875c <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t *macHdr, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	461a      	mov	r2, r3
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
 800876c:	4613      	mov	r3, r2
 800876e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008770:	2303      	movs	r3, #3
 8008772:	75fb      	strb	r3, [r7, #23]

    fCtrl.Value = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.FOptsLen      = 0;
 8008778:	7d3b      	ldrb	r3, [r7, #20]
 800877a:	f36f 0303 	bfc	r3, #0, #4
 800877e:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.FPending      = 0;
 8008780:	7d3b      	ldrb	r3, [r7, #20]
 8008782:	f36f 1304 	bfc	r3, #4, #1
 8008786:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.Ack           = false;
 8008788:	7d3b      	ldrb	r3, [r7, #20]
 800878a:	f36f 1345 	bfc	r3, #5, #1
 800878e:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq     = false;
 8008790:	7d3b      	ldrb	r3, [r7, #20]
 8008792:	f36f 1386 	bfc	r3, #6, #1
 8008796:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <Send+0x90>)
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	7d3b      	ldrb	r3, [r7, #20]
 800879e:	f362 13c7 	bfi	r3, r2, #7, #1
 80087a2:	753b      	strb	r3, [r7, #20]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80087a4:	7afa      	ldrb	r2, [r7, #11]
 80087a6:	f107 0114 	add.w	r1, r7, #20
 80087aa:	893b      	ldrh	r3, [r7, #8]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fa81 	bl	8008cb8 <PrepareFrame>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75fb      	strb	r3, [r7, #23]

    // Validate status
    if( status != LORAMAC_STATUS_OK )
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <Send+0x68>
    {
        return status;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	e00e      	b.n	80087e2 <Send+0x86>
    }

    // Reset confirm parameters
    McpsConfirm.NbRetries = 0;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <Send+0x94>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	715a      	strb	r2, [r3, #5]
    McpsConfirm.AckReceived = false;
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <Send+0x94>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	711a      	strb	r2, [r3, #4]
    McpsConfirm.UpLinkCounter = UpLinkCounter;
 80087d0:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <Send+0x98>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <Send+0x94>)
 80087d6:	60d3      	str	r3, [r2, #12]

    status = ScheduleTx( );
 80087d8:	f000 f80e 	bl	80087f8 <ScheduleTx>
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]

    return status;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000406 	.word	0x20000406
 80087f0:	20000518 	.word	0x20000518
 80087f4:	200003fc 	.word	0x200003fc

080087f8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( void )
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
    TimerTime_t dutyCycleTimeOff = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

    // Check if the device is off
    if( MaxDCycle == 255 )
 8008802:	4b52      	ldr	r3, [pc, #328]	; (800894c <ScheduleTx+0x154>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2bff      	cmp	r3, #255	; 0xff
 8008808:	d101      	bne.n	800880e <ScheduleTx+0x16>
    {
        return LORAMAC_STATUS_DEVICE_OFF;
 800880a:	230a      	movs	r3, #10
 800880c:	e099      	b.n	8008942 <ScheduleTx+0x14a>
    }
    if( MaxDCycle == 0 )
 800880e:	4b4f      	ldr	r3, [pc, #316]	; (800894c <ScheduleTx+0x154>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10f      	bne.n	8008836 <ScheduleTx+0x3e>
    {
        AggregatedTimeOff = 0;
 8008816:	4b4e      	ldr	r3, [pc, #312]	; (8008950 <ScheduleTx+0x158>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
    }

    // Select channel
    while( SetNextChannel( &dutyCycleTimeOff ) == false )
 800881c:	e00b      	b.n	8008836 <ScheduleTx+0x3e>
    {
        // Set the default datarate
        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800881e:	4b4d      	ldr	r3, [pc, #308]	; (8008954 <ScheduleTx+0x15c>)
 8008820:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008824:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <ScheduleTx+0x160>)
 8008826:	705a      	strb	r2, [r3, #1]

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
        // Re-enable default channels LC1, LC2, LC3
        LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );
 8008828:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <ScheduleTx+0x160>)
 800882a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800882c:	f043 0307 	orr.w	r3, r3, #7
 8008830:	b29a      	uxth	r2, r3
 8008832:	4b49      	ldr	r3, [pc, #292]	; (8008958 <ScheduleTx+0x160>)
 8008834:	859a      	strh	r2, [r3, #44]	; 0x2c
    while( SetNextChannel( &dutyCycleTimeOff ) == false )
 8008836:	f107 0314 	add.w	r3, r7, #20
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe ff0c 	bl	8007658 <SetNextChannel>
 8008840:	4603      	mov	r3, r0
 8008842:	f083 0301 	eor.w	r3, r3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e8      	bne.n	800881e <ScheduleTx+0x26>

    // Compute Rx1 windows parameters
#if ( defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID ) )
    RxWindowsParams[0] = ComputeRxWindowParameters( DatarateOffsets[LoRaMacParams.ChannelsDatarate][LoRaMacParams.Rx1DrOffset], LoRaMacParams.SystemMaxRxError );
#else
    RxWindowsParams[0] = ComputeRxWindowParameters( MAX( DR_0, LoRaMacParams.ChannelsDatarate - LoRaMacParams.Rx1DrOffset ), LoRaMacParams.SystemMaxRxError );
 800884c:	4b42      	ldr	r3, [pc, #264]	; (8008958 <ScheduleTx+0x160>)
 800884e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008852:	461a      	mov	r2, r3
 8008854:	4b40      	ldr	r3, [pc, #256]	; (8008958 <ScheduleTx+0x160>)
 8008856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008860:	b259      	sxtb	r1, r3
 8008862:	4b3d      	ldr	r3, [pc, #244]	; (8008958 <ScheduleTx+0x160>)
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	4c3d      	ldr	r4, [pc, #244]	; (800895c <ScheduleTx+0x164>)
 8008868:	463b      	mov	r3, r7
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fdac 	bl	800a3c8 <ComputeRxWindowParameters>
 8008870:	463b      	mov	r3, r7
 8008872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#endif
    // Compute Rx2 windows parameters
    RxWindowsParams[1] = ComputeRxWindowParameters( LoRaMacParams.Rx2Channel.Datarate, LoRaMacParams.SystemMaxRxError );
 800887a:	4b37      	ldr	r3, [pc, #220]	; (8008958 <ScheduleTx+0x160>)
 800887c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008880:	b259      	sxtb	r1, r3
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <ScheduleTx+0x160>)
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	4c35      	ldr	r4, [pc, #212]	; (800895c <ScheduleTx+0x164>)
 8008888:	463b      	mov	r3, r7
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fd9c 	bl	800a3c8 <ComputeRxWindowParameters>
 8008890:	f104 030c 	add.w	r3, r4, #12
 8008894:	463a      	mov	r2, r7
 8008896:	ca07      	ldmia	r2, {r0, r1, r2}
 8008898:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if( IsLoRaMacNetworkJoined == false )
 800889c:	4b30      	ldr	r3, [pc, #192]	; (8008960 <ScheduleTx+0x168>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f083 0301 	eor.w	r3, r3, #1
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00e      	beq.n	80088c8 <ScheduleTx+0xd0>
    {
        RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindowsParams[0].RxOffset;
 80088aa:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <ScheduleTx+0x160>)
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	4a2b      	ldr	r2, [pc, #172]	; (800895c <ScheduleTx+0x164>)
 80088b0:	6892      	ldr	r2, [r2, #8]
 80088b2:	4413      	add	r3, r2
 80088b4:	4a2b      	ldr	r2, [pc, #172]	; (8008964 <ScheduleTx+0x16c>)
 80088b6:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindowsParams[1].RxOffset;
 80088b8:	4b27      	ldr	r3, [pc, #156]	; (8008958 <ScheduleTx+0x160>)
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	4a27      	ldr	r2, [pc, #156]	; (800895c <ScheduleTx+0x164>)
 80088be:	6952      	ldr	r2, [r2, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	4a29      	ldr	r2, [pc, #164]	; (8008968 <ScheduleTx+0x170>)
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e01f      	b.n	8008908 <ScheduleTx+0x110>
    }
    else
    {
        if( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false )
 80088c8:	4b28      	ldr	r3, [pc, #160]	; (800896c <ScheduleTx+0x174>)
 80088ca:	7818      	ldrb	r0, [r3, #0]
 80088cc:	4b22      	ldr	r3, [pc, #136]	; (8008958 <ScheduleTx+0x160>)
 80088ce:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80088d2:	4b27      	ldr	r3, [pc, #156]	; (8008970 <ScheduleTx+0x178>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f7ff f918 	bl	8007b0c <ValidatePayloadLength>
 80088dc:	4603      	mov	r3, r0
 80088de:	f083 0301 	eor.w	r3, r3, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <ScheduleTx+0xf4>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80088e8:	2308      	movs	r3, #8
 80088ea:	e02a      	b.n	8008942 <ScheduleTx+0x14a>
        }
        RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindowsParams[0].RxOffset;
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <ScheduleTx+0x160>)
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	4a1a      	ldr	r2, [pc, #104]	; (800895c <ScheduleTx+0x164>)
 80088f2:	6892      	ldr	r2, [r2, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <ScheduleTx+0x16c>)
 80088f8:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindowsParams[1].RxOffset;
 80088fa:	4b17      	ldr	r3, [pc, #92]	; (8008958 <ScheduleTx+0x160>)
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	4a17      	ldr	r2, [pc, #92]	; (800895c <ScheduleTx+0x164>)
 8008900:	6952      	ldr	r2, [r2, #20]
 8008902:	4413      	add	r3, r2
 8008904:	4a18      	ldr	r2, [pc, #96]	; (8008968 <ScheduleTx+0x170>)
 8008906:	6013      	str	r3, [r2, #0]
    }

    // Schedule transmission of frame
    if( dutyCycleTimeOff == 0 )
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <ScheduleTx+0x12c>
    {
        // Try to send now
        return SendFrameOnChannel( Channels[Channel] );
 800890e:	4b19      	ldr	r3, [pc, #100]	; (8008974 <ScheduleTx+0x17c>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	4a19      	ldr	r2, [pc, #100]	; (8008978 <ScheduleTx+0x180>)
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	4413      	add	r3, r2
 8008918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800891c:	f000 fc4e 	bl	80091bc <SendFrameOnChannel>
 8008920:	4603      	mov	r3, r0
 8008922:	e00e      	b.n	8008942 <ScheduleTx+0x14a>
    }
    else
    {
        // Send later - prepare timer
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8008924:	4b15      	ldr	r3, [pc, #84]	; (800897c <ScheduleTx+0x184>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	4a13      	ldr	r2, [pc, #76]	; (800897c <ScheduleTx+0x184>)
 800892e:	6013      	str	r3, [r2, #0]
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	4619      	mov	r1, r3
 8008934:	4812      	ldr	r0, [pc, #72]	; (8008980 <ScheduleTx+0x188>)
 8008936:	f008 fb47 	bl	8010fc8 <TimerSetValue>
        TimerStart( &TxDelayedTimer );
 800893a:	4811      	ldr	r0, [pc, #68]	; (8008980 <ScheduleTx+0x188>)
 800893c:	f008 f940 	bl	8010bc0 <TimerStart>

        return LORAMAC_STATUS_OK;
 8008940:	2300      	movs	r3, #0
    }
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	bd90      	pop	{r4, r7, pc}
 800894a:	bf00      	nop
 800894c:	20000434 	.word	0x20000434
 8008950:	2000043c 	.word	0x2000043c
 8008954:	20000978 	.word	0x20000978
 8008958:	200009b0 	.word	0x200009b0
 800895c:	200004c8 	.word	0x200004c8
 8008960:	20000405 	.word	0x20000405
 8008964:	200004c0 	.word	0x200004c0
 8008968:	200004c4 	.word	0x200004c4
 800896c:	200002fa 	.word	0x200002fa
 8008970:	2000040f 	.word	0x2000040f
 8008974:	20000441 	.word	0x20000441
 8008978:	20000048 	.word	0x20000048
 800897c:	20000448 	.word	0x20000448
 8008980:	20000484 	.word	0x20000484
 8008984:	00000000 	.word	0x00000000

08008988 <JoinDutyCycle>:

static uint16_t JoinDutyCycle( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
    uint16_t dutyCycle = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	80fb      	strh	r3, [r7, #6]
    TimerTime_t timeElapsed = TimerGetElapsedTime( LoRaMacInitializationTime );
 8008992:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <JoinDutyCycle+0x70>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f008 fb36 	bl	8011008 <TimerGetElapsedTime>
 800899c:	6038      	str	r0, [r7, #0]

    if( timeElapsed < 3600e3 )
 800899e:	6838      	ldr	r0, [r7, #0]
 80089a0:	f7f7 fd38 	bl	8000414 <__aeabi_ui2d>
 80089a4:	a310      	add	r3, pc, #64	; (adr r3, 80089e8 <JoinDutyCycle+0x60>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f8 f81f 	bl	80009ec <__aeabi_dcmplt>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <JoinDutyCycle+0x32>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80089b4:	2364      	movs	r3, #100	; 0x64
 80089b6:	80fb      	strh	r3, [r7, #6]
 80089b8:	e011      	b.n	80089de <JoinDutyCycle+0x56>
    }
    else if( timeElapsed < ( 3600e3 + 36000e3 ) )
 80089ba:	6838      	ldr	r0, [r7, #0]
 80089bc:	f7f7 fd2a 	bl	8000414 <__aeabi_ui2d>
 80089c0:	a30b      	add	r3, pc, #44	; (adr r3, 80089f0 <JoinDutyCycle+0x68>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f8 f811 	bl	80009ec <__aeabi_dcmplt>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <JoinDutyCycle+0x50>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80089d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089d4:	80fb      	strh	r3, [r7, #6]
 80089d6:	e002      	b.n	80089de <JoinDutyCycle+0x56>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80089d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80089dc:	80fb      	strh	r3, [r7, #6]
    }
    return dutyCycle;
 80089de:	88fb      	ldrh	r3, [r7, #6]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	00000000 	.word	0x00000000
 80089ec:	414b7740 	.word	0x414b7740
 80089f0:	00000000 	.word	0x00000000
 80089f4:	4182e1fc 	.word	0x4182e1fc
 80089f8:	20000444 	.word	0x20000444

080089fc <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
    uint16_t dutyCycle = Bands[Channels[channel].Band].DCycle;
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <CalculateBackOff+0xe4>)
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	795b      	ldrb	r3, [r3, #5]
 8008a10:	4619      	mov	r1, r3
 8008a12:	4a34      	ldr	r2, [pc, #208]	; (8008ae4 <CalculateBackOff+0xe8>)
 8008a14:	460b      	mov	r3, r1
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	440b      	add	r3, r1
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	81fb      	strh	r3, [r7, #14]
    uint16_t joinDutyCycle = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	81bb      	strh	r3, [r7, #12]

    // Reset time-off to initial value.
    Bands[Channels[channel].Band].TimeOff = 0;
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <CalculateBackOff+0xe4>)
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	795b      	ldrb	r3, [r3, #5]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4a2c      	ldr	r2, [pc, #176]	; (8008ae4 <CalculateBackOff+0xe8>)
 8008a34:	460b      	mov	r3, r1
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	440b      	add	r3, r1
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3308      	adds	r3, #8
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]

    if( IsLoRaMacNetworkJoined == false )
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <CalculateBackOff+0xec>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f083 0301 	eor.w	r3, r3, #1
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01e      	beq.n	8008a90 <CalculateBackOff+0x94>
    {
        // The node has not joined yet. Apply join duty cycle to all regions.
        joinDutyCycle = JoinDutyCycle( );
 8008a52:	f7ff ff99 	bl	8008988 <JoinDutyCycle>
 8008a56:	4603      	mov	r3, r0
 8008a58:	81bb      	strh	r3, [r7, #12]
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008a5a:	89ba      	ldrh	r2, [r7, #12]
 8008a5c:	89fb      	ldrh	r3, [r7, #14]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	bf38      	it	cc
 8008a62:	4613      	movcc	r3, r2
 8008a64:	81fb      	strh	r3, [r7, #14]

        // Update Band time-off.
        Bands[Channels[channel].Band].TimeOff = TxTimeOnAir * dutyCycle - TxTimeOnAir;
 8008a66:	89fb      	ldrh	r3, [r7, #14]
 8008a68:	1e5a      	subs	r2, r3, #1
 8008a6a:	4b20      	ldr	r3, [pc, #128]	; (8008aec <CalculateBackOff+0xf0>)
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	481b      	ldr	r0, [pc, #108]	; (8008ae0 <CalculateBackOff+0xe4>)
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4403      	add	r3, r0
 8008a76:	795b      	ldrb	r3, [r3, #5]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	fb01 f202 	mul.w	r2, r1, r2
 8008a7e:	4919      	ldr	r1, [pc, #100]	; (8008ae4 <CalculateBackOff+0xe8>)
 8008a80:	4603      	mov	r3, r0
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	4403      	add	r3, r0
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e017      	b.n	8008ac0 <CalculateBackOff+0xc4>
    }
    else
    {
        if( DutyCycleOn == true )
 8008a90:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <CalculateBackOff+0xf4>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d013      	beq.n	8008ac0 <CalculateBackOff+0xc4>
        {
            Bands[Channels[channel].Band].TimeOff = TxTimeOnAir * dutyCycle - TxTimeOnAir;
 8008a98:	89fb      	ldrh	r3, [r7, #14]
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	4b13      	ldr	r3, [pc, #76]	; (8008aec <CalculateBackOff+0xf0>)
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	480f      	ldr	r0, [pc, #60]	; (8008ae0 <CalculateBackOff+0xe4>)
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	4403      	add	r3, r0
 8008aa8:	795b      	ldrb	r3, [r3, #5]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	fb01 f202 	mul.w	r2, r1, r2
 8008ab0:	490c      	ldr	r1, [pc, #48]	; (8008ae4 <CalculateBackOff+0xe8>)
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4403      	add	r3, r0
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3308      	adds	r3, #8
 8008abe:	601a      	str	r2, [r3, #0]
        }
    }

    // Update Aggregated Time OFF
    AggregatedTimeOff = AggregatedTimeOff + ( TxTimeOnAir * AggregatedDCycle - TxTimeOnAir );
 8008ac0:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <CalculateBackOff+0xf8>)
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	4a09      	ldr	r2, [pc, #36]	; (8008aec <CalculateBackOff+0xf0>)
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	fb02 f203 	mul.w	r2, r2, r3
 8008ace:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <CalculateBackOff+0xfc>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <CalculateBackOff+0xfc>)
 8008ad6:	6013      	str	r3, [r2, #0]
}
 8008ad8:	bf00      	nop
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20000048 	.word	0x20000048
 8008ae4:	2000000c 	.word	0x2000000c
 8008ae8:	20000405 	.word	0x20000405
 8008aec:	200004f8 	.word	0x200004f8
 8008af0:	20000440 	.word	0x20000440
 8008af4:	20000436 	.word	0x20000436
 8008af8:	2000043c 	.word	0x2000043c

08008afc <AlternateDatarate>:

static int8_t AlternateDatarate( uint16_t nbTrials )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	80fb      	strh	r3, [r7, #6]
    int8_t datarate = LORAMAC_TX_MIN_DATARATE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
    else
    {
        datarate = DR_0;
    }
#else
    if( ( nbTrials % 48 ) == 0 )
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	4b21      	ldr	r3, [pc, #132]	; (8008b94 <AlternateDatarate+0x98>)
 8008b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b12:	0959      	lsrs	r1, r3, #5
 8008b14:	460b      	mov	r3, r1
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	440b      	add	r3, r1
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <AlternateDatarate+0x2e>
    {
        datarate = DR_0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
 8008b28:	e02c      	b.n	8008b84 <AlternateDatarate+0x88>
    }
    else if( ( nbTrials % 32 ) == 0 )
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	f003 031f 	and.w	r3, r3, #31
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <AlternateDatarate+0x40>
    {
        datarate = DR_1;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
 8008b3a:	e023      	b.n	8008b84 <AlternateDatarate+0x88>
    }
    else if( ( nbTrials % 24 ) == 0 )
 8008b3c:	88fa      	ldrh	r2, [r7, #6]
 8008b3e:	4b15      	ldr	r3, [pc, #84]	; (8008b94 <AlternateDatarate+0x98>)
 8008b40:	fba3 1302 	umull	r1, r3, r3, r2
 8008b44:	0919      	lsrs	r1, r3, #4
 8008b46:	460b      	mov	r3, r1
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	440b      	add	r3, r1
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <AlternateDatarate+0x60>
    {
        datarate = DR_2;
 8008b56:	2302      	movs	r3, #2
 8008b58:	73fb      	strb	r3, [r7, #15]
 8008b5a:	e013      	b.n	8008b84 <AlternateDatarate+0x88>
    }
    else if( ( nbTrials % 16 ) == 0 )
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <AlternateDatarate+0x72>
    {
        datarate = DR_3;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	73fb      	strb	r3, [r7, #15]
 8008b6c:	e00a      	b.n	8008b84 <AlternateDatarate+0x88>
    }
    else if( ( nbTrials % 8 ) == 0 )
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <AlternateDatarate+0x84>
    {
        datarate = DR_4;
 8008b7a:	2304      	movs	r3, #4
 8008b7c:	73fb      	strb	r3, [r7, #15]
 8008b7e:	e001      	b.n	8008b84 <AlternateDatarate+0x88>
    }
    else
    {
        datarate = DR_5;
 8008b80:	2305      	movs	r3, #5
 8008b82:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return datarate;
 8008b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc80      	pop	{r7}
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	aaaaaaab 	.word	0xaaaaaaab

08008b98 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
    IsLoRaMacNetworkJoined = false;
 8008b9e:	4b30      	ldr	r3, [pc, #192]	; (8008c60 <ResetMacParameters+0xc8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]

    // Counters
    UpLinkCounter = 0;
 8008ba4:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <ResetMacParameters+0xcc>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
    DownLinkCounter = 0;
 8008baa:	4b2f      	ldr	r3, [pc, #188]	; (8008c68 <ResetMacParameters+0xd0>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
    AdrAckCounter = 0;
 8008bb0:	4b2e      	ldr	r3, [pc, #184]	; (8008c6c <ResetMacParameters+0xd4>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

    ChannelsNbRepCounter = 0;
 8008bb6:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <ResetMacParameters+0xd8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]

    AckTimeoutRetries = 1;
 8008bbc:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <ResetMacParameters+0xdc>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetriesCounter = 1;
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <ResetMacParameters+0xe0>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetry = false;
 8008bc8:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <ResetMacParameters+0xe4>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]

    MaxDCycle = 0;
 8008bce:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <ResetMacParameters+0xe8>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
    AggregatedDCycle = 1;
 8008bd4:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <ResetMacParameters+0xec>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	801a      	strh	r2, [r3, #0]

    MacCommandsBufferIndex = 0;
 8008bda:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <ResetMacParameters+0xf0>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
    MacCommandsBufferToRepeatIndex = 0;
 8008be0:	4b2a      	ldr	r3, [pc, #168]	; (8008c8c <ResetMacParameters+0xf4>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]

    IsRxWindowsEnabled = true;
 8008be6:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <ResetMacParameters+0xf8>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]

    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8008bec:	4b29      	ldr	r3, [pc, #164]	; (8008c94 <ResetMacParameters+0xfc>)
 8008bee:	f993 2000 	ldrsb.w	r2, [r3]
 8008bf2:	4b29      	ldr	r3, [pc, #164]	; (8008c98 <ResetMacParameters+0x100>)
 8008bf4:	701a      	strb	r2, [r3, #0]
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <ResetMacParameters+0xfc>)
 8008bf8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008bfc:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <ResetMacParameters+0x100>)
 8008bfe:	705a      	strb	r2, [r3, #1]

    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 8008c00:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <ResetMacParameters+0xfc>)
 8008c02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008c06:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <ResetMacParameters+0x100>)
 8008c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    LoRaMacParams.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8008c0c:	4b22      	ldr	r3, [pc, #136]	; (8008c98 <ResetMacParameters+0x100>)
 8008c0e:	4a21      	ldr	r2, [pc, #132]	; (8008c94 <ResetMacParameters+0xfc>)
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	3224      	adds	r2, #36	; 0x24
 8008c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c18:	e883 0003 	stmia.w	r3, {r0, r1}

    memcpy1( ( uint8_t* ) LoRaMacParams.ChannelsMask, ( uint8_t* ) LoRaMacParamsDefaults.ChannelsMask, sizeof( LoRaMacParams.ChannelsMask ) );
 8008c1c:	220c      	movs	r2, #12
 8008c1e:	491f      	ldr	r1, [pc, #124]	; (8008c9c <ResetMacParameters+0x104>)
 8008c20:	481f      	ldr	r0, [pc, #124]	; (8008ca0 <ResetMacParameters+0x108>)
 8008c22:	f008 fd80 	bl	8011726 <memcpy1>
#if defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
    memcpy1( ( uint8_t* ) ChannelsMaskRemaining, ( uint8_t* ) LoRaMacParamsDefaults.ChannelsMask, sizeof( LoRaMacParams.ChannelsMask ) );
#endif


    NodeAckRequested = false;
 8008c26:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <ResetMacParameters+0x10c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
    SrvAckRequested = false;
 8008c2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ca8 <ResetMacParameters+0x110>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	701a      	strb	r2, [r3, #0]
    MacCommandsInNextTx = false;
 8008c32:	4b1e      	ldr	r3, [pc, #120]	; (8008cac <ResetMacParameters+0x114>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]

    // Reset Multicast downlink counters
    MulticastParams_t *cur = MulticastChannels;
 8008c38:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <ResetMacParameters+0x118>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	607b      	str	r3, [r7, #4]
    while( cur != NULL )
 8008c3e:	e005      	b.n	8008c4c <ResetMacParameters+0xb4>
    {
        cur->DownLinkCounter = 0;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24
        cur = cur->Next;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	607b      	str	r3, [r7, #4]
    while( cur != NULL )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f6      	bne.n	8008c40 <ResetMacParameters+0xa8>
    }

    // Initialize channel index.
    Channel = LORA_MAX_NB_CHANNELS;
 8008c52:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <ResetMacParameters+0x11c>)
 8008c54:	2210      	movs	r2, #16
 8008c56:	701a      	strb	r2, [r3, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000405 	.word	0x20000405
 8008c64:	200003fc 	.word	0x200003fc
 8008c68:	20000400 	.word	0x20000400
 8008c6c:	20000408 	.word	0x20000408
 8008c70:	20000433 	.word	0x20000433
 8008c74:	200000c8 	.word	0x200000c8
 8008c78:	200000c9 	.word	0x200000c9
 8008c7c:	200004f4 	.word	0x200004f4
 8008c80:	20000434 	.word	0x20000434
 8008c84:	20000436 	.word	0x20000436
 8008c88:	2000040f 	.word	0x2000040f
 8008c8c:	20000410 	.word	0x20000410
 8008c90:	20000008 	.word	0x20000008
 8008c94:	20000978 	.word	0x20000978
 8008c98:	200009b0 	.word	0x200009b0
 8008c9c:	200009a4 	.word	0x200009a4
 8008ca0:	200009dc 	.word	0x200009dc
 8008ca4:	2000040c 	.word	0x2000040c
 8008ca8:	2000040d 	.word	0x2000040d
 8008cac:	2000040e 	.word	0x2000040e
 8008cb0:	200001f0 	.word	0x200001f0
 8008cb4:	20000441 	.word	0x20000441

08008cb8 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 8008cb8:	b590      	push	{r4, r7, lr}
 8008cba:	b08d      	sub	sp, #52	; 0x34
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    uint8_t pktHeaderLen = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	777b      	strb	r3, [r7, #29]
    uint32_t mic = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	613b      	str	r3, [r7, #16]
    const void* payload = fBuffer;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
    uint8_t framePort = fPort;
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	75fb      	strb	r3, [r7, #23]

    LoRaMacBufferPktLen = 0;
 8008cd8:	4b5f      	ldr	r3, [pc, #380]	; (8008e58 <PrepareFrame+0x1a0>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	801a      	strh	r2, [r3, #0]

    NodeAckRequested = false;
 8008cde:	4b5f      	ldr	r3, [pc, #380]	; (8008e5c <PrepareFrame+0x1a4>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <PrepareFrame+0x36>
    {
        fBufferSize = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    LoRaMacTxPayloadLen = fBufferSize;
 8008cee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	4b5b      	ldr	r3, [pc, #364]	; (8008e60 <PrepareFrame+0x1a8>)
 8008cf4:	701a      	strb	r2, [r3, #0]

    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 8008cf6:	7f7b      	ldrb	r3, [r7, #29]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	777a      	strb	r2, [r7, #29]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	7819      	ldrb	r1, [r3, #0]
 8008d02:	4b58      	ldr	r3, [pc, #352]	; (8008e64 <PrepareFrame+0x1ac>)
 8008d04:	5499      	strb	r1, [r3, r2]

    switch( macHdr->Bits.MType )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b07      	cmp	r3, #7
 8008d12:	f200 823c 	bhi.w	800918e <PrepareFrame+0x4d6>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <PrepareFrame+0x64>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	0800918f 	.word	0x0800918f
 8008d24:	08008e47 	.word	0x08008e47
 8008d28:	0800918f 	.word	0x0800918f
 8008d2c:	08008e41 	.word	0x08008e41
 8008d30:	0800918f 	.word	0x0800918f
 8008d34:	0800918f 	.word	0x0800918f
 8008d38:	08009159 	.word	0x08009159
    {
        case FRAME_TYPE_JOIN_REQ:
            LoRaMacBufferPktLen = pktHeaderLen;
 8008d3c:	7f7b      	ldrb	r3, [r7, #29]
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	4b45      	ldr	r3, [pc, #276]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d42:	801a      	strh	r2, [r3, #0]

            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 8008d44:	4b44      	ldr	r3, [pc, #272]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4b46      	ldr	r3, [pc, #280]	; (8008e64 <PrepareFrame+0x1ac>)
 8008d4c:	18d0      	adds	r0, r2, r3
 8008d4e:	4b46      	ldr	r3, [pc, #280]	; (8008e68 <PrepareFrame+0x1b0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2208      	movs	r2, #8
 8008d54:	4619      	mov	r1, r3
 8008d56:	f008 fd00 	bl	801175a <memcpyr>
            LoRaMacBufferPktLen += 8;
 8008d5a:	4b3f      	ldr	r3, [pc, #252]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	4b3d      	ldr	r3, [pc, #244]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d64:	801a      	strh	r2, [r3, #0]
            memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 8008d66:	4b3c      	ldr	r3, [pc, #240]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4b3d      	ldr	r3, [pc, #244]	; (8008e64 <PrepareFrame+0x1ac>)
 8008d6e:	18d0      	adds	r0, r2, r3
 8008d70:	4b3e      	ldr	r3, [pc, #248]	; (8008e6c <PrepareFrame+0x1b4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2208      	movs	r2, #8
 8008d76:	4619      	mov	r1, r3
 8008d78:	f008 fcef 	bl	801175a <memcpyr>
            LoRaMacBufferPktLen += 8;
 8008d7c:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	4b34      	ldr	r3, [pc, #208]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d86:	801a      	strh	r2, [r3, #0]

            LoRaMacDevNonce = Radio.Random( );
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <PrepareFrame+0x1b8>)
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	4b38      	ldr	r3, [pc, #224]	; (8008e74 <PrepareFrame+0x1bc>)
 8008d94:	801a      	strh	r2, [r3, #0]

            LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 8008d96:	4b37      	ldr	r3, [pc, #220]	; (8008e74 <PrepareFrame+0x1bc>)
 8008d98:	8819      	ldrh	r1, [r3, #0]
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <PrepareFrame+0x1a0>)
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	b290      	uxth	r0, r2
 8008da2:	4a2d      	ldr	r2, [pc, #180]	; (8008e58 <PrepareFrame+0x1a0>)
 8008da4:	8010      	strh	r0, [r2, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	b2c9      	uxtb	r1, r1
 8008daa:	4b2e      	ldr	r3, [pc, #184]	; (8008e64 <PrepareFrame+0x1ac>)
 8008dac:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 8008dae:	4b31      	ldr	r3, [pc, #196]	; (8008e74 <PrepareFrame+0x1bc>)
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	b299      	uxth	r1, r3
 8008db6:	4b28      	ldr	r3, [pc, #160]	; (8008e58 <PrepareFrame+0x1a0>)
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	b290      	uxth	r0, r2
 8008dbe:	4a26      	ldr	r2, [pc, #152]	; (8008e58 <PrepareFrame+0x1a0>)
 8008dc0:	8010      	strh	r0, [r2, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	b2c9      	uxtb	r1, r1
 8008dc6:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <PrepareFrame+0x1ac>)
 8008dc8:	5499      	strb	r1, [r3, r2]

            LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 8008dca:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <PrepareFrame+0x1a0>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	b299      	uxth	r1, r3
 8008dd2:	4b29      	ldr	r3, [pc, #164]	; (8008e78 <PrepareFrame+0x1c0>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	f107 0310 	add.w	r3, r7, #16
 8008dda:	4822      	ldr	r0, [pc, #136]	; (8008e64 <PrepareFrame+0x1ac>)
 8008ddc:	f001 fd18 	bl	800a810 <LoRaMacJoinComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 8008de0:	6939      	ldr	r1, [r7, #16]
 8008de2:	4b1d      	ldr	r3, [pc, #116]	; (8008e58 <PrepareFrame+0x1a0>)
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	b290      	uxth	r0, r2
 8008dea:	4a1b      	ldr	r2, [pc, #108]	; (8008e58 <PrepareFrame+0x1a0>)
 8008dec:	8010      	strh	r0, [r2, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	b2c9      	uxtb	r1, r1
 8008df2:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <PrepareFrame+0x1ac>)
 8008df4:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	0a19      	lsrs	r1, r3, #8
 8008dfa:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <PrepareFrame+0x1a0>)
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	b290      	uxth	r0, r2
 8008e02:	4a15      	ldr	r2, [pc, #84]	; (8008e58 <PrepareFrame+0x1a0>)
 8008e04:	8010      	strh	r0, [r2, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	b2c9      	uxtb	r1, r1
 8008e0a:	4b16      	ldr	r3, [pc, #88]	; (8008e64 <PrepareFrame+0x1ac>)
 8008e0c:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	0c19      	lsrs	r1, r3, #16
 8008e12:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <PrepareFrame+0x1a0>)
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	b290      	uxth	r0, r2
 8008e1a:	4a0f      	ldr	r2, [pc, #60]	; (8008e58 <PrepareFrame+0x1a0>)
 8008e1c:	8010      	strh	r0, [r2, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	b2c9      	uxtb	r1, r1
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <PrepareFrame+0x1ac>)
 8008e24:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	0e19      	lsrs	r1, r3, #24
 8008e2a:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <PrepareFrame+0x1a0>)
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	b290      	uxth	r0, r2
 8008e32:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <PrepareFrame+0x1a0>)
 8008e34:	8010      	strh	r0, [r2, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	b2c9      	uxtb	r1, r1
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <PrepareFrame+0x1ac>)
 8008e3c:	5499      	strb	r1, [r3, r2]

            break;
 8008e3e:	e1a9      	b.n	8009194 <PrepareFrame+0x4dc>
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            NodeAckRequested = true;
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <PrepareFrame+0x1a4>)
 8008e42:	2201      	movs	r2, #1
 8008e44:	701a      	strb	r2, [r3, #0]
            //Intentional fallthrough
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            if( IsLoRaMacNetworkJoined == false )
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <PrepareFrame+0x1c4>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f083 0301 	eor.w	r3, r3, #1
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d015      	beq.n	8008e80 <PrepareFrame+0x1c8>
            {
                return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 8008e54:	2307      	movs	r3, #7
 8008e56:	e19e      	b.n	8009196 <PrepareFrame+0x4de>
 8008e58:	200002f8 	.word	0x200002f8
 8008e5c:	2000040c 	.word	0x2000040c
 8008e60:	200002fa 	.word	0x200002fa
 8008e64:	200001f8 	.word	0x200001f8
 8008e68:	200001bc 	.word	0x200001bc
 8008e6c:	200001b8 	.word	0x200001b8
 8008e70:	080127e4 	.word	0x080127e4
 8008e74:	200001e4 	.word	0x200001e4
 8008e78:	200001c0 	.word	0x200001c0
 8008e7c:	20000405 	.word	0x20000405
            }

            fCtrl->Bits.AdrAckReq = AdrNextDr( fCtrl->Bits.Adr, true, &LoRaMacParams.ChannelsDatarate );
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf14      	ite	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	2300      	moveq	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	4a7a      	ldr	r2, [pc, #488]	; (8009080 <PrepareFrame+0x3c8>)
 8008e96:	2101      	movs	r1, #1
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe ff5f 	bl	8007d5c <AdrNextDr>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	7813      	ldrb	r3, [r2, #0]
 8008ea6:	f361 1386 	bfi	r3, r1, #6, #1
 8008eaa:	7013      	strb	r3, [r2, #0]

            if( SrvAckRequested == true )
 8008eac:	4b75      	ldr	r3, [pc, #468]	; (8009084 <PrepareFrame+0x3cc>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d007      	beq.n	8008ec4 <PrepareFrame+0x20c>
            {
                SrvAckRequested = false;
 8008eb4:	4b73      	ldr	r3, [pc, #460]	; (8009084 <PrepareFrame+0x3cc>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
                fCtrl->Bits.Ack = 1;
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	7813      	ldrb	r3, [r2, #0]
 8008ebe:	f043 0320 	orr.w	r3, r3, #32
 8008ec2:	7013      	strb	r3, [r2, #0]
            }

            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 8008ec4:	4b70      	ldr	r3, [pc, #448]	; (8009088 <PrepareFrame+0x3d0>)
 8008ec6:	6819      	ldr	r1, [r3, #0]
 8008ec8:	7f7b      	ldrb	r3, [r7, #29]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	777a      	strb	r2, [r7, #29]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	b2c9      	uxtb	r1, r1
 8008ed2:	4b6e      	ldr	r3, [pc, #440]	; (800908c <PrepareFrame+0x3d4>)
 8008ed4:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 8008ed6:	4b6c      	ldr	r3, [pc, #432]	; (8009088 <PrepareFrame+0x3d0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	0a19      	lsrs	r1, r3, #8
 8008edc:	7f7b      	ldrb	r3, [r7, #29]
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	777a      	strb	r2, [r7, #29]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	b2c9      	uxtb	r1, r1
 8008ee6:	4b69      	ldr	r3, [pc, #420]	; (800908c <PrepareFrame+0x3d4>)
 8008ee8:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 8008eea:	4b67      	ldr	r3, [pc, #412]	; (8009088 <PrepareFrame+0x3d0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	0c19      	lsrs	r1, r3, #16
 8008ef0:	7f7b      	ldrb	r3, [r7, #29]
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	777a      	strb	r2, [r7, #29]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	b2c9      	uxtb	r1, r1
 8008efa:	4b64      	ldr	r3, [pc, #400]	; (800908c <PrepareFrame+0x3d4>)
 8008efc:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 8008efe:	4b62      	ldr	r3, [pc, #392]	; (8009088 <PrepareFrame+0x3d0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	0e19      	lsrs	r1, r3, #24
 8008f04:	7f7b      	ldrb	r3, [r7, #29]
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	777a      	strb	r2, [r7, #29]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	b2c9      	uxtb	r1, r1
 8008f0e:	4b5f      	ldr	r3, [pc, #380]	; (800908c <PrepareFrame+0x3d4>)
 8008f10:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 8008f12:	7f7b      	ldrb	r3, [r7, #29]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	777a      	strb	r2, [r7, #29]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	7819      	ldrb	r1, [r3, #0]
 8008f1e:	4b5b      	ldr	r3, [pc, #364]	; (800908c <PrepareFrame+0x3d4>)
 8008f20:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 8008f22:	4b5b      	ldr	r3, [pc, #364]	; (8009090 <PrepareFrame+0x3d8>)
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	7f7b      	ldrb	r3, [r7, #29]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	777a      	strb	r2, [r7, #29]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	b2c9      	uxtb	r1, r1
 8008f30:	4b56      	ldr	r3, [pc, #344]	; (800908c <PrepareFrame+0x3d4>)
 8008f32:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8008f34:	4b56      	ldr	r3, [pc, #344]	; (8009090 <PrepareFrame+0x3d8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	0a19      	lsrs	r1, r3, #8
 8008f3a:	7f7b      	ldrb	r3, [r7, #29]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	777a      	strb	r2, [r7, #29]
 8008f40:	461a      	mov	r2, r3
 8008f42:	b2c9      	uxtb	r1, r1
 8008f44:	4b51      	ldr	r3, [pc, #324]	; (800908c <PrepareFrame+0x3d4>)
 8008f46:	5499      	strb	r1, [r3, r2]

            // Copy the MAC commands which must be re-send into the MAC command buffer
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 8008f48:	4b52      	ldr	r3, [pc, #328]	; (8009094 <PrepareFrame+0x3dc>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b52      	ldr	r3, [pc, #328]	; (8009098 <PrepareFrame+0x3e0>)
 8008f50:	18d0      	adds	r0, r2, r3
 8008f52:	4b52      	ldr	r3, [pc, #328]	; (800909c <PrepareFrame+0x3e4>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4951      	ldr	r1, [pc, #324]	; (80090a0 <PrepareFrame+0x3e8>)
 8008f5c:	f008 fbe3 	bl	8011726 <memcpy1>
            MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 8008f60:	4b4c      	ldr	r3, [pc, #304]	; (8009094 <PrepareFrame+0x3dc>)
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	4b4d      	ldr	r3, [pc, #308]	; (800909c <PrepareFrame+0x3e4>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	4413      	add	r3, r2
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	4b49      	ldr	r3, [pc, #292]	; (8009094 <PrepareFrame+0x3dc>)
 8008f6e:	701a      	strb	r2, [r3, #0]

            if( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d037      	beq.n	8008fe6 <PrepareFrame+0x32e>
 8008f76:	4b4b      	ldr	r3, [pc, #300]	; (80090a4 <PrepareFrame+0x3ec>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d033      	beq.n	8008fe6 <PrepareFrame+0x32e>
            {
                if( ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_LENGTH ) && ( MacCommandsInNextTx == true ) )
 8008f7e:	4b45      	ldr	r3, [pc, #276]	; (8009094 <PrepareFrame+0x3dc>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b0f      	cmp	r3, #15
 8008f84:	d840      	bhi.n	8009008 <PrepareFrame+0x350>
 8008f86:	4b48      	ldr	r3, [pc, #288]	; (80090a8 <PrepareFrame+0x3f0>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d03c      	beq.n	8009008 <PrepareFrame+0x350>
                {
                    fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4b3e      	ldr	r3, [pc, #248]	; (8009094 <PrepareFrame+0x3dc>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	b2d9      	uxtb	r1, r3
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	7813      	ldrb	r3, [r2, #0]
 8008fac:	f361 0303 	bfi	r3, r1, #0, #4
 8008fb0:	7013      	strb	r3, [r2, #0]

                    // Update FCtrl field with new value of OptionsLength
                    LoRaMacBuffer[0x05] = fCtrl->Value;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	781a      	ldrb	r2, [r3, #0]
 8008fb6:	4b35      	ldr	r3, [pc, #212]	; (800908c <PrepareFrame+0x3d4>)
 8008fb8:	715a      	strb	r2, [r3, #5]
                    for( i = 0; i < MacCommandsBufferIndex; i++ )
 8008fba:	2300      	movs	r3, #0
 8008fbc:	83fb      	strh	r3, [r7, #30]
 8008fbe:	e00b      	b.n	8008fd8 <PrepareFrame+0x320>
                    {
                        LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 8008fc0:	8bfa      	ldrh	r2, [r7, #30]
 8008fc2:	7f7b      	ldrb	r3, [r7, #29]
 8008fc4:	1c59      	adds	r1, r3, #1
 8008fc6:	7779      	strb	r1, [r7, #29]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4b33      	ldr	r3, [pc, #204]	; (8009098 <PrepareFrame+0x3e0>)
 8008fcc:	5c9a      	ldrb	r2, [r3, r2]
 8008fce:	4b2f      	ldr	r3, [pc, #188]	; (800908c <PrepareFrame+0x3d4>)
 8008fd0:	545a      	strb	r2, [r3, r1]
                    for( i = 0; i < MacCommandsBufferIndex; i++ )
 8008fd2:	8bfb      	ldrh	r3, [r7, #30]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	83fb      	strh	r3, [r7, #30]
 8008fd8:	4b2e      	ldr	r3, [pc, #184]	; (8009094 <PrepareFrame+0x3dc>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	8bfa      	ldrh	r2, [r7, #30]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d3ed      	bcc.n	8008fc0 <PrepareFrame+0x308>
                if( ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_LENGTH ) && ( MacCommandsInNextTx == true ) )
 8008fe4:	e010      	b.n	8009008 <PrepareFrame+0x350>
                    }
                }
            }
            else
            {
                if( ( MacCommandsBufferIndex > 0 ) && ( MacCommandsInNextTx ) )
 8008fe6:	4b2b      	ldr	r3, [pc, #172]	; (8009094 <PrepareFrame+0x3dc>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <PrepareFrame+0x352>
 8008fee:	4b2e      	ldr	r3, [pc, #184]	; (80090a8 <PrepareFrame+0x3f0>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <PrepareFrame+0x352>
                {
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 8008ff6:	4b27      	ldr	r3, [pc, #156]	; (8009094 <PrepareFrame+0x3dc>)
 8008ff8:	781a      	ldrb	r2, [r3, #0]
 8008ffa:	4b2a      	ldr	r3, [pc, #168]	; (80090a4 <PrepareFrame+0x3ec>)
 8008ffc:	701a      	strb	r2, [r3, #0]
                    payload = MacCommandsBuffer;
 8008ffe:	4b26      	ldr	r3, [pc, #152]	; (8009098 <PrepareFrame+0x3e0>)
 8009000:	61bb      	str	r3, [r7, #24]
                    framePort = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
 8009006:	e000      	b.n	800900a <PrepareFrame+0x352>
                if( ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_LENGTH ) && ( MacCommandsInNextTx == true ) )
 8009008:	bf00      	nop
                }
            }
            MacCommandsInNextTx = false;
 800900a:	4b27      	ldr	r3, [pc, #156]	; (80090a8 <PrepareFrame+0x3f0>)
 800900c:	2200      	movs	r2, #0
 800900e:	701a      	strb	r2, [r3, #0]
            // Store MAC commands which must be re-send in case the device does not receive a downlink anymore
            MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat( MacCommandsBuffer, MacCommandsBufferIndex, MacCommandsBufferToRepeat );
 8009010:	4b20      	ldr	r3, [pc, #128]	; (8009094 <PrepareFrame+0x3dc>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4a22      	ldr	r2, [pc, #136]	; (80090a0 <PrepareFrame+0x3e8>)
 8009016:	4619      	mov	r1, r3
 8009018:	481f      	ldr	r0, [pc, #124]	; (8009098 <PrepareFrame+0x3e0>)
 800901a:	f7fe fff9 	bl	8008010 <ParseMacCommandsToRepeat>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	4b1e      	ldr	r3, [pc, #120]	; (800909c <PrepareFrame+0x3e4>)
 8009024:	701a      	strb	r2, [r3, #0]
            if( MacCommandsBufferToRepeatIndex > 0 )
 8009026:	4b1d      	ldr	r3, [pc, #116]	; (800909c <PrepareFrame+0x3e4>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <PrepareFrame+0x37c>
            {
                MacCommandsInNextTx = true;
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <PrepareFrame+0x3f0>)
 8009030:	2201      	movs	r2, #1
 8009032:	701a      	strb	r2, [r3, #0]
            }

            if( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d04e      	beq.n	80090d8 <PrepareFrame+0x420>
 800903a:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <PrepareFrame+0x3ec>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d04a      	beq.n	80090d8 <PrepareFrame+0x420>
            {
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 8009042:	7f7b      	ldrb	r3, [r7, #29]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	777a      	strb	r2, [r7, #29]
 8009048:	4619      	mov	r1, r3
 800904a:	4a10      	ldr	r2, [pc, #64]	; (800908c <PrepareFrame+0x3d4>)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	5453      	strb	r3, [r2, r1]

                if( framePort == 0 )
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d12c      	bne.n	80090b0 <PrepareFrame+0x3f8>
                {
                    LoRaMacPayloadEncrypt( (uint8_t* ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8009056:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <PrepareFrame+0x3ec>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b298      	uxth	r0, r3
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <PrepareFrame+0x3d0>)
 800905e:	681c      	ldr	r4, [r3, #0]
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <PrepareFrame+0x3d8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	7f7a      	ldrb	r2, [r7, #29]
 8009066:	4909      	ldr	r1, [pc, #36]	; (800908c <PrepareFrame+0x3d4>)
 8009068:	440a      	add	r2, r1
 800906a:	9202      	str	r2, [sp, #8]
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	2300      	movs	r3, #0
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	4623      	mov	r3, r4
 8009074:	4a0d      	ldr	r2, [pc, #52]	; (80090ac <PrepareFrame+0x3f4>)
 8009076:	4601      	mov	r1, r0
 8009078:	69b8      	ldr	r0, [r7, #24]
 800907a:	f001 fb0b 	bl	800a694 <LoRaMacPayloadEncrypt>
 800907e:	e02b      	b.n	80090d8 <PrepareFrame+0x420>
 8009080:	200009b1 	.word	0x200009b1
 8009084:	2000040d 	.word	0x2000040d
 8009088:	200001ec 	.word	0x200001ec
 800908c:	200001f8 	.word	0x200001f8
 8009090:	200003fc 	.word	0x200003fc
 8009094:	2000040f 	.word	0x2000040f
 8009098:	20000414 	.word	0x20000414
 800909c:	20000410 	.word	0x20000410
 80090a0:	20000424 	.word	0x20000424
 80090a4:	200002fa 	.word	0x200002fa
 80090a8:	2000040e 	.word	0x2000040e
 80090ac:	200001c4 	.word	0x200001c4
                }
                else
                {
                    LoRaMacPayloadEncrypt( (uint8_t* ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 80090b0:	4b3b      	ldr	r3, [pc, #236]	; (80091a0 <PrepareFrame+0x4e8>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	b298      	uxth	r0, r3
 80090b6:	4b3b      	ldr	r3, [pc, #236]	; (80091a4 <PrepareFrame+0x4ec>)
 80090b8:	681c      	ldr	r4, [r3, #0]
 80090ba:	4b3b      	ldr	r3, [pc, #236]	; (80091a8 <PrepareFrame+0x4f0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	7f7a      	ldrb	r2, [r7, #29]
 80090c0:	493a      	ldr	r1, [pc, #232]	; (80091ac <PrepareFrame+0x4f4>)
 80090c2:	440a      	add	r2, r1
 80090c4:	9202      	str	r2, [sp, #8]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	2300      	movs	r3, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	4623      	mov	r3, r4
 80090ce:	4a38      	ldr	r2, [pc, #224]	; (80091b0 <PrepareFrame+0x4f8>)
 80090d0:	4601      	mov	r1, r0
 80090d2:	69b8      	ldr	r0, [r7, #24]
 80090d4:	f001 fade 	bl	800a694 <LoRaMacPayloadEncrypt>
                }
            }
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 80090d8:	7f7b      	ldrb	r3, [r7, #29]
 80090da:	b29a      	uxth	r2, r3
 80090dc:	4b30      	ldr	r3, [pc, #192]	; (80091a0 <PrepareFrame+0x4e8>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	4b33      	ldr	r3, [pc, #204]	; (80091b4 <PrepareFrame+0x4fc>)
 80090e8:	801a      	strh	r2, [r3, #0]

            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 80090ea:	4b32      	ldr	r3, [pc, #200]	; (80091b4 <PrepareFrame+0x4fc>)
 80090ec:	8819      	ldrh	r1, [r3, #0]
 80090ee:	4b2d      	ldr	r3, [pc, #180]	; (80091a4 <PrepareFrame+0x4ec>)
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	4b2d      	ldr	r3, [pc, #180]	; (80091a8 <PrepareFrame+0x4f0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f107 0210 	add.w	r2, r7, #16
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	2300      	movs	r3, #0
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4603      	mov	r3, r0
 8009104:	4a2c      	ldr	r2, [pc, #176]	; (80091b8 <PrepareFrame+0x500>)
 8009106:	4829      	ldr	r0, [pc, #164]	; (80091ac <PrepareFrame+0x4f4>)
 8009108:	f001 fa5e 	bl	800a5c8 <LoRaMacComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 800910c:	6939      	ldr	r1, [r7, #16]
 800910e:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <PrepareFrame+0x4fc>)
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	b2c9      	uxtb	r1, r1
 8009116:	4b25      	ldr	r3, [pc, #148]	; (80091ac <PrepareFrame+0x4f4>)
 8009118:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	0a1a      	lsrs	r2, r3, #8
 800911e:	4b25      	ldr	r3, [pc, #148]	; (80091b4 <PrepareFrame+0x4fc>)
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	b2d1      	uxtb	r1, r2
 8009126:	4a21      	ldr	r2, [pc, #132]	; (80091ac <PrepareFrame+0x4f4>)
 8009128:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	0c1a      	lsrs	r2, r3, #16
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <PrepareFrame+0x4fc>)
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	3302      	adds	r3, #2
 8009134:	b2d1      	uxtb	r1, r2
 8009136:	4a1d      	ldr	r2, [pc, #116]	; (80091ac <PrepareFrame+0x4f4>)
 8009138:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	0e1a      	lsrs	r2, r3, #24
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <PrepareFrame+0x4fc>)
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	3303      	adds	r3, #3
 8009144:	b2d1      	uxtb	r1, r2
 8009146:	4a19      	ldr	r2, [pc, #100]	; (80091ac <PrepareFrame+0x4f4>)
 8009148:	54d1      	strb	r1, [r2, r3]

            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 800914a:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <PrepareFrame+0x4fc>)
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	3304      	adds	r3, #4
 8009150:	b29a      	uxth	r2, r3
 8009152:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <PrepareFrame+0x4fc>)
 8009154:	801a      	strh	r2, [r3, #0]

            break;
 8009156:	e01d      	b.n	8009194 <PrepareFrame+0x4dc>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) )
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d019      	beq.n	8009192 <PrepareFrame+0x4da>
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <PrepareFrame+0x4e8>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d015      	beq.n	8009192 <PrepareFrame+0x4da>
            {
                memcpy1( LoRaMacBuffer + pktHeaderLen, ( uint8_t* ) fBuffer, LoRaMacTxPayloadLen );
 8009166:	7f7b      	ldrb	r3, [r7, #29]
 8009168:	4a10      	ldr	r2, [pc, #64]	; (80091ac <PrepareFrame+0x4f4>)
 800916a:	1898      	adds	r0, r3, r2
 800916c:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <PrepareFrame+0x4e8>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	f008 fad6 	bl	8011726 <memcpy1>
                LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 800917a:	7f7b      	ldrb	r3, [r7, #29]
 800917c:	b29a      	uxth	r2, r3
 800917e:	4b08      	ldr	r3, [pc, #32]	; (80091a0 <PrepareFrame+0x4e8>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	4413      	add	r3, r2
 8009186:	b29a      	uxth	r2, r3
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <PrepareFrame+0x4fc>)
 800918a:	801a      	strh	r2, [r3, #0]
            }
            break;
 800918c:	e001      	b.n	8009192 <PrepareFrame+0x4da>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800918e:	2302      	movs	r3, #2
 8009190:	e001      	b.n	8009196 <PrepareFrame+0x4de>
            break;
 8009192:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3724      	adds	r7, #36	; 0x24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd90      	pop	{r4, r7, pc}
 800919e:	bf00      	nop
 80091a0:	200002fa 	.word	0x200002fa
 80091a4:	200001ec 	.word	0x200001ec
 80091a8:	200003fc 	.word	0x200003fc
 80091ac:	200001f8 	.word	0x200001f8
 80091b0:	200001d4 	.word	0x200001d4
 80091b4:	200002f8 	.word	0x200002f8
 80091b8:	200001c4 	.word	0x200001c4

080091bc <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( ChannelParams_t channel )
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b08f      	sub	sp, #60	; 0x3c
 80091c0:	af0a      	add	r7, sp, #40	; 0x28
 80091c2:	463b      	mov	r3, r7
 80091c4:	e883 0003 	stmia.w	r3, {r0, r1}
    int8_t datarate = Datarates[LoRaMacParams.ChannelsDatarate];
 80091c8:	4b89      	ldr	r3, [pc, #548]	; (80093f0 <SendFrameOnChannel+0x234>)
 80091ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b88      	ldr	r3, [pc, #544]	; (80093f4 <SendFrameOnChannel+0x238>)
 80091d2:	5c9b      	ldrb	r3, [r3, r2]
 80091d4:	73fb      	strb	r3, [r7, #15]
    int8_t txPowerIndex = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73bb      	strb	r3, [r7, #14]
    int8_t txPower = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	737b      	strb	r3, [r7, #13]

    txPowerIndex = LimitTxPower( LoRaMacParams.ChannelsTxPower, Bands[channel.Band].TxMaxPower );
 80091de:	4b84      	ldr	r3, [pc, #528]	; (80093f0 <SendFrameOnChannel+0x234>)
 80091e0:	f993 0000 	ldrsb.w	r0, [r3]
 80091e4:	797b      	ldrb	r3, [r7, #5]
 80091e6:	4619      	mov	r1, r3
 80091e8:	4a83      	ldr	r2, [pc, #524]	; (80093f8 <SendFrameOnChannel+0x23c>)
 80091ea:	460b      	mov	r3, r1
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	440b      	add	r3, r1
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	3302      	adds	r3, #2
 80091f6:	f993 3000 	ldrsb.w	r3, [r3]
 80091fa:	4619      	mov	r1, r3
 80091fc:	f7fe fd48 	bl	8007c90 <LimitTxPower>
 8009200:	4603      	mov	r3, r0
 8009202:	73bb      	strb	r3, [r7, #14]
    txPower = TxPowers[txPowerIndex];
 8009204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009208:	4a7c      	ldr	r2, [pc, #496]	; (80093fc <SendFrameOnChannel+0x240>)
 800920a:	5cd3      	ldrb	r3, [r2, r3]
 800920c:	737b      	strb	r3, [r7, #13]

    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800920e:	4b7c      	ldr	r3, [pc, #496]	; (8009400 <SendFrameOnChannel+0x244>)
 8009210:	2201      	movs	r2, #1
 8009212:	705a      	strb	r2, [r3, #1]
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009214:	4b7b      	ldr	r3, [pc, #492]	; (8009404 <SendFrameOnChannel+0x248>)
 8009216:	2201      	movs	r2, #1
 8009218:	705a      	strb	r2, [r3, #1]
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800921a:	4b75      	ldr	r3, [pc, #468]	; (80093f0 <SendFrameOnChannel+0x234>)
 800921c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009220:	b2da      	uxtb	r2, r3
 8009222:	4b78      	ldr	r3, [pc, #480]	; (8009404 <SendFrameOnChannel+0x248>)
 8009224:	709a      	strb	r2, [r3, #2]
    McpsConfirm.TxPower = txPowerIndex;
 8009226:	4a77      	ldr	r2, [pc, #476]	; (8009404 <SendFrameOnChannel+0x248>)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	70d3      	strb	r3, [r2, #3]
    McpsConfirm.UpLinkFrequency = channel.Frequency;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	4a75      	ldr	r2, [pc, #468]	; (8009404 <SendFrameOnChannel+0x248>)
 8009230:	6113      	str	r3, [r2, #16]

    Radio.SetChannel( channel.Frequency );
 8009232:	4b75      	ldr	r3, [pc, #468]	; (8009408 <SendFrameOnChannel+0x24c>)
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    if( LoRaMacParams.ChannelsDatarate == DR_7 )
 800923c:	4b6c      	ldr	r3, [pc, #432]	; (80093f0 <SendFrameOnChannel+0x234>)
 800923e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009242:	2b07      	cmp	r3, #7
 8009244:	d13f      	bne.n	80092c6 <SendFrameOnChannel+0x10a>
    { // High Speed FSK channel
        Radio.SetMaxPayloadLength( MODEM_FSK, LoRaMacBufferPktLen );
 8009246:	4b70      	ldr	r3, [pc, #448]	; (8009408 <SendFrameOnChannel+0x24c>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	4a70      	ldr	r2, [pc, #448]	; (800940c <SendFrameOnChannel+0x250>)
 800924c:	8812      	ldrh	r2, [r2, #0]
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	4611      	mov	r1, r2
 8009252:	2000      	movs	r0, #0
 8009254:	4798      	blx	r3
        Radio.SetTxConfig( MODEM_FSK, txPower, 25e3, 0, datarate * 1e3, 0, 5, false, true, 0, 0, false, 3e3 );
 8009256:	4b6c      	ldr	r3, [pc, #432]	; (8009408 <SendFrameOnChannel+0x24c>)
 8009258:	69dc      	ldr	r4, [r3, #28]
 800925a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800925e:	4618      	mov	r0, r3
 8009260:	f7f7 f8e8 	bl	8000434 <__aeabi_i2d>
 8009264:	f04f 0200 	mov.w	r2, #0
 8009268:	4b69      	ldr	r3, [pc, #420]	; (8009410 <SendFrameOnChannel+0x254>)
 800926a:	f7f7 f94d 	bl	8000508 <__aeabi_dmul>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4610      	mov	r0, r2
 8009274:	4619      	mov	r1, r3
 8009276:	f7f7 fc09 	bl	8000a8c <__aeabi_d2uiz>
 800927a:	4602      	mov	r2, r0
 800927c:	f997 100d 	ldrsb.w	r1, [r7, #13]
 8009280:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	2300      	movs	r3, #0
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	2300      	movs	r3, #0
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	2300      	movs	r3, #0
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	2301      	movs	r3, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	2300      	movs	r3, #0
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	2305      	movs	r3, #5
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	2300      	movs	r3, #0
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	9200      	str	r2, [sp, #0]
 80092a4:	2300      	movs	r3, #0
 80092a6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80092aa:	2000      	movs	r0, #0
 80092ac:	47a0      	blx	r4
        TxTimeOnAir = Radio.TimeOnAir( MODEM_FSK, LoRaMacBufferPktLen );
 80092ae:	4b56      	ldr	r3, [pc, #344]	; (8009408 <SendFrameOnChannel+0x24c>)
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	4a56      	ldr	r2, [pc, #344]	; (800940c <SendFrameOnChannel+0x250>)
 80092b4:	8812      	ldrh	r2, [r2, #0]
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	4611      	mov	r1, r2
 80092ba:	2000      	movs	r0, #0
 80092bc:	4798      	blx	r3
 80092be:	4602      	mov	r2, r0
 80092c0:	4b54      	ldr	r3, [pc, #336]	; (8009414 <SendFrameOnChannel+0x258>)
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e063      	b.n	800938e <SendFrameOnChannel+0x1d2>

    }
    else if( LoRaMacParams.ChannelsDatarate == DR_6 )
 80092c6:	4b4a      	ldr	r3, [pc, #296]	; (80093f0 <SendFrameOnChannel+0x234>)
 80092c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80092cc:	2b06      	cmp	r3, #6
 80092ce:	d12f      	bne.n	8009330 <SendFrameOnChannel+0x174>
    { // High speed LoRa channel
        Radio.SetMaxPayloadLength( MODEM_LORA, LoRaMacBufferPktLen );
 80092d0:	4b4d      	ldr	r3, [pc, #308]	; (8009408 <SendFrameOnChannel+0x24c>)
 80092d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d4:	4a4d      	ldr	r2, [pc, #308]	; (800940c <SendFrameOnChannel+0x250>)
 80092d6:	8812      	ldrh	r2, [r2, #0]
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	4611      	mov	r1, r2
 80092dc:	2001      	movs	r0, #1
 80092de:	4798      	blx	r3
        Radio.SetTxConfig( MODEM_LORA, txPower, 0, 1, datarate, 1, 8, false, true, 0, 0, false, 3e3 );
 80092e0:	4b49      	ldr	r3, [pc, #292]	; (8009408 <SendFrameOnChannel+0x24c>)
 80092e2:	69dc      	ldr	r4, [r3, #28]
 80092e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e8:	f997 100d 	ldrsb.w	r1, [r7, #13]
 80092ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80092f0:	9208      	str	r2, [sp, #32]
 80092f2:	2200      	movs	r2, #0
 80092f4:	9207      	str	r2, [sp, #28]
 80092f6:	2200      	movs	r2, #0
 80092f8:	9206      	str	r2, [sp, #24]
 80092fa:	2200      	movs	r2, #0
 80092fc:	9205      	str	r2, [sp, #20]
 80092fe:	2201      	movs	r2, #1
 8009300:	9204      	str	r2, [sp, #16]
 8009302:	2200      	movs	r2, #0
 8009304:	9203      	str	r2, [sp, #12]
 8009306:	2208      	movs	r2, #8
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	2201      	movs	r2, #1
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	2301      	movs	r3, #1
 8009312:	2200      	movs	r2, #0
 8009314:	2001      	movs	r0, #1
 8009316:	47a0      	blx	r4
        TxTimeOnAir = Radio.TimeOnAir( MODEM_LORA, LoRaMacBufferPktLen );
 8009318:	4b3b      	ldr	r3, [pc, #236]	; (8009408 <SendFrameOnChannel+0x24c>)
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	4a3b      	ldr	r2, [pc, #236]	; (800940c <SendFrameOnChannel+0x250>)
 800931e:	8812      	ldrh	r2, [r2, #0]
 8009320:	b2d2      	uxtb	r2, r2
 8009322:	4611      	mov	r1, r2
 8009324:	2001      	movs	r0, #1
 8009326:	4798      	blx	r3
 8009328:	4602      	mov	r2, r0
 800932a:	4b3a      	ldr	r3, [pc, #232]	; (8009414 <SendFrameOnChannel+0x258>)
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	e02e      	b.n	800938e <SendFrameOnChannel+0x1d2>
    }
    else
    { // Normal LoRa channel
        Radio.SetMaxPayloadLength( MODEM_LORA, LoRaMacBufferPktLen );
 8009330:	4b35      	ldr	r3, [pc, #212]	; (8009408 <SendFrameOnChannel+0x24c>)
 8009332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009334:	4a35      	ldr	r2, [pc, #212]	; (800940c <SendFrameOnChannel+0x250>)
 8009336:	8812      	ldrh	r2, [r2, #0]
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	4611      	mov	r1, r2
 800933c:	2001      	movs	r0, #1
 800933e:	4798      	blx	r3
        Radio.SetTxConfig( MODEM_LORA, txPower, 0, 0, datarate, 1, 8, false, true, 0, 0, false, 3e3 );
 8009340:	4b31      	ldr	r3, [pc, #196]	; (8009408 <SendFrameOnChannel+0x24c>)
 8009342:	69dc      	ldr	r4, [r3, #28]
 8009344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009348:	f997 100d 	ldrsb.w	r1, [r7, #13]
 800934c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009350:	9208      	str	r2, [sp, #32]
 8009352:	2200      	movs	r2, #0
 8009354:	9207      	str	r2, [sp, #28]
 8009356:	2200      	movs	r2, #0
 8009358:	9206      	str	r2, [sp, #24]
 800935a:	2200      	movs	r2, #0
 800935c:	9205      	str	r2, [sp, #20]
 800935e:	2201      	movs	r2, #1
 8009360:	9204      	str	r2, [sp, #16]
 8009362:	2200      	movs	r2, #0
 8009364:	9203      	str	r2, [sp, #12]
 8009366:	2208      	movs	r2, #8
 8009368:	9202      	str	r2, [sp, #8]
 800936a:	2201      	movs	r2, #1
 800936c:	9201      	str	r2, [sp, #4]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	2200      	movs	r2, #0
 8009374:	2001      	movs	r0, #1
 8009376:	47a0      	blx	r4
        TxTimeOnAir = Radio.TimeOnAir( MODEM_LORA, LoRaMacBufferPktLen );
 8009378:	4b23      	ldr	r3, [pc, #140]	; (8009408 <SendFrameOnChannel+0x24c>)
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	4a23      	ldr	r2, [pc, #140]	; (800940c <SendFrameOnChannel+0x250>)
 800937e:	8812      	ldrh	r2, [r2, #0]
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	4611      	mov	r1, r2
 8009384:	2001      	movs	r0, #1
 8009386:	4798      	blx	r3
 8009388:	4602      	mov	r2, r0
 800938a:	4b22      	ldr	r3, [pc, #136]	; (8009414 <SendFrameOnChannel+0x258>)
 800938c:	601a      	str	r2, [r3, #0]
#else
    #error "Please define a frequency band in the compiler options."
#endif

    // Store the time on air
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 800938e:	4b21      	ldr	r3, [pc, #132]	; (8009414 <SendFrameOnChannel+0x258>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <SendFrameOnChannel+0x248>)
 8009394:	6093      	str	r3, [r2, #8]
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 8009396:	4b1f      	ldr	r3, [pc, #124]	; (8009414 <SendFrameOnChannel+0x258>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a19      	ldr	r2, [pc, #100]	; (8009400 <SendFrameOnChannel+0x244>)
 800939c:	6053      	str	r3, [r2, #4]

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 800939e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093a2:	481d      	ldr	r0, [pc, #116]	; (8009418 <SendFrameOnChannel+0x25c>)
 80093a4:	f007 fe10 	bl	8010fc8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 80093a8:	481b      	ldr	r0, [pc, #108]	; (8009418 <SendFrameOnChannel+0x25c>)
 80093aa:	f007 fc09 	bl	8010bc0 <TimerStart>

    if( IsLoRaMacNetworkJoined == false )
 80093ae:	4b1b      	ldr	r3, [pc, #108]	; (800941c <SendFrameOnChannel+0x260>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	f083 0301 	eor.w	r3, r3, #1
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <SendFrameOnChannel+0x20c>
    {
        JoinRequestTrials++;
 80093bc:	4b18      	ldr	r3, [pc, #96]	; (8009420 <SendFrameOnChannel+0x264>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	4b16      	ldr	r3, [pc, #88]	; (8009420 <SendFrameOnChannel+0x264>)
 80093c6:	701a      	strb	r2, [r3, #0]
    }

    // Send now
    Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
 80093c8:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <SendFrameOnChannel+0x24c>)
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	4a0f      	ldr	r2, [pc, #60]	; (800940c <SendFrameOnChannel+0x250>)
 80093ce:	8812      	ldrh	r2, [r2, #0]
 80093d0:	b2d2      	uxtb	r2, r2
 80093d2:	4611      	mov	r1, r2
 80093d4:	4813      	ldr	r0, [pc, #76]	; (8009424 <SendFrameOnChannel+0x268>)
 80093d6:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 80093d8:	4b13      	ldr	r3, [pc, #76]	; (8009428 <SendFrameOnChannel+0x26c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f043 0301 	orr.w	r3, r3, #1
 80093e0:	4a11      	ldr	r2, [pc, #68]	; (8009428 <SendFrameOnChannel+0x26c>)
 80093e2:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200009b0 	.word	0x200009b0
 80093f4:	0801248c 	.word	0x0801248c
 80093f8:	2000000c 	.word	0x2000000c
 80093fc:	080124c4 	.word	0x080124c4
 8009400:	2000052c 	.word	0x2000052c
 8009404:	20000518 	.word	0x20000518
 8009408:	080127e4 	.word	0x080127e4
 800940c:	200002f8 	.word	0x200002f8
 8009410:	408f4000 	.word	0x408f4000
 8009414:	200004f8 	.word	0x200004f8
 8009418:	2000044c 	.word	0x2000044c
 800941c:	20000405 	.word	0x20000405
 8009420:	200004fc 	.word	0x200004fc
 8009424:	200001f8 	.word	0x200001f8
 8009428:	20000448 	.word	0x20000448

0800942c <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	80fb      	strh	r3, [r7, #6]
    int8_t txPowerIndex = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	73bb      	strb	r3, [r7, #14]

    txPowerIndex = LimitTxPower( LoRaMacParams.ChannelsTxPower, Bands[Channels[Channel].Band].TxMaxPower );
 800943e:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <SetTxContinuousWave+0x8c>)
 8009440:	f993 0000 	ldrsb.w	r0, [r3]
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <SetTxContinuousWave+0x90>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <SetTxContinuousWave+0x94>)
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	795b      	ldrb	r3, [r3, #5]
 8009450:	4619      	mov	r1, r3
 8009452:	4a1c      	ldr	r2, [pc, #112]	; (80094c4 <SetTxContinuousWave+0x98>)
 8009454:	460b      	mov	r3, r1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	440b      	add	r3, r1
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	3302      	adds	r3, #2
 8009460:	f993 3000 	ldrsb.w	r3, [r3]
 8009464:	4619      	mov	r1, r3
 8009466:	f7fe fc13 	bl	8007c90 <LimitTxPower>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
    txPower = TxPowers[txPowerIndex];
 800946e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009472:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <SetTxContinuousWave+0x9c>)
 8009474:	5cd3      	ldrb	r3, [r2, r3]
 8009476:	73bb      	strb	r3, [r7, #14]

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8009478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800947c:	4813      	ldr	r0, [pc, #76]	; (80094cc <SetTxContinuousWave+0xa0>)
 800947e:	f007 fda3 	bl	8010fc8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8009482:	4812      	ldr	r0, [pc, #72]	; (80094cc <SetTxContinuousWave+0xa0>)
 8009484:	f007 fb9c 	bl	8010bc0 <TimerStart>

    Radio.SetTxContinuousWave( Channels[Channel].Frequency, txPower, timeout );
 8009488:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <SetTxContinuousWave+0xa4>)
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	4a0b      	ldr	r2, [pc, #44]	; (80094bc <SetTxContinuousWave+0x90>)
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	4611      	mov	r1, r2
 8009492:	4a0b      	ldr	r2, [pc, #44]	; (80094c0 <SetTxContinuousWave+0x94>)
 8009494:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8009498:	88fa      	ldrh	r2, [r7, #6]
 800949a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800949e:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <SetTxContinuousWave+0xa8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	4a0a      	ldr	r2, [pc, #40]	; (80094d4 <SetTxContinuousWave+0xa8>)
 80094aa:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200009b0 	.word	0x200009b0
 80094bc:	20000441 	.word	0x20000441
 80094c0:	20000048 	.word	0x20000048
 80094c4:	2000000c 	.word	0x2000000c
 80094c8:	080124c4 	.word	0x080124c4
 80094cc:	2000044c 	.word	0x2000044c
 80094d0:	080127e4 	.word	0x080127e4
 80094d4:	20000448 	.word	0x20000448

080094d8 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	80fb      	strh	r3, [r7, #6]
 80094e4:	4613      	mov	r3, r2
 80094e6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <SetTxContinuousWave1+0x44>)
 80094ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ec:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	6838      	ldr	r0, [r7, #0]
 80094f4:	4798      	blx	r3

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80094f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80094fa:	4809      	ldr	r0, [pc, #36]	; (8009520 <SetTxContinuousWave1+0x48>)
 80094fc:	f007 fd64 	bl	8010fc8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8009500:	4807      	ldr	r0, [pc, #28]	; (8009520 <SetTxContinuousWave1+0x48>)
 8009502:	f007 fb5d 	bl	8010bc0 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <SetTxContinuousWave1+0x4c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f043 0301 	orr.w	r3, r3, #1
 800950e:	4a05      	ldr	r2, [pc, #20]	; (8009524 <SetTxContinuousWave1+0x4c>)
 8009510:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	080127e4 	.word	0x080127e4
 8009520:	2000044c 	.word	0x2000044c
 8009524:	20000448 	.word	0x20000448

08009528 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
    if( primitives == NULL )
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <LoRaMacInitialization+0x14>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009538:	2303      	movs	r3, #3
 800953a:	e0c9      	b.n	80096d0 <LoRaMacInitialization+0x1a8>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <LoRaMacInitialization+0x2c>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <LoRaMacInitialization+0x2c>
        ( primitives->MacMlmeConfirm == NULL ) )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <LoRaMacInitialization+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009554:	2303      	movs	r3, #3
 8009556:	e0bb      	b.n	80096d0 <LoRaMacInitialization+0x1a8>
    }

    LoRaMacPrimitives = primitives;
 8009558:	4a5f      	ldr	r2, [pc, #380]	; (80096d8 <LoRaMacInitialization+0x1b0>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks = callbacks;
 800955e:	4a5f      	ldr	r2, [pc, #380]	; (80096dc <LoRaMacInitialization+0x1b4>)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	6013      	str	r3, [r2, #0]

    LoRaMacFlags.Value = 0;
 8009564:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <LoRaMacInitialization+0x1b8>)
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]

    LoRaMacDeviceClass = CLASS_A;
 800956a:	4b5e      	ldr	r3, [pc, #376]	; (80096e4 <LoRaMacInitialization+0x1bc>)
 800956c:	2200      	movs	r2, #0
 800956e:	701a      	strb	r2, [r3, #0]
    LoRaMacState = LORAMAC_IDLE;
 8009570:	4b5d      	ldr	r3, [pc, #372]	; (80096e8 <LoRaMacInitialization+0x1c0>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

    JoinRequestTrials = 0;
 8009576:	4b5d      	ldr	r3, [pc, #372]	; (80096ec <LoRaMacInitialization+0x1c4>)
 8009578:	2200      	movs	r2, #0
 800957a:	701a      	strb	r2, [r3, #0]
    MaxJoinRequestTrials = 1;
 800957c:	4b5c      	ldr	r3, [pc, #368]	; (80096f0 <LoRaMacInitialization+0x1c8>)
 800957e:	2201      	movs	r2, #1
 8009580:	701a      	strb	r2, [r3, #0]
    RepeaterSupport = false;
 8009582:	4b5c      	ldr	r3, [pc, #368]	; (80096f4 <LoRaMacInitialization+0x1cc>)
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]

    // Reset duty cycle times
    AggregatedLastTxDoneTime = 0;
 8009588:	4b5b      	ldr	r3, [pc, #364]	; (80096f8 <LoRaMacInitialization+0x1d0>)
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
    AggregatedTimeOff = 0;
 800958e:	4b5b      	ldr	r3, [pc, #364]	; (80096fc <LoRaMacInitialization+0x1d4>)
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
#elif defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL )
    DutyCycleOn = false;
#elif defined( USE_BAND_780 )
    DutyCycleOn = true;
#elif defined( USE_BAND_868 )
    DutyCycleOn = true;
 8009594:	4b5a      	ldr	r3, [pc, #360]	; (8009700 <LoRaMacInitialization+0x1d8>)
 8009596:	2201      	movs	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
#else
    #error "Please define a frequency band in the compiler options."
#endif

    // Reset to defaults
    LoRaMacParamsDefaults.ChannelsTxPower = LORAMAC_DEFAULT_TX_POWER;
 800959a:	4b5a      	ldr	r3, [pc, #360]	; (8009704 <LoRaMacInitialization+0x1dc>)
 800959c:	2201      	movs	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
    LoRaMacParamsDefaults.ChannelsDatarate = LORAMAC_DEFAULT_DATARATE;
 80095a0:	4b58      	ldr	r3, [pc, #352]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	705a      	strb	r2, [r3, #1]

    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 80095a6:	4b57      	ldr	r3, [pc, #348]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095a8:	220a      	movs	r2, #10
 80095aa:	605a      	str	r2, [r3, #4]
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 80095ac:	4b55      	ldr	r3, [pc, #340]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095ae:	2206      	movs	r2, #6
 80095b0:	721a      	strb	r2, [r3, #8]
    LoRaMacParamsDefaults.MaxRxWindow = MAX_RX_WINDOW;
 80095b2:	4b54      	ldr	r3, [pc, #336]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80095b8:	60da      	str	r2, [r3, #12]
    LoRaMacParamsDefaults.ReceiveDelay1 = RECEIVE_DELAY1;
 80095ba:	4b52      	ldr	r3, [pc, #328]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095c0:	611a      	str	r2, [r3, #16]
    LoRaMacParamsDefaults.ReceiveDelay2 = RECEIVE_DELAY2;
 80095c2:	4b50      	ldr	r3, [pc, #320]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80095c8:	615a      	str	r2, [r3, #20]
    LoRaMacParamsDefaults.JoinAcceptDelay1 = JOIN_ACCEPT_DELAY1;
 80095ca:	4b4e      	ldr	r3, [pc, #312]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d0:	619a      	str	r2, [r3, #24]
    LoRaMacParamsDefaults.JoinAcceptDelay2 = JOIN_ACCEPT_DELAY2;
 80095d2:	4b4c      	ldr	r3, [pc, #304]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095d4:	f241 7270 	movw	r2, #6000	; 0x1770
 80095d8:	61da      	str	r2, [r3, #28]

    LoRaMacParamsDefaults.ChannelsNbRep = 1;
 80095da:	4b4a      	ldr	r3, [pc, #296]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2020 	strb.w	r2, [r3, #32]
    LoRaMacParamsDefaults.Rx1DrOffset = 0;
 80095e2:	4b48      	ldr	r3, [pc, #288]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    LoRaMacParamsDefaults.Rx2Channel = ( Rx2ChannelParams_t )RX_WND_2_CHANNEL;
 80095ea:	4b46      	ldr	r3, [pc, #280]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095ec:	4a46      	ldr	r2, [pc, #280]	; (8009708 <LoRaMacInitialization+0x1e0>)
 80095ee:	625a      	str	r2, [r3, #36]	; 0x24
 80095f0:	4b44      	ldr	r3, [pc, #272]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    LoRaMacParamsDefaults.ChannelsMask[4] = 0x0000;
    LoRaMacParamsDefaults.ChannelsMask[5] = 0x0000;//ast c
#elif defined( USE_BAND_780 )
    LoRaMacParamsDefaults.ChannelsMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
#elif defined( USE_BAND_868 )
    LoRaMacParamsDefaults.ChannelsMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80095f8:	4b42      	ldr	r3, [pc, #264]	; (8009704 <LoRaMacInitialization+0x1dc>)
 80095fa:	2207      	movs	r2, #7
 80095fc:	859a      	strh	r2, [r3, #44]	; 0x2c
        Channels[i].Band = 0;
    }
#endif

    // Init parameters which are not set in function ResetMacParameters
    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 80095fe:	4b41      	ldr	r3, [pc, #260]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	4a42      	ldr	r2, [pc, #264]	; (800970c <LoRaMacInitialization+0x1e4>)
 8009604:	6053      	str	r3, [r2, #4]
    LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 8009606:	4b3f      	ldr	r3, [pc, #252]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009608:	7a1a      	ldrb	r2, [r3, #8]
 800960a:	4b40      	ldr	r3, [pc, #256]	; (800970c <LoRaMacInitialization+0x1e4>)
 800960c:	721a      	strb	r2, [r3, #8]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 800960e:	4b3d      	ldr	r3, [pc, #244]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	4a3e      	ldr	r2, [pc, #248]	; (800970c <LoRaMacInitialization+0x1e4>)
 8009614:	60d3      	str	r3, [r2, #12]
    LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 8009616:	4b3b      	ldr	r3, [pc, #236]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	4a3c      	ldr	r2, [pc, #240]	; (800970c <LoRaMacInitialization+0x1e4>)
 800961c:	6113      	str	r3, [r2, #16]
    LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 800961e:	4b39      	ldr	r3, [pc, #228]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	4a3a      	ldr	r2, [pc, #232]	; (800970c <LoRaMacInitialization+0x1e4>)
 8009624:	6153      	str	r3, [r2, #20]
    LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 8009626:	4b37      	ldr	r3, [pc, #220]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	4a38      	ldr	r2, [pc, #224]	; (800970c <LoRaMacInitialization+0x1e4>)
 800962c:	6193      	str	r3, [r2, #24]
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 800962e:	4b35      	ldr	r3, [pc, #212]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	4a36      	ldr	r2, [pc, #216]	; (800970c <LoRaMacInitialization+0x1e4>)
 8009634:	61d3      	str	r3, [r2, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 8009636:	4b33      	ldr	r3, [pc, #204]	; (8009704 <LoRaMacInitialization+0x1dc>)
 8009638:	f893 2020 	ldrb.w	r2, [r3, #32]
 800963c:	4b33      	ldr	r3, [pc, #204]	; (800970c <LoRaMacInitialization+0x1e4>)
 800963e:	f883 2020 	strb.w	r2, [r3, #32]

    ResetMacParameters( );
 8009642:	f7ff faa9 	bl	8008b98 <ResetMacParameters>

    // Initialize timers
    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
 8009646:	4932      	ldr	r1, [pc, #200]	; (8009710 <LoRaMacInitialization+0x1e8>)
 8009648:	4832      	ldr	r0, [pc, #200]	; (8009714 <LoRaMacInitialization+0x1ec>)
 800964a:	f007 fa9f 	bl	8010b8c <TimerInit>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 800964e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009652:	4830      	ldr	r0, [pc, #192]	; (8009714 <LoRaMacInitialization+0x1ec>)
 8009654:	f007 fcb8 	bl	8010fc8 <TimerSetValue>

    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
 8009658:	492f      	ldr	r1, [pc, #188]	; (8009718 <LoRaMacInitialization+0x1f0>)
 800965a:	4830      	ldr	r0, [pc, #192]	; (800971c <LoRaMacInitialization+0x1f4>)
 800965c:	f007 fa96 	bl	8010b8c <TimerInit>
    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
 8009660:	492f      	ldr	r1, [pc, #188]	; (8009720 <LoRaMacInitialization+0x1f8>)
 8009662:	4830      	ldr	r0, [pc, #192]	; (8009724 <LoRaMacInitialization+0x1fc>)
 8009664:	f007 fa92 	bl	8010b8c <TimerInit>
    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
 8009668:	492f      	ldr	r1, [pc, #188]	; (8009728 <LoRaMacInitialization+0x200>)
 800966a:	4830      	ldr	r0, [pc, #192]	; (800972c <LoRaMacInitialization+0x204>)
 800966c:	f007 fa8e 	bl	8010b8c <TimerInit>
    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009670:	492f      	ldr	r1, [pc, #188]	; (8009730 <LoRaMacInitialization+0x208>)
 8009672:	4830      	ldr	r0, [pc, #192]	; (8009734 <LoRaMacInitialization+0x20c>)
 8009674:	f007 fa8a 	bl	8010b8c <TimerInit>

    // Store the current initialization time
    LoRaMacInitializationTime = TimerGetCurrentTime( );
 8009678:	f007 fcbf 	bl	8010ffa <TimerGetCurrentTime>
 800967c:	4602      	mov	r2, r0
 800967e:	4b2e      	ldr	r3, [pc, #184]	; (8009738 <LoRaMacInitialization+0x210>)
 8009680:	601a      	str	r2, [r3, #0]

    // Initialize Radio driver
    RadioEvents.TxDone = OnRadioTxDone;
 8009682:	4b2e      	ldr	r3, [pc, #184]	; (800973c <LoRaMacInitialization+0x214>)
 8009684:	4a2e      	ldr	r2, [pc, #184]	; (8009740 <LoRaMacInitialization+0x218>)
 8009686:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRadioRxDone;
 8009688:	4b2c      	ldr	r3, [pc, #176]	; (800973c <LoRaMacInitialization+0x214>)
 800968a:	4a2e      	ldr	r2, [pc, #184]	; (8009744 <LoRaMacInitialization+0x21c>)
 800968c:	609a      	str	r2, [r3, #8]
    RadioEvents.RxError = OnRadioRxError;
 800968e:	4b2b      	ldr	r3, [pc, #172]	; (800973c <LoRaMacInitialization+0x214>)
 8009690:	4a2d      	ldr	r2, [pc, #180]	; (8009748 <LoRaMacInitialization+0x220>)
 8009692:	611a      	str	r2, [r3, #16]
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009694:	4b29      	ldr	r3, [pc, #164]	; (800973c <LoRaMacInitialization+0x214>)
 8009696:	4a2d      	ldr	r2, [pc, #180]	; (800974c <LoRaMacInitialization+0x224>)
 8009698:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 800969a:	4b28      	ldr	r3, [pc, #160]	; (800973c <LoRaMacInitialization+0x214>)
 800969c:	4a2c      	ldr	r2, [pc, #176]	; (8009750 <LoRaMacInitialization+0x228>)
 800969e:	60da      	str	r2, [r3, #12]
    Radio.Init( &RadioEvents );
 80096a0:	4b2c      	ldr	r3, [pc, #176]	; (8009754 <LoRaMacInitialization+0x22c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4825      	ldr	r0, [pc, #148]	; (800973c <LoRaMacInitialization+0x214>)
 80096a6:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
 80096a8:	4b2a      	ldr	r3, [pc, #168]	; (8009754 <LoRaMacInitialization+0x22c>)
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f008 f813 	bl	80116dc <srand1>

    PublicNetwork = true;
 80096b6:	4b28      	ldr	r3, [pc, #160]	; (8009758 <LoRaMacInitialization+0x230>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	701a      	strb	r2, [r3, #0]
    Radio.SetPublicNetwork( PublicNetwork );
 80096bc:	4b25      	ldr	r3, [pc, #148]	; (8009754 <LoRaMacInitialization+0x22c>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	4a25      	ldr	r2, [pc, #148]	; (8009758 <LoRaMacInitialization+0x230>)
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
    Radio.Sleep( );
 80096c8:	4b22      	ldr	r3, [pc, #136]	; (8009754 <LoRaMacInitialization+0x22c>)
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000460 	.word	0x20000460
 80096dc:	20000464 	.word	0x20000464
 80096e0:	20000974 	.word	0x20000974
 80096e4:	200001f4 	.word	0x200001f4
 80096e8:	20000448 	.word	0x20000448
 80096ec:	200004fc 	.word	0x200004fc
 80096f0:	200004fd 	.word	0x200004fd
 80096f4:	200001f6 	.word	0x200001f6
 80096f8:	20000438 	.word	0x20000438
 80096fc:	2000043c 	.word	0x2000043c
 8009700:	20000440 	.word	0x20000440
 8009704:	20000978 	.word	0x20000978
 8009708:	33d3e608 	.word	0x33d3e608
 800970c:	200009b0 	.word	0x200009b0
 8009710:	08007021 	.word	0x08007021
 8009714:	2000044c 	.word	0x2000044c
 8009718:	0800748d 	.word	0x0800748d
 800971c:	20000484 	.word	0x20000484
 8009720:	0800752d 	.word	0x0800752d
 8009724:	20000498 	.word	0x20000498
 8009728:	0800759d 	.word	0x0800759d
 800972c:	200004ac 	.word	0x200004ac
 8009730:	08007605 	.word	0x08007605
 8009734:	200004e0 	.word	0x200004e0
 8009738:	20000444 	.word	0x20000444
 800973c:	20000468 	.word	0x20000468
 8009740:	08006429 	.word	0x08006429
 8009744:	080065d1 	.word	0x080065d1
 8009748:	08006f25 	.word	0x08006f25
 800974c:	08006edd 	.word	0x08006edd
 8009750:	08006fc1 	.word	0x08006fc1
 8009754:	080127e4 	.word	0x080127e4
 8009758:	200001f5 	.word	0x200001f5

0800975c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8009768:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <LoRaMacQueryTxPossible+0xc4>)
 800976a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800976e:	73bb      	strb	r3, [r7, #14]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 8009770:	4b2c      	ldr	r3, [pc, #176]	; (8009824 <LoRaMacQueryTxPossible+0xc8>)
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <LoRaMacQueryTxPossible+0xcc>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4413      	add	r3, r2
 800977a:	73fb      	strb	r3, [r7, #15]

    if( txInfo == NULL )
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <LoRaMacQueryTxPossible+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009782:	2303      	movs	r3, #3
 8009784:	e048      	b.n	8009818 <LoRaMacQueryTxPossible+0xbc>
    }

    AdrNextDr( AdrCtrlOn, false, &datarate );
 8009786:	4b29      	ldr	r3, [pc, #164]	; (800982c <LoRaMacQueryTxPossible+0xd0>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	f107 020e 	add.w	r2, r7, #14
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fae3 	bl	8007d5c <AdrNextDr>

    if( RepeaterSupport == true )
 8009796:	4b26      	ldr	r3, [pc, #152]	; (8009830 <LoRaMacQueryTxPossible+0xd4>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d007      	beq.n	80097ae <LoRaMacQueryTxPossible+0x52>
    {
        txInfo->CurrentPayloadSize = MaxPayloadOfDatarateRepeater[datarate];
 800979e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a2:	461a      	mov	r2, r3
 80097a4:	4b23      	ldr	r3, [pc, #140]	; (8009834 <LoRaMacQueryTxPossible+0xd8>)
 80097a6:	5c9a      	ldrb	r2, [r3, r2]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	705a      	strb	r2, [r3, #1]
 80097ac:	e006      	b.n	80097bc <LoRaMacQueryTxPossible+0x60>
    }
    else
    {
        txInfo->CurrentPayloadSize = MaxPayloadOfDatarate[datarate];
 80097ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b2:	461a      	mov	r2, r3
 80097b4:	4b20      	ldr	r3, [pc, #128]	; (8009838 <LoRaMacQueryTxPossible+0xdc>)
 80097b6:	5c9a      	ldrb	r2, [r3, r2]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	705a      	strb	r2, [r3, #1]
    }

    if( txInfo->CurrentPayloadSize >= fOptLen )
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	7bfa      	ldrb	r2, [r7, #15]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d814      	bhi.n	80097f0 <LoRaMacQueryTxPossible+0x94>
    {
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	785a      	ldrb	r2, [r3, #1]
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	701a      	strb	r2, [r3, #0]
    else
    {
        return LORAMAC_STATUS_MAC_CMD_LENGTH_ERROR;
    }

    if( ValidatePayloadLength( size, datarate, 0 ) == false )
 80097d4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2200      	movs	r2, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe f995 	bl	8007b0c <ValidatePayloadLength>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f083 0301 	eor.w	r3, r3, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <LoRaMacQueryTxPossible+0x9c>
 80097ee:	e001      	b.n	80097f4 <LoRaMacQueryTxPossible+0x98>
        return LORAMAC_STATUS_MAC_CMD_LENGTH_ERROR;
 80097f0:	2309      	movs	r3, #9
 80097f2:	e011      	b.n	8009818 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_LENGTH_ERROR;
 80097f4:	2308      	movs	r3, #8
 80097f6:	e00f      	b.n	8009818 <LoRaMacQueryTxPossible+0xbc>
    }

    if( ValidatePayloadLength( size, datarate, fOptLen ) == false )
 80097f8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80097fc:	7bfa      	ldrb	r2, [r7, #15]
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe f983 	bl	8007b0c <ValidatePayloadLength>
 8009806:	4603      	mov	r3, r0
 8009808:	f083 0301 	eor.w	r3, r3, #1
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_CMD_LENGTH_ERROR;
 8009812:	2309      	movs	r3, #9
 8009814:	e000      	b.n	8009818 <LoRaMacQueryTxPossible+0xbc>
    }

    return LORAMAC_STATUS_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000978 	.word	0x20000978
 8009824:	2000040f 	.word	0x2000040f
 8009828:	20000410 	.word	0x20000410
 800982c:	20000406 	.word	0x20000406
 8009830:	200001f6 	.word	0x200001f6
 8009834:	080124bc 	.word	0x080124bc
 8009838:	080124b4 	.word	0x080124b4

0800983c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
    if( mibGet == NULL )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800984e:	2303      	movs	r3, #3
 8009850:	e0df      	b.n	8009a12 <LoRaMacMibGetRequestConfirm+0x1d6>
    }

    switch( mibGet->Type )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b1c      	cmp	r3, #28
 8009858:	f200 80d7 	bhi.w	8009a0a <LoRaMacMibGetRequestConfirm+0x1ce>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <LoRaMacMibGetRequestConfirm+0x28>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	080098d9 	.word	0x080098d9
 8009868:	080098e3 	.word	0x080098e3
 800986c:	080098ed 	.word	0x080098ed
 8009870:	080098f7 	.word	0x080098f7
 8009874:	08009901 	.word	0x08009901
 8009878:	0800990b 	.word	0x0800990b
 800987c:	08009913 	.word	0x08009913
 8009880:	0800991b 	.word	0x0800991b
 8009884:	08009925 	.word	0x08009925
 8009888:	0800992f 	.word	0x0800992f
 800988c:	08009937 	.word	0x08009937
 8009890:	08009949 	.word	0x08009949
 8009894:	08009963 	.word	0x08009963
 8009898:	0800995b 	.word	0x0800995b
 800989c:	0800996b 	.word	0x0800996b
 80098a0:	08009977 	.word	0x08009977
 80098a4:	08009981 	.word	0x08009981
 80098a8:	0800998b 	.word	0x0800998b
 80098ac:	08009995 	.word	0x08009995
 80098b0:	0800999f 	.word	0x0800999f
 80098b4:	080099a9 	.word	0x080099a9
 80098b8:	080099b5 	.word	0x080099b5
 80098bc:	080099cd 	.word	0x080099cd
 80098c0:	080099c1 	.word	0x080099c1
 80098c4:	080099d9 	.word	0x080099d9
 80098c8:	080099e3 	.word	0x080099e3
 80098cc:	080099ed 	.word	0x080099ed
 80098d0:	080099f7 	.word	0x080099f7
 80098d4:	08009a01 	.word	0x08009a01
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = LoRaMacDeviceClass;
 80098d8:	4b50      	ldr	r3, [pc, #320]	; (8009a1c <LoRaMacMibGetRequestConfirm+0x1e0>)
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	711a      	strb	r2, [r3, #4]
            break;
 80098e0:	e096      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_NETWORK_JOINED:
        {
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 80098e2:	4b4f      	ldr	r3, [pc, #316]	; (8009a20 <LoRaMacMibGetRequestConfirm+0x1e4>)
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	711a      	strb	r2, [r3, #4]
            break;
 80098ea:	e091      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = AdrCtrlOn;
 80098ec:	4b4d      	ldr	r3, [pc, #308]	; (8009a24 <LoRaMacMibGetRequestConfirm+0x1e8>)
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	711a      	strb	r2, [r3, #4]
            break;
 80098f4:	e08c      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = LoRaMacNetID;
 80098f6:	4b4c      	ldr	r3, [pc, #304]	; (8009a28 <LoRaMacMibGetRequestConfirm+0x1ec>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]
            break;
 80098fe:	e087      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = LoRaMacDevAddr;
 8009900:	4b4a      	ldr	r3, [pc, #296]	; (8009a2c <LoRaMacMibGetRequestConfirm+0x1f0>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	605a      	str	r2, [r3, #4]
            break;
 8009908:	e082      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_NWK_SKEY:
        {
            mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a48      	ldr	r2, [pc, #288]	; (8009a30 <LoRaMacMibGetRequestConfirm+0x1f4>)
 800990e:	605a      	str	r2, [r3, #4]
            break;
 8009910:	e07e      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_APP_SKEY:
        {
            mibGet->Param.AppSKey = LoRaMacAppSKey;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a47      	ldr	r2, [pc, #284]	; (8009a34 <LoRaMacMibGetRequestConfirm+0x1f8>)
 8009916:	605a      	str	r2, [r3, #4]
            break;
 8009918:	e07a      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = PublicNetwork;
 800991a:	4b47      	ldr	r3, [pc, #284]	; (8009a38 <LoRaMacMibGetRequestConfirm+0x1fc>)
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	711a      	strb	r2, [r3, #4]
            break;
 8009922:	e075      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = RepeaterSupport;
 8009924:	4b45      	ldr	r3, [pc, #276]	; (8009a3c <LoRaMacMibGetRequestConfirm+0x200>)
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	711a      	strb	r2, [r3, #4]
            break;
 800992c:	e070      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS:
        {
            mibGet->Param.ChannelList = Channels;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a43      	ldr	r2, [pc, #268]	; (8009a40 <LoRaMacMibGetRequestConfirm+0x204>)
 8009932:	605a      	str	r2, [r3, #4]
            break;
 8009934:	e06c      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a42      	ldr	r2, [pc, #264]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 800993a:	3304      	adds	r3, #4
 800993c:	3224      	adds	r2, #36	; 0x24
 800993e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009942:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8009946:	e063      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a3f      	ldr	r2, [pc, #252]	; (8009a48 <LoRaMacMibGetRequestConfirm+0x20c>)
 800994c:	3304      	adds	r3, #4
 800994e:	3224      	adds	r2, #36	; 0x24
 8009950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009954:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8009958:	e05a      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            mibGet->Param.ChannelsDefaultMask = LoRaMacParamsDefaults.ChannelsMask;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a3b      	ldr	r2, [pc, #236]	; (8009a4c <LoRaMacMibGetRequestConfirm+0x210>)
 800995e:	605a      	str	r2, [r3, #4]
            break;
 8009960:	e056      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_MASK:
        {
            mibGet->Param.ChannelsMask = LoRaMacParams.ChannelsMask;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a3a      	ldr	r2, [pc, #232]	; (8009a50 <LoRaMacMibGetRequestConfirm+0x214>)
 8009966:	605a      	str	r2, [r3, #4]
            break;
 8009968:	e052      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_NB_REP:
        {
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 800996c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	711a      	strb	r2, [r3, #4]
            break;
 8009974:	e04c      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 8009976:	4b33      	ldr	r3, [pc, #204]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]
            break;
 800997e:	e047      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 8009980:	4b30      	ldr	r3, [pc, #192]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 8009982:	691a      	ldr	r2, [r3, #16]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
            break;
 8009988:	e042      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 800998a:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 800998c:	695a      	ldr	r2, [r3, #20]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	605a      	str	r2, [r3, #4]
            break;
 8009992:	e03d      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 8009994:	4b2b      	ldr	r3, [pc, #172]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	605a      	str	r2, [r3, #4]
            break;
 800999c:	e038      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 80099a0:	69da      	ldr	r2, [r3, #28]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]
            break;
 80099a6:	e033      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80099a8:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <LoRaMacMibGetRequestConfirm+0x20c>)
 80099aa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	711a      	strb	r2, [r3, #4]
            break;
 80099b2:	e02d      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 80099b4:	4b23      	ldr	r3, [pc, #140]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 80099b6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	711a      	strb	r2, [r3, #4]
            break;
 80099be:	e027      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 80099c0:	4b21      	ldr	r3, [pc, #132]	; (8009a48 <LoRaMacMibGetRequestConfirm+0x20c>)
 80099c2:	f993 2000 	ldrsb.w	r2, [r3]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	711a      	strb	r2, [r3, #4]
            break;
 80099ca:	e021      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 80099cc:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 80099ce:	f993 2000 	ldrsb.w	r2, [r3]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	711a      	strb	r2, [r3, #4]
            break;
 80099d6:	e01b      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_UPLINK_COUNTER:
        {
            mibGet->Param.UpLinkCounter = UpLinkCounter;
 80099d8:	4b1e      	ldr	r3, [pc, #120]	; (8009a54 <LoRaMacMibGetRequestConfirm+0x218>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	605a      	str	r2, [r3, #4]
            break;
 80099e0:	e016      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_DOWNLINK_COUNTER:
        {
            mibGet->Param.DownLinkCounter = DownLinkCounter;
 80099e2:	4b1d      	ldr	r3, [pc, #116]	; (8009a58 <LoRaMacMibGetRequestConfirm+0x21c>)
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]
            break;
 80099ea:	e011      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_MULTICAST_CHANNEL:
        {
            mibGet->Param.MulticastList = MulticastChannels;
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <LoRaMacMibGetRequestConfirm+0x220>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	605a      	str	r2, [r3, #4]
            break;
 80099f4:	e00c      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 80099f6:	4b13      	ldr	r3, [pc, #76]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	605a      	str	r2, [r3, #4]
            break;
 80099fe:	e007      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 8009a00:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <LoRaMacMibGetRequestConfirm+0x208>)
 8009a02:	7a1a      	ldrb	r2, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	711a      	strb	r2, [r3, #4]
            break;
 8009a08:	e002      	b.n	8009a10 <LoRaMacMibGetRequestConfirm+0x1d4>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8009a0e:	bf00      	nop
    }

    return status;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bc80      	pop	{r7}
 8009a1a:	4770      	bx	lr
 8009a1c:	200001f4 	.word	0x200001f4
 8009a20:	20000405 	.word	0x20000405
 8009a24:	20000406 	.word	0x20000406
 8009a28:	200001e8 	.word	0x200001e8
 8009a2c:	200001ec 	.word	0x200001ec
 8009a30:	200001c4 	.word	0x200001c4
 8009a34:	200001d4 	.word	0x200001d4
 8009a38:	200001f5 	.word	0x200001f5
 8009a3c:	200001f6 	.word	0x200001f6
 8009a40:	20000048 	.word	0x20000048
 8009a44:	200009b0 	.word	0x200009b0
 8009a48:	20000978 	.word	0x20000978
 8009a4c:	200009a4 	.word	0x200009a4
 8009a50:	200009dc 	.word	0x200009dc
 8009a54:	200003fc 	.word	0x200003fc
 8009a58:	20000400 	.word	0x20000400
 8009a5c:	200001f0 	.word	0x200001f0

08009a60 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]

    if( mibSet == NULL )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e191      	b.n	8009d9a <LoRaMacMibSetRequestConfirm+0x33a>
    }
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009a76:	4baa      	ldr	r3, [pc, #680]	; (8009d20 <LoRaMacMibSetRequestConfirm+0x2c0>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <LoRaMacMibSetRequestConfirm+0x26>
    {
        return LORAMAC_STATUS_BUSY;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e189      	b.n	8009d9a <LoRaMacMibSetRequestConfirm+0x33a>
    }

    switch( mibSet->Type )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2b1c      	cmp	r3, #28
 8009a8c:	f200 8181 	bhi.w	8009d92 <LoRaMacMibSetRequestConfirm+0x332>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <LoRaMacMibSetRequestConfirm+0x38>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009b0d 	.word	0x08009b0d
 8009a9c:	08009b3f 	.word	0x08009b3f
 8009aa0:	08009b49 	.word	0x08009b49
 8009aa4:	08009b53 	.word	0x08009b53
 8009aa8:	08009b5d 	.word	0x08009b5d
 8009aac:	08009b67 	.word	0x08009b67
 8009ab0:	08009b85 	.word	0x08009b85
 8009ab4:	08009ba3 	.word	0x08009ba3
 8009ab8:	08009bb9 	.word	0x08009bb9
 8009abc:	08009d93 	.word	0x08009d93
 8009ac0:	08009bc3 	.word	0x08009bc3
 8009ac4:	08009bd5 	.word	0x08009bd5
 8009ac8:	08009c05 	.word	0x08009c05
 8009acc:	08009be7 	.word	0x08009be7
 8009ad0:	08009c23 	.word	0x08009c23
 8009ad4:	08009c45 	.word	0x08009c45
 8009ad8:	08009c4f 	.word	0x08009c4f
 8009adc:	08009c59 	.word	0x08009c59
 8009ae0:	08009c63 	.word	0x08009c63
 8009ae4:	08009c6d 	.word	0x08009c6d
 8009ae8:	08009c77 	.word	0x08009c77
 8009aec:	08009c9f 	.word	0x08009c9f
 8009af0:	08009cef 	.word	0x08009cef
 8009af4:	08009cc7 	.word	0x08009cc7
 8009af8:	08009d17 	.word	0x08009d17
 8009afc:	08009d65 	.word	0x08009d65
 8009b00:	08009d93 	.word	0x08009d93
 8009b04:	08009d6f 	.word	0x08009d6f
 8009b08:	08009d81 	.word	0x08009d81
    {
        case MIB_DEVICE_CLASS:
        {
            LoRaMacDeviceClass = mibSet->Param.Class;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	791a      	ldrb	r2, [r3, #4]
 8009b10:	4b84      	ldr	r3, [pc, #528]	; (8009d24 <LoRaMacMibSetRequestConfirm+0x2c4>)
 8009b12:	701a      	strb	r2, [r3, #0]
            switch( LoRaMacDeviceClass )
 8009b14:	4b83      	ldr	r3, [pc, #524]	; (8009d24 <LoRaMacMibSetRequestConfirm+0x2c4>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d00e      	beq.n	8009b3a <LoRaMacMibSetRequestConfirm+0xda>
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d006      	beq.n	8009b2e <LoRaMacMibSetRequestConfirm+0xce>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d000      	beq.n	8009b26 <LoRaMacMibSetRequestConfirm+0xc6>
                    NodeAckRequested = false;
                    OnRxWindow2TimerEvent( );
                    break;
                }
            }
            break;
 8009b24:	e138      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                    Radio.Sleep( );
 8009b26:	4b80      	ldr	r3, [pc, #512]	; (8009d28 <LoRaMacMibSetRequestConfirm+0x2c8>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	4798      	blx	r3
                    break;
 8009b2c:	e006      	b.n	8009b3c <LoRaMacMibSetRequestConfirm+0xdc>
                    NodeAckRequested = false;
 8009b2e:	4b7f      	ldr	r3, [pc, #508]	; (8009d2c <LoRaMacMibSetRequestConfirm+0x2cc>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
                    OnRxWindow2TimerEvent( );
 8009b34:	f7fd fd32 	bl	800759c <OnRxWindow2TimerEvent>
                    break;
 8009b38:	e000      	b.n	8009b3c <LoRaMacMibSetRequestConfirm+0xdc>
                    break;
 8009b3a:	bf00      	nop
            break;
 8009b3c:	e12c      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_NETWORK_JOINED:
        {
            IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	791a      	ldrb	r2, [r3, #4]
 8009b42:	4b7b      	ldr	r3, [pc, #492]	; (8009d30 <LoRaMacMibSetRequestConfirm+0x2d0>)
 8009b44:	701a      	strb	r2, [r3, #0]
            break;
 8009b46:	e127      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            AdrCtrlOn = mibSet->Param.AdrEnable;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	791a      	ldrb	r2, [r3, #4]
 8009b4c:	4b79      	ldr	r3, [pc, #484]	; (8009d34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009b4e:	701a      	strb	r2, [r3, #0]
            break;
 8009b50:	e122      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            LoRaMacNetID = mibSet->Param.NetID;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	4a78      	ldr	r2, [pc, #480]	; (8009d38 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009b58:	6013      	str	r3, [r2, #0]
            break;
 8009b5a:	e11d      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            LoRaMacDevAddr = mibSet->Param.DevAddr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4a76      	ldr	r2, [pc, #472]	; (8009d3c <LoRaMacMibSetRequestConfirm+0x2dc>)
 8009b62:	6013      	str	r3, [r2, #0]
            break;
 8009b64:	e118      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_NWK_SKEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <LoRaMacMibSetRequestConfirm+0x11e>
            {
                memcpy1( LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2210      	movs	r2, #16
 8009b74:	4619      	mov	r1, r3
 8009b76:	4872      	ldr	r0, [pc, #456]	; (8009d40 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009b78:	f007 fdd5 	bl	8011726 <memcpy1>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009b7c:	e10c      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	73fb      	strb	r3, [r7, #15]
            break;
 8009b82:	e109      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_APP_SKEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d007      	beq.n	8009b9c <LoRaMacMibSetRequestConfirm+0x13c>
            {
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	2210      	movs	r2, #16
 8009b92:	4619      	mov	r1, r3
 8009b94:	486b      	ldr	r0, [pc, #428]	; (8009d44 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009b96:	f007 fdc6 	bl	8011726 <memcpy1>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009b9a:	e0fd      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	73fb      	strb	r3, [r7, #15]
            break;
 8009ba0:	e0fa      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	791a      	ldrb	r2, [r3, #4]
 8009ba6:	4b68      	ldr	r3, [pc, #416]	; (8009d48 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009ba8:	701a      	strb	r2, [r3, #0]
            Radio.SetPublicNetwork( PublicNetwork );
 8009baa:	4b5f      	ldr	r3, [pc, #380]	; (8009d28 <LoRaMacMibSetRequestConfirm+0x2c8>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bae:	4a66      	ldr	r2, [pc, #408]	; (8009d48 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009bb0:	7812      	ldrb	r2, [r2, #0]
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4798      	blx	r3
            break;
 8009bb6:	e0ef      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_REPEATER_SUPPORT:
        {
             RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	791a      	ldrb	r2, [r3, #4]
 8009bbc:	4b63      	ldr	r3, [pc, #396]	; (8009d4c <LoRaMacMibSetRequestConfirm+0x2ec>)
 8009bbe:	701a      	strb	r2, [r3, #0]
            break;
 8009bc0:	e0ea      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            LoRaMacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009bc2:	4b63      	ldr	r3, [pc, #396]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	3324      	adds	r3, #36	; 0x24
 8009bc8:	3204      	adds	r2, #4
 8009bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bce:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8009bd2:	e0e1      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009bd4:	4b5f      	ldr	r3, [pc, #380]	; (8009d54 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	3324      	adds	r3, #36	; 0x24
 8009bda:	3204      	adds	r2, #4
 8009bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009be0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8009be4:	e0d8      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            if( mibSet->Param.ChannelsDefaultMask )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <LoRaMacMibSetRequestConfirm+0x19e>
#elif defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL )
                memcpy1( ( uint8_t* ) LoRaMacParamsDefaults.ChannelsMask,
                         ( uint8_t* ) mibSet->Param.ChannelsDefaultMask, sizeof( LoRaMacParamsDefaults.ChannelsMask ) );
#else
                memcpy1( ( uint8_t* ) LoRaMacParamsDefaults.ChannelsMask,
                         ( uint8_t* ) mibSet->Param.ChannelsDefaultMask, 2 );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
                memcpy1( ( uint8_t* ) LoRaMacParamsDefaults.ChannelsMask,
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4858      	ldr	r0, [pc, #352]	; (8009d58 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8009bf8:	f007 fd95 	bl	8011726 <memcpy1>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009bfc:	e0cc      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	73fb      	strb	r3, [r7, #15]
            break;
 8009c02:	e0c9      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            if( mibSet->Param.ChannelsMask )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <LoRaMacMibSetRequestConfirm+0x1bc>
#elif defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL )
                memcpy1( ( uint8_t* ) LoRaMacParams.ChannelsMask,
                         ( uint8_t* ) mibSet->Param.ChannelsMask, sizeof( LoRaMacParams.ChannelsMask ) );
#else
                memcpy1( ( uint8_t* ) LoRaMacParams.ChannelsMask,
                         ( uint8_t* ) mibSet->Param.ChannelsMask, 2 );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
                memcpy1( ( uint8_t* ) LoRaMacParams.ChannelsMask,
 8009c10:	2202      	movs	r2, #2
 8009c12:	4619      	mov	r1, r3
 8009c14:	4851      	ldr	r0, [pc, #324]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x2fc>)
 8009c16:	f007 fd86 	bl	8011726 <memcpy1>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009c1a:	e0bd      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	73fb      	strb	r3, [r7, #15]
            break;
 8009c20:	e0ba      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_REP:
        {
            if( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	791b      	ldrb	r3, [r3, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <LoRaMacMibSetRequestConfirm+0x1de>
                ( mibSet->Param.ChannelNbRep <= 15 ) )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 8009c2e:	2b0f      	cmp	r3, #15
 8009c30:	d805      	bhi.n	8009c3e <LoRaMacMibSetRequestConfirm+0x1de>
            {
                LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	791a      	ldrb	r2, [r3, #4]
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c38:	f883 2020 	strb.w	r2, [r3, #32]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009c3c:	e0ac      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	73fb      	strb	r3, [r7, #15]
            break;
 8009c42:	e0a9      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	4a41      	ldr	r2, [pc, #260]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c4a:	60d3      	str	r3, [r2, #12]
            break;
 8009c4c:	e0a4      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4a3f      	ldr	r2, [pc, #252]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c54:	6113      	str	r3, [r2, #16]
            break;
 8009c56:	e09f      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	4a3c      	ldr	r2, [pc, #240]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c5e:	6153      	str	r3, [r2, #20]
            break;
 8009c60:	e09a      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4a3a      	ldr	r2, [pc, #232]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c68:	6193      	str	r3, [r2, #24]
            break;
 8009c6a:	e095      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	4a37      	ldr	r2, [pc, #220]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009c72:	61d3      	str	r3, [r2, #28]
            break;
 8009c74:	e090      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
            if( ValueInRange( mibSet->Param.ChannelsDefaultDatarate,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	2100      	movs	r1, #0
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe f81e 	bl	8007cc2 <ValueInRange>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <LoRaMacMibSetRequestConfirm+0x238>
                              DR_0, DR_5 ) )
            {
                LoRaMacParamsDefaults.ChannelsDatarate = mibSet->Param.ChannelsDefaultDatarate;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009c92:	4b30      	ldr	r3, [pc, #192]	; (8009d54 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8009c94:	705a      	strb	r2, [r3, #1]
#endif
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009c96:	e07f      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	73fb      	strb	r3, [r7, #15]
            break;
 8009c9c:	e07c      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            if( ValueInRange( mibSet->Param.ChannelsDatarate,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe f80a 	bl	8007cc2 <ValueInRange>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <LoRaMacMibSetRequestConfirm+0x260>
                              LORAMAC_TX_MIN_DATARATE, LORAMAC_TX_MAX_DATARATE ) )
            {
                LoRaMacParams.ChannelsDatarate = mibSet->Param.ChannelsDatarate;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009cba:	4b25      	ldr	r3, [pc, #148]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009cbc:	705a      	strb	r2, [r3, #1]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009cbe:	e06b      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	73fb      	strb	r3, [r7, #15]
            break;
 8009cc4:	e068      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            if( ValueInRange( mibSet->Param.ChannelsDefaultTxPower,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009ccc:	2205      	movs	r2, #5
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd fff6 	bl	8007cc2 <ValueInRange>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <LoRaMacMibSetRequestConfirm+0x288>
                              LORAMAC_MAX_TX_POWER, LORAMAC_MIN_TX_POWER ) )
            {
                LoRaMacParamsDefaults.ChannelsTxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8009ce4:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009ce6:	e057      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	73fb      	strb	r3, [r7, #15]
            break;
 8009cec:	e054      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            if( ValueInRange( mibSet->Param.ChannelsTxPower,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd ffe2 	bl	8007cc2 <ValueInRange>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <LoRaMacMibSetRequestConfirm+0x2b0>
                              LORAMAC_MAX_TX_POWER, LORAMAC_MIN_TX_POWER ) )
            {
                LoRaMacParams.ChannelsTxPower = mibSet->Param.ChannelsTxPower;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009d0a:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009d0c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8009d0e:	e043      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d10:	2303      	movs	r3, #3
 8009d12:	73fb      	strb	r3, [r7, #15]
            break;
 8009d14:	e040      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_UPLINK_COUNTER:
        {
            UpLinkCounter = mibSet->Param.UpLinkCounter;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4a11      	ldr	r2, [pc, #68]	; (8009d60 <LoRaMacMibSetRequestConfirm+0x300>)
 8009d1c:	6013      	str	r3, [r2, #0]
            break;
 8009d1e:	e03b      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
 8009d20:	20000448 	.word	0x20000448
 8009d24:	200001f4 	.word	0x200001f4
 8009d28:	080127e4 	.word	0x080127e4
 8009d2c:	2000040c 	.word	0x2000040c
 8009d30:	20000405 	.word	0x20000405
 8009d34:	20000406 	.word	0x20000406
 8009d38:	200001e8 	.word	0x200001e8
 8009d3c:	200001ec 	.word	0x200001ec
 8009d40:	200001c4 	.word	0x200001c4
 8009d44:	200001d4 	.word	0x200001d4
 8009d48:	200001f5 	.word	0x200001f5
 8009d4c:	200001f6 	.word	0x200001f6
 8009d50:	200009b0 	.word	0x200009b0
 8009d54:	20000978 	.word	0x20000978
 8009d58:	200009a4 	.word	0x200009a4
 8009d5c:	200009dc 	.word	0x200009dc
 8009d60:	200003fc 	.word	0x200003fc
        }
        case MIB_DOWNLINK_COUNTER:
        {
            DownLinkCounter = mibSet->Param.DownLinkCounter;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4a0e      	ldr	r2, [pc, #56]	; (8009da4 <LoRaMacMibSetRequestConfirm+0x344>)
 8009d6a:	6013      	str	r3, [r2, #0]
            break;
 8009d6c:	e014      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	4a0d      	ldr	r2, [pc, #52]	; (8009da8 <LoRaMacMibSetRequestConfirm+0x348>)
 8009d74:	6053      	str	r3, [r2, #4]
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <LoRaMacMibSetRequestConfirm+0x348>)
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <LoRaMacMibSetRequestConfirm+0x34c>)
 8009d7c:	6053      	str	r3, [r2, #4]
            break;
 8009d7e:	e00b      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	791a      	ldrb	r2, [r3, #4]
 8009d84:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <LoRaMacMibSetRequestConfirm+0x348>)
 8009d86:	721a      	strb	r2, [r3, #8]
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <LoRaMacMibSetRequestConfirm+0x348>)
 8009d8a:	7a1a      	ldrb	r2, [r3, #8]
 8009d8c:	4b07      	ldr	r3, [pc, #28]	; (8009dac <LoRaMacMibSetRequestConfirm+0x34c>)
 8009d8e:	721a      	strb	r2, [r3, #8]
            break;
 8009d90:	e002      	b.n	8009d98 <LoRaMacMibSetRequestConfirm+0x338>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009d92:	2302      	movs	r3, #2
 8009d94:	73fb      	strb	r3, [r7, #15]
            break;
 8009d96:	bf00      	nop
    }

    return status;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000400 	.word	0x20000400
 8009da8:	20000978 	.word	0x20000978
 8009dac:	200009b0 	.word	0x200009b0

08009db0 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	1d3b      	adds	r3, r7, #4
 8009db8:	e883 0006 	stmia.w	r3, {r1, r2}
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
#if defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL ) || defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
    return LORAMAC_STATUS_PARAMETER_INVALID;
#else
    bool datarateInvalid = false;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	75fb      	strb	r3, [r7, #23]
    bool frequencyInvalid = false;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75bb      	strb	r3, [r7, #22]
    uint8_t band = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	757b      	strb	r3, [r7, #21]

    // The id must not exceed LORA_MAX_NB_CHANNELS
    if( id >= LORA_MAX_NB_CHANNELS )
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b0f      	cmp	r3, #15
 8009dd0:	d901      	bls.n	8009dd6 <LoRaMacChannelAdd+0x26>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e0e4      	b.n	8009fa0 <LoRaMacChannelAdd+0x1f0>
    }
    // Validate if the MAC is in a correct state
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009dd6:	4b74      	ldr	r3, [pc, #464]	; (8009fa8 <LoRaMacChannelAdd+0x1f8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <LoRaMacChannelAdd+0x42>
    {
        if( ( LoRaMacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 8009de2:	4b71      	ldr	r3, [pc, #452]	; (8009fa8 <LoRaMacChannelAdd+0x1f8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <LoRaMacChannelAdd+0x42>
        {
            return LORAMAC_STATUS_BUSY;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e0d6      	b.n	8009fa0 <LoRaMacChannelAdd+0x1f0>
        }
    }
    // Validate the datarate
    if( ( params.DrRange.Fields.Min > params.DrRange.Fields.Max ) ||
 8009df2:	7a3b      	ldrb	r3, [r7, #8]
 8009df4:	f343 0303 	sbfx	r3, r3, #0, #4
 8009df8:	b25a      	sxtb	r2, r3
 8009dfa:	7a3b      	ldrb	r3, [r7, #8]
 8009dfc:	f343 1303 	sbfx	r3, r3, #4, #4
 8009e00:	b25b      	sxtb	r3, r3
 8009e02:	429a      	cmp	r2, r3
 8009e04:	dc1d      	bgt.n	8009e42 <LoRaMacChannelAdd+0x92>
        ( ValueInRange( params.DrRange.Fields.Min, LORAMAC_TX_MIN_DATARATE,
 8009e06:	7a3b      	ldrb	r3, [r7, #8]
 8009e08:	f343 0303 	sbfx	r3, r3, #0, #4
 8009e0c:	b25b      	sxtb	r3, r3
 8009e0e:	2207      	movs	r2, #7
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fd ff55 	bl	8007cc2 <ValueInRange>
 8009e18:	4603      	mov	r3, r0
                        LORAMAC_TX_MAX_DATARATE ) == false ) ||
 8009e1a:	f083 0301 	eor.w	r3, r3, #1
 8009e1e:	b2db      	uxtb	r3, r3
    if( ( params.DrRange.Fields.Min > params.DrRange.Fields.Max ) ||
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10e      	bne.n	8009e42 <LoRaMacChannelAdd+0x92>
        ( ValueInRange( params.DrRange.Fields.Max, LORAMAC_TX_MIN_DATARATE,
 8009e24:	7a3b      	ldrb	r3, [r7, #8]
 8009e26:	f343 1303 	sbfx	r3, r3, #4, #4
 8009e2a:	b25b      	sxtb	r3, r3
 8009e2c:	2207      	movs	r2, #7
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fd ff46 	bl	8007cc2 <ValueInRange>
 8009e36:	4603      	mov	r3, r0
                        LORAMAC_TX_MAX_DATARATE ) == false ) )
 8009e38:	f083 0301 	eor.w	r3, r3, #1
 8009e3c:	b2db      	uxtb	r3, r3
                        LORAMAC_TX_MAX_DATARATE ) == false ) ||
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <LoRaMacChannelAdd+0x96>
    {
        datarateInvalid = true;
 8009e42:	2301      	movs	r3, #1
 8009e44:	75fb      	strb	r3, [r7, #23]
    }

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    if( id < 3 )
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d821      	bhi.n	8009e90 <LoRaMacChannelAdd+0xe0>
    {
        if( params.Frequency != Channels[id].Frequency )
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	4956      	ldr	r1, [pc, #344]	; (8009fac <LoRaMacChannelAdd+0x1fc>)
 8009e52:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d001      	beq.n	8009e5e <LoRaMacChannelAdd+0xae>
        {
            frequencyInvalid = true;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	75bb      	strb	r3, [r7, #22]
        }

        if( params.DrRange.Fields.Min > DR_0 )
 8009e5e:	7a3b      	ldrb	r3, [r7, #8]
 8009e60:	f343 0303 	sbfx	r3, r3, #0, #4
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd01      	ble.n	8009e6e <LoRaMacChannelAdd+0xbe>
        {
            datarateInvalid = true;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]
        }
        if( ValueInRange( params.DrRange.Fields.Max, DR_5, LORAMAC_TX_MAX_DATARATE ) == false )
 8009e6e:	7a3b      	ldrb	r3, [r7, #8]
 8009e70:	f343 1303 	sbfx	r3, r3, #4, #4
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	2207      	movs	r2, #7
 8009e78:	2105      	movs	r1, #5
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fd ff21 	bl	8007cc2 <ValueInRange>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f083 0301 	eor.w	r3, r3, #1
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <LoRaMacChannelAdd+0xe0>
        {
            datarateInvalid = true;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	75fb      	strb	r3, [r7, #23]
        }
    }
#endif

    // Validate the frequency
    if( ( Radio.CheckRfFrequency( params.Frequency ) == true ) && ( params.Frequency > 0 ) && ( frequencyInvalid == false ) )
 8009e90:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <LoRaMacChannelAdd+0x200>)
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	4610      	mov	r0, r2
 8009e98:	4798      	blx	r3
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d04e      	beq.n	8009f3e <LoRaMacChannelAdd+0x18e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04b      	beq.n	8009f3e <LoRaMacChannelAdd+0x18e>
 8009ea6:	7dbb      	ldrb	r3, [r7, #22]
 8009ea8:	f083 0301 	eor.w	r3, r3, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d045      	beq.n	8009f3e <LoRaMacChannelAdd+0x18e>
    {
#if defined( USE_BAND_868 )
        if( ( params.Frequency >= 863000000 ) && ( params.Frequency < 865000000 ) )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a3f      	ldr	r2, [pc, #252]	; (8009fb4 <LoRaMacChannelAdd+0x204>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d906      	bls.n	8009ec8 <LoRaMacChannelAdd+0x118>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a3e      	ldr	r2, [pc, #248]	; (8009fb8 <LoRaMacChannelAdd+0x208>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d802      	bhi.n	8009ec8 <LoRaMacChannelAdd+0x118>
        {
            band = BAND_G1_2;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	757b      	strb	r3, [r7, #21]
 8009ec6:	e039      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else if( ( params.Frequency >= 865000000 ) && ( params.Frequency <= 868000000 ) )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a3b      	ldr	r2, [pc, #236]	; (8009fb8 <LoRaMacChannelAdd+0x208>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d906      	bls.n	8009ede <LoRaMacChannelAdd+0x12e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3a      	ldr	r2, [pc, #232]	; (8009fbc <LoRaMacChannelAdd+0x20c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d802      	bhi.n	8009ede <LoRaMacChannelAdd+0x12e>
        {
            band = BAND_G1_0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	757b      	strb	r3, [r7, #21]
 8009edc:	e02e      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else if( ( params.Frequency > 868000000 ) && ( params.Frequency <= 868600000 ) )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a36      	ldr	r2, [pc, #216]	; (8009fbc <LoRaMacChannelAdd+0x20c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d906      	bls.n	8009ef4 <LoRaMacChannelAdd+0x144>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a35      	ldr	r2, [pc, #212]	; (8009fc0 <LoRaMacChannelAdd+0x210>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d802      	bhi.n	8009ef4 <LoRaMacChannelAdd+0x144>
        {
            band = BAND_G1_1;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	757b      	strb	r3, [r7, #21]
 8009ef2:	e023      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else if( ( params.Frequency >= 868700000 ) && ( params.Frequency <= 869200000 ) )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a33      	ldr	r2, [pc, #204]	; (8009fc4 <LoRaMacChannelAdd+0x214>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d906      	bls.n	8009f0a <LoRaMacChannelAdd+0x15a>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a32      	ldr	r2, [pc, #200]	; (8009fc8 <LoRaMacChannelAdd+0x218>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d802      	bhi.n	8009f0a <LoRaMacChannelAdd+0x15a>
        {
            band = BAND_G1_2;
 8009f04:	2302      	movs	r3, #2
 8009f06:	757b      	strb	r3, [r7, #21]
 8009f08:	e018      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else if( ( params.Frequency >= 869400000 ) && ( params.Frequency <= 869650000 ) )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a2f      	ldr	r2, [pc, #188]	; (8009fcc <LoRaMacChannelAdd+0x21c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d906      	bls.n	8009f20 <LoRaMacChannelAdd+0x170>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2e      	ldr	r2, [pc, #184]	; (8009fd0 <LoRaMacChannelAdd+0x220>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d802      	bhi.n	8009f20 <LoRaMacChannelAdd+0x170>
        {
            band = BAND_G1_3;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	757b      	strb	r3, [r7, #21]
 8009f1e:	e00d      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else if( ( params.Frequency >= 869700000 ) && ( params.Frequency <= 870000000 ) )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a2c      	ldr	r2, [pc, #176]	; (8009fd4 <LoRaMacChannelAdd+0x224>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d906      	bls.n	8009f36 <LoRaMacChannelAdd+0x186>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a2b      	ldr	r2, [pc, #172]	; (8009fd8 <LoRaMacChannelAdd+0x228>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d802      	bhi.n	8009f36 <LoRaMacChannelAdd+0x186>
        {
            band = BAND_G1_4;
 8009f30:	2304      	movs	r3, #4
 8009f32:	757b      	strb	r3, [r7, #21]
 8009f34:	e002      	b.n	8009f3c <LoRaMacChannelAdd+0x18c>
        }
        else
        {
            frequencyInvalid = true;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75bb      	strb	r3, [r7, #22]
        if( ( params.Frequency >= 863000000 ) && ( params.Frequency < 865000000 ) )
 8009f3a:	e002      	b.n	8009f42 <LoRaMacChannelAdd+0x192>
 8009f3c:	e001      	b.n	8009f42 <LoRaMacChannelAdd+0x192>
        }
#endif
    }
    else
    {
        frequencyInvalid = true;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75bb      	strb	r3, [r7, #22]
    }

    if( ( datarateInvalid == true ) && ( frequencyInvalid == true ) )
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <LoRaMacChannelAdd+0x1a2>
 8009f48:	7dbb      	ldrb	r3, [r7, #22]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <LoRaMacChannelAdd+0x1a2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8009f4e:	2306      	movs	r3, #6
 8009f50:	e026      	b.n	8009fa0 <LoRaMacChannelAdd+0x1f0>
    }
    if( datarateInvalid == true )
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <LoRaMacChannelAdd+0x1ac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8009f58:	2305      	movs	r3, #5
 8009f5a:	e021      	b.n	8009fa0 <LoRaMacChannelAdd+0x1f0>
    }
    if( frequencyInvalid == true )
 8009f5c:	7dbb      	ldrb	r3, [r7, #22]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <LoRaMacChannelAdd+0x1b6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8009f62:	2304      	movs	r3, #4
 8009f64:	e01c      	b.n	8009fa0 <LoRaMacChannelAdd+0x1f0>
    }

    // Every parameter is valid, activate the channel
    Channels[id] = params;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	4a10      	ldr	r2, [pc, #64]	; (8009fac <LoRaMacChannelAdd+0x1fc>)
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	1d3a      	adds	r2, r7, #4
 8009f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f74:	e883 0003 	stmia.w	r3, {r0, r1}
    Channels[id].Band = band;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	4a0c      	ldr	r2, [pc, #48]	; (8009fac <LoRaMacChannelAdd+0x1fc>)
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	4413      	add	r3, r2
 8009f80:	7d7a      	ldrb	r2, [r7, #21]
 8009f82:	715a      	strb	r2, [r3, #5]
    LoRaMacParams.ChannelsMask[0] |= ( 1 << id );
 8009f84:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <LoRaMacChannelAdd+0x22c>)
 8009f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f88:	b21a      	sxth	r2, r3
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	4313      	orrs	r3, r2
 8009f96:	b21b      	sxth	r3, r3
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <LoRaMacChannelAdd+0x22c>)
 8009f9c:	859a      	strh	r2, [r3, #44]	; 0x2c

    return LORAMAC_STATUS_OK;
 8009f9e:	2300      	movs	r3, #0
#endif
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	20000448 	.word	0x20000448
 8009fac:	20000048 	.word	0x20000048
 8009fb0:	080127e4 	.word	0x080127e4
 8009fb4:	337055bf 	.word	0x337055bf
 8009fb8:	338eda3f 	.word	0x338eda3f
 8009fbc:	33bca100 	.word	0x33bca100
 8009fc0:	33c5c8c0 	.word	0x33c5c8c0
 8009fc4:	33c74f5f 	.word	0x33c74f5f
 8009fc8:	33cef080 	.word	0x33cef080
 8009fcc:	33d1fdbf 	.word	0x33d1fdbf
 8009fd0:	33d5ce50 	.word	0x33d5ce50
 8009fd4:	33d6919f 	.word	0x33d6919f
 8009fd8:	33db2580 	.word	0x33db2580
 8009fdc:	200009b0 	.word	0x200009b0

08009fe0 <LoRaMacChannelRemove>:

LoRaMacStatus_t LoRaMacChannelRemove( uint8_t id )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009fea:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <LoRaMacChannelRemove+0x78>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <LoRaMacChannelRemove+0x26>
    {
        if( ( LoRaMacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <LoRaMacChannelRemove+0x78>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <LoRaMacChannelRemove+0x26>
        {
            return LORAMAC_STATUS_BUSY;
 800a002:	2301      	movs	r3, #1
 800a004:	e024      	b.n	800a050 <LoRaMacChannelRemove+0x70>
        }
    }

    if( ( id < 3 ) || ( id >= LORA_MAX_NB_CHANNELS ) )
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d902      	bls.n	800a012 <LoRaMacChannelRemove+0x32>
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	2b0f      	cmp	r3, #15
 800a010:	d901      	bls.n	800a016 <LoRaMacChannelRemove+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a012:	2303      	movs	r3, #3
 800a014:	e01c      	b.n	800a050 <LoRaMacChannelRemove+0x70>
    }
    else
    {
        // Remove the channel from the list of channels
        Channels[id] = ( ChannelParams_t ){ 0, { 0 }, 0 };
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	4a10      	ldr	r2, [pc, #64]	; (800a05c <LoRaMacChannelRemove+0x7c>)
 800a01a:	2100      	movs	r1, #0
 800a01c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800a020:	490e      	ldr	r1, [pc, #56]	; (800a05c <LoRaMacChannelRemove+0x7c>)
 800a022:	00da      	lsls	r2, r3, #3
 800a024:	440a      	add	r2, r1
 800a026:	2100      	movs	r1, #0
 800a028:	7111      	strb	r1, [r2, #4]
 800a02a:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <LoRaMacChannelRemove+0x7c>)
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4413      	add	r3, r2
 800a030:	2200      	movs	r2, #0
 800a032:	715a      	strb	r2, [r3, #5]

        // Disable the channel as it doesn't exist anymore
        if( DisableChannelInMask( id, LoRaMacParams.ChannelsMask ) == false )
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	490a      	ldr	r1, [pc, #40]	; (800a060 <LoRaMacChannelRemove+0x80>)
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fd fe5f 	bl	8007cfc <DisableChannelInMask>
 800a03e:	4603      	mov	r3, r0
 800a040:	f083 0301 	eor.w	r3, r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <LoRaMacChannelRemove+0x6e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e000      	b.n	800a050 <LoRaMacChannelRemove+0x70>
        }
    }
    return LORAMAC_STATUS_OK;
 800a04e:	2300      	movs	r3, #0
#elif ( defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID ) || defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL ) )
    return LORAMAC_STATUS_PARAMETER_INVALID;
#endif
}
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000448 	.word	0x20000448
 800a05c:	20000048 	.word	0x20000048
 800a060:	200009dc 	.word	0x200009dc

0800a064 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a06c:	2302      	movs	r3, #2
 800a06e:	73fb      	strb	r3, [r7, #15]
    LoRaMacHeader_t macHdr;

    if( mlmeRequest == NULL )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <LoRaMacMlmeRequest+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a076:	2303      	movs	r3, #3
 800a078:	e0bf      	b.n	800a1fa <LoRaMacMlmeRequest+0x196>
    }
    if( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a07a:	4b62      	ldr	r3, [pc, #392]	; (800a204 <LoRaMacMlmeRequest+0x1a0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <LoRaMacMlmeRequest+0x26>
    {
        return LORAMAC_STATUS_BUSY;
 800a086:	2301      	movs	r3, #1
 800a088:	e0b7      	b.n	800a1fa <LoRaMacMlmeRequest+0x196>
    }

    memset1( ( uint8_t* ) &MlmeConfirm, 0, sizeof( MlmeConfirm ) );
 800a08a:	220c      	movs	r2, #12
 800a08c:	2100      	movs	r1, #0
 800a08e:	485e      	ldr	r0, [pc, #376]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a090:	f007 fb82 	bl	8011798 <memset1>

    MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a094:	4b5c      	ldr	r3, [pc, #368]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a096:	2201      	movs	r2, #1
 800a098:	705a      	strb	r2, [r3, #1]

    switch( mlmeRequest->Type )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	f200 809e 	bhi.w	800a1e0 <LoRaMacMlmeRequest+0x17c>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <LoRaMacMlmeRequest+0x48>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0bd 	.word	0x0800a0bd
 800a0b0:	0800a173 	.word	0x0800a173
 800a0b4:	0800a195 	.word	0x0800a195
 800a0b8:	0800a1b7 	.word	0x0800a1b7
    {
        case MLME_JOIN:
        {
            if( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a0bc:	4b51      	ldr	r3, [pc, #324]	; (800a204 <LoRaMacMlmeRequest+0x1a0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <LoRaMacMlmeRequest+0x68>
            {
                return LORAMAC_STATUS_BUSY;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e096      	b.n	800a1fa <LoRaMacMlmeRequest+0x196>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <LoRaMacMlmeRequest+0x88>
                ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <LoRaMacMlmeRequest+0x88>
                ( mlmeRequest->Req.Join.AppKey == NULL ) ||
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
                ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <LoRaMacMlmeRequest+0x88>
                ( mlmeRequest->Req.Join.NbTrials == 0 ) )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7c1b      	ldrb	r3, [r3, #16]
                ( mlmeRequest->Req.Join.AppKey == NULL ) ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <LoRaMacMlmeRequest+0x8c>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e084      	b.n	800a1fa <LoRaMacMlmeRequest+0x196>
            {
                mlmeRequest->Req.Join.NbTrials = 2;
            }
#else
            // Enables at least the usage of all datarates.
            if( mlmeRequest->Req.Join.NbTrials < 48 )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7c1b      	ldrb	r3, [r3, #16]
 800a0f4:	2b2f      	cmp	r3, #47	; 0x2f
 800a0f6:	d802      	bhi.n	800a0fe <LoRaMacMlmeRequest+0x9a>
            {
                mlmeRequest->Req.Join.NbTrials = 48;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2230      	movs	r2, #48	; 0x30
 800a0fc:	741a      	strb	r2, [r3, #16]
            }
#endif

            LoRaMacFlags.Bits.MlmeReq = 1;
 800a0fe:	4a43      	ldr	r2, [pc, #268]	; (800a20c <LoRaMacMlmeRequest+0x1a8>)
 800a100:	7813      	ldrb	r3, [r2, #0]
 800a102:	f043 0308 	orr.w	r3, r3, #8
 800a106:	7013      	strb	r3, [r2, #0]
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	4b3e      	ldr	r3, [pc, #248]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a10e:	701a      	strb	r2, [r3, #0]

            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4a3e      	ldr	r2, [pc, #248]	; (800a210 <LoRaMacMlmeRequest+0x1ac>)
 800a116:	6013      	str	r3, [r2, #0]
            LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	4a3d      	ldr	r2, [pc, #244]	; (800a214 <LoRaMacMlmeRequest+0x1b0>)
 800a11e:	6013      	str	r3, [r2, #0]
            LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	4a3c      	ldr	r2, [pc, #240]	; (800a218 <LoRaMacMlmeRequest+0x1b4>)
 800a126:	6013      	str	r3, [r2, #0]
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7c1a      	ldrb	r2, [r3, #16]
 800a12c:	4b3b      	ldr	r3, [pc, #236]	; (800a21c <LoRaMacMlmeRequest+0x1b8>)
 800a12e:	701a      	strb	r2, [r3, #0]

            // Reset variable JoinRequestTrials
            JoinRequestTrials = 0;
 800a130:	4b3b      	ldr	r3, [pc, #236]	; (800a220 <LoRaMacMlmeRequest+0x1bc>)
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]

            // Setup header information
            macHdr.Value = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	733b      	strb	r3, [r7, #12]
            macHdr.Bits.MType  = FRAME_TYPE_JOIN_REQ;
 800a13a:	7b3b      	ldrb	r3, [r7, #12]
 800a13c:	f36f 1347 	bfc	r3, #5, #3
 800a140:	733b      	strb	r3, [r7, #12]

            ResetMacParameters( );
 800a142:	f7fe fd29 	bl	8008b98 <ResetMacParameters>

            // Add a +1, since we start to count from 0
            LoRaMacParams.ChannelsDatarate = AlternateDatarate( JoinRequestTrials + 1 );
 800a146:	4b36      	ldr	r3, [pc, #216]	; (800a220 <LoRaMacMlmeRequest+0x1bc>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	3301      	adds	r3, #1
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fcd3 	bl	8008afc <AlternateDatarate>
 800a156:	4603      	mov	r3, r0
 800a158:	461a      	mov	r2, r3
 800a15a:	4b32      	ldr	r3, [pc, #200]	; (800a224 <LoRaMacMlmeRequest+0x1c0>)
 800a15c:	705a      	strb	r2, [r3, #1]

            status = Send( &macHdr, 0, NULL, 0 );
 800a15e:	f107 000c 	add.w	r0, r7, #12
 800a162:	2300      	movs	r3, #0
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	f7fe faf8 	bl	800875c <Send>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
            break;
 800a170:	e037      	b.n	800a1e2 <LoRaMacMlmeRequest+0x17e>
        }
        case MLME_LINK_CHECK:
        {
            LoRaMacFlags.Bits.MlmeReq = 1;
 800a172:	4a26      	ldr	r2, [pc, #152]	; (800a20c <LoRaMacMlmeRequest+0x1a8>)
 800a174:	7813      	ldrb	r3, [r2, #0]
 800a176:	f043 0308 	orr.w	r3, r3, #8
 800a17a:	7013      	strb	r3, [r2, #0]
            // LoRaMac will send this command piggy-pack
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	781a      	ldrb	r2, [r3, #0]
 800a180:	4b21      	ldr	r3, [pc, #132]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a182:	701a      	strb	r2, [r3, #0]

            status = AddMacCommand( MOTE_MAC_LINK_CHECK_REQ, 0, 0 );
 800a184:	2200      	movs	r2, #0
 800a186:	2100      	movs	r1, #0
 800a188:	2002      	movs	r0, #2
 800a18a:	f7fd fe3d 	bl	8007e08 <AddMacCommand>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
            break;
 800a192:	e026      	b.n	800a1e2 <LoRaMacMlmeRequest+0x17e>
        }
        case MLME_TXCW:
        {
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a19a:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.MlmeReq = 1;
 800a19c:	4a1b      	ldr	r2, [pc, #108]	; (800a20c <LoRaMacMlmeRequest+0x1a8>)
 800a19e:	7813      	ldrb	r3, [r2, #0]
 800a1a0:	f043 0308 	orr.w	r3, r3, #8
 800a1a4:	7013      	strb	r3, [r2, #0]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	889b      	ldrh	r3, [r3, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff f93e 	bl	800942c <SetTxContinuousWave>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
            break;
 800a1b4:	e015      	b.n	800a1e2 <LoRaMacMlmeRequest+0x17e>
        }
        case MLME_TXCW_1:
        {
            MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	781a      	ldrb	r2, [r3, #0]
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <LoRaMacMlmeRequest+0x1a4>)
 800a1bc:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.MlmeReq = 1;
 800a1be:	4a13      	ldr	r2, [pc, #76]	; (800a20c <LoRaMacMlmeRequest+0x1a8>)
 800a1c0:	7813      	ldrb	r3, [r2, #0]
 800a1c2:	f043 0308 	orr.w	r3, r3, #8
 800a1c6:	7013      	strb	r3, [r2, #0]
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	8898      	ldrh	r0, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6899      	ldr	r1, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7b1b      	ldrb	r3, [r3, #12]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f7ff f97f 	bl	80094d8 <SetTxContinuousWave1>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
            break;
 800a1de:	e000      	b.n	800a1e2 <LoRaMacMlmeRequest+0x17e>
        }
        default:
            break;
 800a1e0:	bf00      	nop
    }

    if( status != LORAMAC_STATUS_OK )
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <LoRaMacMlmeRequest+0x194>
    {
        NodeAckRequested = false;
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <LoRaMacMlmeRequest+0x1c4>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
        LoRaMacFlags.Bits.MlmeReq = 0;
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <LoRaMacMlmeRequest+0x1a8>)
 800a1f0:	7813      	ldrb	r3, [r2, #0]
 800a1f2:	f36f 03c3 	bfc	r3, #3, #1
 800a1f6:	7013      	strb	r3, [r2, #0]
    }

    return status;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000448 	.word	0x20000448
 800a208:	2000052c 	.word	0x2000052c
 800a20c:	20000974 	.word	0x20000974
 800a210:	200001b8 	.word	0x200001b8
 800a214:	200001bc 	.word	0x200001bc
 800a218:	200001c0 	.word	0x200001c0
 800a21c:	200004fd 	.word	0x200004fd
 800a220:	200004fc 	.word	0x200004fc
 800a224:	200009b0 	.word	0x200009b0
 800a228:	2000040c 	.word	0x2000040c

0800a22c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a234:	2302      	movs	r3, #2
 800a236:	75fb      	strb	r3, [r7, #23]
    LoRaMacHeader_t macHdr;
    uint8_t fPort = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	75bb      	strb	r3, [r7, #22]
    void *fBuffer;
    uint16_t fBufferSize;
    int8_t datarate;
    bool readyToSend = false;
 800a23c:	2300      	movs	r3, #0
 800a23e:	733b      	strb	r3, [r7, #12]

    if( mcpsRequest == NULL )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <LoRaMacMcpsRequest+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a246:	2303      	movs	r3, #3
 800a248:	e099      	b.n	800a37e <LoRaMacMcpsRequest+0x152>
    }
    if( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 800a24a:	4b4f      	ldr	r3, [pc, #316]	; (800a388 <LoRaMacMcpsRequest+0x15c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <LoRaMacMcpsRequest+0x36>
        ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED ) )
 800a256:	4b4c      	ldr	r3, [pc, #304]	; (800a388 <LoRaMacMcpsRequest+0x15c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0310 	and.w	r3, r3, #16
    if( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <LoRaMacMcpsRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 800a262:	2301      	movs	r3, #1
 800a264:	e08b      	b.n	800a37e <LoRaMacMcpsRequest+0x152>
    }

    macHdr.Value = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	723b      	strb	r3, [r7, #8]
    memset1 ( ( uint8_t* ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 800a26a:	2214      	movs	r2, #20
 800a26c:	2100      	movs	r1, #0
 800a26e:	4847      	ldr	r0, [pc, #284]	; (800a38c <LoRaMacMcpsRequest+0x160>)
 800a270:	f007 fa92 	bl	8011798 <memset1>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a274:	4b45      	ldr	r3, [pc, #276]	; (800a38c <LoRaMacMcpsRequest+0x160>)
 800a276:	2201      	movs	r2, #1
 800a278:	705a      	strb	r2, [r3, #1]

    switch( mcpsRequest->Type )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d01b      	beq.n	800a2ba <LoRaMacMcpsRequest+0x8e>
 800a282:	2b03      	cmp	r3, #3
 800a284:	d034      	beq.n	800a2f0 <LoRaMacMcpsRequest+0xc4>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d000      	beq.n	800a28c <LoRaMacMcpsRequest+0x60>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800a28a:	e044      	b.n	800a316 <LoRaMacMcpsRequest+0xea>
            readyToSend = true;
 800a28c:	2301      	movs	r3, #1
 800a28e:	733b      	strb	r3, [r7, #12]
            AckTimeoutRetries = 1;
 800a290:	4b3f      	ldr	r3, [pc, #252]	; (800a390 <LoRaMacMcpsRequest+0x164>)
 800a292:	2201      	movs	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a296:	7a3b      	ldrb	r3, [r7, #8]
 800a298:	2202      	movs	r2, #2
 800a29a:	f362 1347 	bfi	r3, r2, #5, #3
 800a29e:	723b      	strb	r3, [r7, #8]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	791b      	ldrb	r3, [r3, #4]
 800a2a4:	75bb      	strb	r3, [r7, #22]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	613b      	str	r3, [r7, #16]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	899b      	ldrh	r3, [r3, #12]
 800a2b0:	81fb      	strh	r3, [r7, #14]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7b9b      	ldrb	r3, [r3, #14]
 800a2b6:	737b      	strb	r3, [r7, #13]
            break;
 800a2b8:	e02d      	b.n	800a316 <LoRaMacMcpsRequest+0xea>
            readyToSend = true;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	733b      	strb	r3, [r7, #12]
            AckTimeoutRetriesCounter = 1;
 800a2be:	4b35      	ldr	r3, [pc, #212]	; (800a394 <LoRaMacMcpsRequest+0x168>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	701a      	strb	r2, [r3, #0]
            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7bda      	ldrb	r2, [r3, #15]
 800a2c8:	4b31      	ldr	r3, [pc, #196]	; (800a390 <LoRaMacMcpsRequest+0x164>)
 800a2ca:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a2cc:	7a3b      	ldrb	r3, [r7, #8]
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	f362 1347 	bfi	r3, r2, #5, #3
 800a2d4:	723b      	strb	r3, [r7, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	75bb      	strb	r3, [r7, #22]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	613b      	str	r3, [r7, #16]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	899b      	ldrh	r3, [r3, #12]
 800a2e6:	81fb      	strh	r3, [r7, #14]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	7b9b      	ldrb	r3, [r3, #14]
 800a2ec:	737b      	strb	r3, [r7, #13]
            break;
 800a2ee:	e012      	b.n	800a316 <LoRaMacMcpsRequest+0xea>
            readyToSend = true;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	733b      	strb	r3, [r7, #12]
            AckTimeoutRetries = 1;
 800a2f4:	4b26      	ldr	r3, [pc, #152]	; (800a390 <LoRaMacMcpsRequest+0x164>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a2fa:	7a3b      	ldrb	r3, [r7, #8]
 800a2fc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a300:	723b      	strb	r3, [r7, #8]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	613b      	str	r3, [r7, #16]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	891b      	ldrh	r3, [r3, #8]
 800a30c:	81fb      	strh	r3, [r7, #14]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7a9b      	ldrb	r3, [r3, #10]
 800a312:	737b      	strb	r3, [r7, #13]
            break;
 800a314:	bf00      	nop
    }

    if( readyToSend == true )
 800a316:	7b3b      	ldrb	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d02f      	beq.n	800a37c <LoRaMacMcpsRequest+0x150>
    {
        if( AdrCtrlOn == false )
 800a31c:	4b1e      	ldr	r3, [pc, #120]	; (800a398 <LoRaMacMcpsRequest+0x16c>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	f083 0301 	eor.w	r3, r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00f      	beq.n	800a34a <LoRaMacMcpsRequest+0x11e>
        {
            if( ValueInRange( datarate, LORAMAC_TX_MIN_DATARATE, LORAMAC_TX_MAX_DATARATE ) == true )
 800a32a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a32e:	2207      	movs	r2, #7
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fcc5 	bl	8007cc2 <ValueInRange>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <LoRaMacMcpsRequest+0x11a>
            {
                LoRaMacParams.ChannelsDatarate = datarate;
 800a33e:	4a17      	ldr	r2, [pc, #92]	; (800a39c <LoRaMacMcpsRequest+0x170>)
 800a340:	7b7b      	ldrb	r3, [r7, #13]
 800a342:	7053      	strb	r3, [r2, #1]
 800a344:	e001      	b.n	800a34a <LoRaMacMcpsRequest+0x11e>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800a346:	2303      	movs	r3, #3
 800a348:	e019      	b.n	800a37e <LoRaMacMcpsRequest+0x152>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800a34a:	89fb      	ldrh	r3, [r7, #14]
 800a34c:	7db9      	ldrb	r1, [r7, #22]
 800a34e:	f107 0008 	add.w	r0, r7, #8
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	f7fe fa02 	bl	800875c <Send>
 800a358:	4603      	mov	r3, r0
 800a35a:	75fb      	strb	r3, [r7, #23]
        if( status == LORAMAC_STATUS_OK )
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <LoRaMacMcpsRequest+0x14a>
        {
            McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	781a      	ldrb	r2, [r3, #0]
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <LoRaMacMcpsRequest+0x160>)
 800a368:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.McpsReq = 1;
 800a36a:	4a0d      	ldr	r2, [pc, #52]	; (800a3a0 <LoRaMacMcpsRequest+0x174>)
 800a36c:	7813      	ldrb	r3, [r2, #0]
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	7013      	strb	r3, [r2, #0]
 800a374:	e002      	b.n	800a37c <LoRaMacMcpsRequest+0x150>
        }
        else
        {
            NodeAckRequested = false;
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <LoRaMacMcpsRequest+0x178>)
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000448 	.word	0x20000448
 800a38c:	20000518 	.word	0x20000518
 800a390:	200000c8 	.word	0x200000c8
 800a394:	200000c9 	.word	0x200000c9
 800a398:	20000406 	.word	0x20000406
 800a39c:	200009b0 	.word	0x200009b0
 800a3a0:	20000974 	.word	0x20000974
 800a3a4:	2000040c 	.word	0x2000040c

0800a3a8 <LoRaMacTestSetDutyCycleOn>:
    UpLinkCounter = txPacketCounter;
    IsUpLinkCounterFixed = true;
}

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	71fb      	strb	r3, [r7, #7]
#if ( defined( USE_BAND_868 ) || defined( USE_BAND_433 ) || defined( USE_BAND_780 ) )
    DutyCycleOn = enable;
 800a3b2:	4a04      	ldr	r2, [pc, #16]	; (800a3c4 <LoRaMacTestSetDutyCycleOn+0x1c>)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	7013      	strb	r3, [r2, #0]
#else
    DutyCycleOn = false;
#endif
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000440 	.word	0x20000440

0800a3c8 <ComputeRxWindowParameters>:
{
    Channel = channel;
}

static RxConfigParams_t ComputeRxWindowParameters( int8_t datarate, uint32_t rxError )
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ca:	b08b      	sub	sp, #44	; 0x2c
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	72fb      	strb	r3, [r7, #11]
    RxConfigParams_t rxConfigParams = { 0, 0, 0, 0 };
 800a3d6:	f107 0314 	add.w	r3, r7, #20
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	605a      	str	r2, [r3, #4]
 800a3e0:	609a      	str	r2, [r3, #8]
    double tSymbol = 0.0;
 800a3e2:	f04f 0300 	mov.w	r3, #0
 800a3e6:	f04f 0400 	mov.w	r4, #0
 800a3ea:	e9c7 3408 	strd	r3, r4, [r7, #32]

    rxConfigParams.Datarate = datarate;
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	753b      	strb	r3, [r7, #20]
    switch( Bandwidths[datarate] )
 800a3f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a3f6:	4a6b      	ldr	r2, [pc, #428]	; (800a5a4 <ComputeRxWindowParameters+0x1dc>)
 800a3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3fc:	4a6a      	ldr	r2, [pc, #424]	; (800a5a8 <ComputeRxWindowParameters+0x1e0>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d005      	beq.n	800a40e <ComputeRxWindowParameters+0x46>
 800a402:	4a6a      	ldr	r2, [pc, #424]	; (800a5ac <ComputeRxWindowParameters+0x1e4>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d005      	beq.n	800a414 <ComputeRxWindowParameters+0x4c>
    {
        default:
        case 125000:
            rxConfigParams.Bandwidth = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	757b      	strb	r3, [r7, #21]
            break;
 800a40c:	e005      	b.n	800a41a <ComputeRxWindowParameters+0x52>
        case 250000:
            rxConfigParams.Bandwidth = 1;
 800a40e:	2301      	movs	r3, #1
 800a410:	757b      	strb	r3, [r7, #21]
            break;
 800a412:	e002      	b.n	800a41a <ComputeRxWindowParameters+0x52>
        case 500000:
            rxConfigParams.Bandwidth = 2;
 800a414:	2302      	movs	r3, #2
 800a416:	757b      	strb	r3, [r7, #21]
            break;
 800a418:	bf00      	nop
    }

#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
    if( datarate == DR_7 )
 800a41a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a41e:	2b07      	cmp	r3, #7
 800a420:	d11d      	bne.n	800a45e <ComputeRxWindowParameters+0x96>
    { // FSK
        tSymbol = ( 1.0 / ( double )Datarates[datarate] ) * 8.0; // 1 symbol equals 1 byte
 800a422:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a426:	4a62      	ldr	r2, [pc, #392]	; (800a5b0 <ComputeRxWindowParameters+0x1e8>)
 800a428:	5cd3      	ldrb	r3, [r2, r3]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f5 fff2 	bl	8000414 <__aeabi_ui2d>
 800a430:	4603      	mov	r3, r0
 800a432:	460c      	mov	r4, r1
 800a434:	461a      	mov	r2, r3
 800a436:	4623      	mov	r3, r4
 800a438:	f04f 0000 	mov.w	r0, #0
 800a43c:	495d      	ldr	r1, [pc, #372]	; (800a5b4 <ComputeRxWindowParameters+0x1ec>)
 800a43e:	f7f6 f98d 	bl	800075c <__aeabi_ddiv>
 800a442:	4603      	mov	r3, r0
 800a444:	460c      	mov	r4, r1
 800a446:	4618      	mov	r0, r3
 800a448:	4621      	mov	r1, r4
 800a44a:	f04f 0200 	mov.w	r2, #0
 800a44e:	4b5a      	ldr	r3, [pc, #360]	; (800a5b8 <ComputeRxWindowParameters+0x1f0>)
 800a450:	f7f6 f85a 	bl	8000508 <__aeabi_dmul>
 800a454:	4603      	mov	r3, r0
 800a456:	460c      	mov	r4, r1
 800a458:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800a45c:	e026      	b.n	800a4ac <ComputeRxWindowParameters+0xe4>
    }
    else
#endif
    { // LoRa
        tSymbol = ( ( double )( 1 << Datarates[datarate] ) / ( double )Bandwidths[datarate] ) * 1e3;
 800a45e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a462:	4a53      	ldr	r2, [pc, #332]	; (800a5b0 <ComputeRxWindowParameters+0x1e8>)
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	461a      	mov	r2, r3
 800a468:	2301      	movs	r3, #1
 800a46a:	4093      	lsls	r3, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f5 ffe1 	bl	8000434 <__aeabi_i2d>
 800a472:	4604      	mov	r4, r0
 800a474:	460d      	mov	r5, r1
 800a476:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a47a:	4a4a      	ldr	r2, [pc, #296]	; (800a5a4 <ComputeRxWindowParameters+0x1dc>)
 800a47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a480:	4618      	mov	r0, r3
 800a482:	f7f5 ffc7 	bl	8000414 <__aeabi_ui2d>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4620      	mov	r0, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7f6 f965 	bl	800075c <__aeabi_ddiv>
 800a492:	4603      	mov	r3, r0
 800a494:	460c      	mov	r4, r1
 800a496:	4618      	mov	r0, r3
 800a498:	4621      	mov	r1, r4
 800a49a:	f04f 0200 	mov.w	r2, #0
 800a49e:	4b47      	ldr	r3, [pc, #284]	; (800a5bc <ComputeRxWindowParameters+0x1f4>)
 800a4a0:	f7f6 f832 	bl	8000508 <__aeabi_dmul>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }

    rxConfigParams.RxWindowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * LoRaMacParams.MinRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), LoRaMacParams.MinRxSymbols ); // Computed number of symbols
 800a4ac:	4b44      	ldr	r3, [pc, #272]	; (800a5c0 <ComputeRxWindowParameters+0x1f8>)
 800a4ae:	7a1b      	ldrb	r3, [r3, #8]
 800a4b0:	461c      	mov	r4, r3
 800a4b2:	4b43      	ldr	r3, [pc, #268]	; (800a5c0 <ComputeRxWindowParameters+0x1f8>)
 800a4b4:	7a1b      	ldrb	r3, [r3, #8]
 800a4b6:	3b04      	subs	r3, #4
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7f5 ffba 	bl	8000434 <__aeabi_i2d>
 800a4c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4c4:	f7f6 f820 	bl	8000508 <__aeabi_dmul>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	461e      	mov	r6, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f5 ff9d 	bl	8000414 <__aeabi_ui2d>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4628      	mov	r0, r5
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	f7f5 fe5b 	bl	800019c <__adddf3>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4f2:	f7f6 f933 	bl	800075c <__aeabi_ddiv>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f007 fdef 	bl	80120e0 <ceil>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4610      	mov	r0, r2
 800a508:	4619      	mov	r1, r3
 800a50a:	f7f6 fabf 	bl	8000a8c <__aeabi_d2uiz>
 800a50e:	4603      	mov	r3, r0
 800a510:	42a3      	cmp	r3, r4
 800a512:	bf38      	it	cc
 800a514:	4623      	movcc	r3, r4
 800a516:	61bb      	str	r3, [r7, #24]

    rxConfigParams.RxOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( rxConfigParams.RxWindowTimeout * tSymbol ) / 2.0 ) - RADIO_WAKEUP_TIME );
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	4b29      	ldr	r3, [pc, #164]	; (800a5c4 <ComputeRxWindowParameters+0x1fc>)
 800a51e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a522:	f7f5 fff1 	bl	8000508 <__aeabi_dmul>
 800a526:	4603      	mov	r3, r0
 800a528:	460c      	mov	r4, r1
 800a52a:	4625      	mov	r5, r4
 800a52c:	461c      	mov	r4, r3
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	4618      	mov	r0, r3
 800a532:	f7f5 ff6f 	bl	8000414 <__aeabi_ui2d>
 800a536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a53a:	f7f5 ffe5 	bl	8000508 <__aeabi_dmul>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4610      	mov	r0, r2
 800a544:	4619      	mov	r1, r3
 800a546:	f04f 0200 	mov.w	r2, #0
 800a54a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a54e:	f7f6 f905 	bl	800075c <__aeabi_ddiv>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 fe1d 	bl	8000198 <__aeabi_dsub>
 800a55e:	4603      	mov	r3, r0
 800a560:	460c      	mov	r4, r1
 800a562:	4618      	mov	r0, r3
 800a564:	4621      	mov	r1, r4
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <ComputeRxWindowParameters+0x1ec>)
 800a56c:	f7f5 fe14 	bl	8000198 <__aeabi_dsub>
 800a570:	4603      	mov	r3, r0
 800a572:	460c      	mov	r4, r1
 800a574:	4618      	mov	r0, r3
 800a576:	4621      	mov	r1, r4
 800a578:	f007 fdb2 	bl	80120e0 <ceil>
 800a57c:	4603      	mov	r3, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	4618      	mov	r0, r3
 800a582:	4621      	mov	r1, r4
 800a584:	f7f6 fa5a 	bl	8000a3c <__aeabi_d2iz>
 800a588:	4603      	mov	r3, r0
 800a58a:	61fb      	str	r3, [r7, #28]

    return rxConfigParams;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	461c      	mov	r4, r3
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	372c      	adds	r7, #44	; 0x2c
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a4:	08012494 	.word	0x08012494
 800a5a8:	0003d090 	.word	0x0003d090
 800a5ac:	0007a120 	.word	0x0007a120
 800a5b0:	0801248c 	.word	0x0801248c
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	40200000 	.word	0x40200000
 800a5bc:	408f4000 	.word	0x408f4000
 800a5c0:	200009b0 	.word	0x200009b0
 800a5c4:	40100000 	.word	0x40100000

0800a5c8 <LoRaMacComputeMic>:
 * \param [IN]  dir             Frame direction [0: uplink, 1: downlink]
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */
void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	817b      	strh	r3, [r7, #10]
    MicBlockB0[5] = dir;
 800a5d8:	4a2b      	ldr	r2, [pc, #172]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a5da:	7e3b      	ldrb	r3, [r7, #24]
 800a5dc:	7153      	strb	r3, [r2, #5]
    
    MicBlockB0[6] = ( address ) & 0xFF;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	4b29      	ldr	r3, [pc, #164]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a5e4:	719a      	strb	r2, [r3, #6]
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	0a1b      	lsrs	r3, r3, #8
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b26      	ldr	r3, [pc, #152]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a5ee:	71da      	strb	r2, [r3, #7]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	4b24      	ldr	r3, [pc, #144]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a5f8:	721a      	strb	r2, [r3, #8]
    MicBlockB0[9] = ( address >> 24 ) & 0xFF;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	4b21      	ldr	r3, [pc, #132]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a602:	725a      	strb	r2, [r3, #9]

    MicBlockB0[10] = ( sequenceCounter ) & 0xFF;
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	4b1f      	ldr	r3, [pc, #124]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a60a:	729a      	strb	r2, [r3, #10]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	b2da      	uxtb	r2, r3
 800a612:	4b1d      	ldr	r3, [pc, #116]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a614:	72da      	strb	r2, [r3, #11]
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	0c1b      	lsrs	r3, r3, #16
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a61e:	731a      	strb	r2, [r3, #12]
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	0e1b      	lsrs	r3, r3, #24
 800a624:	b2da      	uxtb	r2, r3
 800a626:	4b18      	ldr	r3, [pc, #96]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a628:	735a      	strb	r2, [r3, #13]

    MicBlockB0[15] = size & 0xFF;
 800a62a:	897b      	ldrh	r3, [r7, #10]
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a630:	73da      	strb	r2, [r3, #15]

    AES_CMAC_Init( AesCmacCtx );
 800a632:	4816      	ldr	r0, [pc, #88]	; (800a68c <LoRaMacComputeMic+0xc4>)
 800a634:	f001 fac7 	bl	800bbc6 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	4814      	ldr	r0, [pc, #80]	; (800a68c <LoRaMacComputeMic+0xc4>)
 800a63c:	f001 fadc 	bl	800bbf8 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
 800a640:	2210      	movs	r2, #16
 800a642:	4911      	ldr	r1, [pc, #68]	; (800a688 <LoRaMacComputeMic+0xc0>)
 800a644:	4811      	ldr	r0, [pc, #68]	; (800a68c <LoRaMacComputeMic+0xc4>)
 800a646:	f001 fae6 	bl	800bc16 <AES_CMAC_Update>
    
    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 800a64a:	897b      	ldrh	r3, [r7, #10]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	461a      	mov	r2, r3
 800a650:	68f9      	ldr	r1, [r7, #12]
 800a652:	480e      	ldr	r0, [pc, #56]	; (800a68c <LoRaMacComputeMic+0xc4>)
 800a654:	f001 fadf 	bl	800bc16 <AES_CMAC_Update>
    
    AES_CMAC_Final( Mic, AesCmacCtx );
 800a658:	490c      	ldr	r1, [pc, #48]	; (800a68c <LoRaMacComputeMic+0xc4>)
 800a65a:	480d      	ldr	r0, [pc, #52]	; (800a690 <LoRaMacComputeMic+0xc8>)
 800a65c:	f001 fb8b 	bl	800bd76 <AES_CMAC_Final>
    
    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <LoRaMacComputeMic+0xc8>)
 800a662:	78db      	ldrb	r3, [r3, #3]
 800a664:	061a      	lsls	r2, r3, #24
 800a666:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <LoRaMacComputeMic+0xc8>)
 800a668:	789b      	ldrb	r3, [r3, #2]
 800a66a:	041b      	lsls	r3, r3, #16
 800a66c:	431a      	orrs	r2, r3
 800a66e:	4b08      	ldr	r3, [pc, #32]	; (800a690 <LoRaMacComputeMic+0xc8>)
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	4313      	orrs	r3, r2
 800a676:	4a06      	ldr	r2, [pc, #24]	; (800a690 <LoRaMacComputeMic+0xc8>)
 800a678:	7812      	ldrb	r2, [r2, #0]
 800a67a:	431a      	orrs	r2, r3
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	601a      	str	r2, [r3, #0]
}
 800a680:	bf00      	nop
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	200000cc 	.word	0x200000cc
 800a68c:	20000650 	.word	0x20000650
 800a690:	2000053c 	.word	0x2000053c

0800a694 <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint8_t bufferIndex = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	757b      	strb	r3, [r7, #21]
    uint16_t ctr = 1;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	827b      	strh	r3, [r7, #18]

    memset1( AesContext.ksch, '\0', 240 );
 800a6ac:	22f0      	movs	r2, #240	; 0xf0
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	4848      	ldr	r0, [pc, #288]	; (800a7d4 <LoRaMacPayloadEncrypt+0x140>)
 800a6b2:	f007 f871 	bl	8011798 <memset1>
    aes_set_key( key, 16, &AesContext );
 800a6b6:	4a47      	ldr	r2, [pc, #284]	; (800a7d4 <LoRaMacPayloadEncrypt+0x140>)
 800a6b8:	2110      	movs	r1, #16
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fd92 	bl	800b1e4 <aes_set_key>

    aBlock[5] = dir;
 800a6c0:	4a45      	ldr	r2, [pc, #276]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6c6:	7153      	strb	r3, [r2, #5]

    aBlock[6] = ( address ) & 0xFF;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	4b42      	ldr	r3, [pc, #264]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6ce:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	0a1b      	lsrs	r3, r3, #8
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	4b40      	ldr	r3, [pc, #256]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6d8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	0c1b      	lsrs	r3, r3, #16
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	4b3d      	ldr	r3, [pc, #244]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6e2:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	0e1b      	lsrs	r3, r3, #24
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	4b3b      	ldr	r3, [pc, #236]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6ec:	725a      	strb	r2, [r3, #9]

    aBlock[10] = ( sequenceCounter ) & 0xFF;
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	4b39      	ldr	r3, [pc, #228]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6f4:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a6fe:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	b2da      	uxtb	r2, r3
 800a706:	4b34      	ldr	r3, [pc, #208]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a708:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	4b31      	ldr	r3, [pc, #196]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a712:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 800a714:	e02d      	b.n	800a772 <LoRaMacPayloadEncrypt+0xde>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 800a716:	8a7b      	ldrh	r3, [r7, #18]
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a71c:	73da      	strb	r2, [r3, #15]
        ctr++;
 800a71e:	8a7b      	ldrh	r3, [r7, #18]
 800a720:	3301      	adds	r3, #1
 800a722:	827b      	strh	r3, [r7, #18]
        aes_encrypt( aBlock, sBlock, &AesContext );
 800a724:	4a2b      	ldr	r2, [pc, #172]	; (800a7d4 <LoRaMacPayloadEncrypt+0x140>)
 800a726:	492d      	ldr	r1, [pc, #180]	; (800a7dc <LoRaMacPayloadEncrypt+0x148>)
 800a728:	482b      	ldr	r0, [pc, #172]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a72a:	f000 fe29 	bl	800b380 <aes_encrypt>
        for( i = 0; i < 16; i++ )
 800a72e:	2300      	movs	r3, #0
 800a730:	82fb      	strh	r3, [r7, #22]
 800a732:	e015      	b.n	800a760 <LoRaMacPayloadEncrypt+0xcc>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a734:	7d7a      	ldrb	r2, [r7, #21]
 800a736:	8afb      	ldrh	r3, [r7, #22]
 800a738:	4413      	add	r3, r2
 800a73a:	461a      	mov	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	7819      	ldrb	r1, [r3, #0]
 800a742:	8afb      	ldrh	r3, [r7, #22]
 800a744:	4a25      	ldr	r2, [pc, #148]	; (800a7dc <LoRaMacPayloadEncrypt+0x148>)
 800a746:	5cd2      	ldrb	r2, [r2, r3]
 800a748:	7d78      	ldrb	r0, [r7, #21]
 800a74a:	8afb      	ldrh	r3, [r7, #22]
 800a74c:	4403      	add	r3, r0
 800a74e:	4618      	mov	r0, r3
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	4403      	add	r3, r0
 800a754:	404a      	eors	r2, r1
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800a75a:	8afb      	ldrh	r3, [r7, #22]
 800a75c:	3301      	adds	r3, #1
 800a75e:	82fb      	strh	r3, [r7, #22]
 800a760:	8afb      	ldrh	r3, [r7, #22]
 800a762:	2b0f      	cmp	r3, #15
 800a764:	d9e6      	bls.n	800a734 <LoRaMacPayloadEncrypt+0xa0>
        }
        size -= 16;
 800a766:	897b      	ldrh	r3, [r7, #10]
 800a768:	3b10      	subs	r3, #16
 800a76a:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 800a76c:	7d7b      	ldrb	r3, [r7, #21]
 800a76e:	3310      	adds	r3, #16
 800a770:	757b      	strb	r3, [r7, #21]
    while( size >= 16 )
 800a772:	897b      	ldrh	r3, [r7, #10]
 800a774:	2b0f      	cmp	r3, #15
 800a776:	d8ce      	bhi.n	800a716 <LoRaMacPayloadEncrypt+0x82>
    }

    if( size > 0 )
 800a778:	897b      	ldrh	r3, [r7, #10]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d025      	beq.n	800a7ca <LoRaMacPayloadEncrypt+0x136>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 800a77e:	8a7b      	ldrh	r3, [r7, #18]
 800a780:	b2da      	uxtb	r2, r3
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a784:	73da      	strb	r2, [r3, #15]
        aes_encrypt( aBlock, sBlock, &AesContext );
 800a786:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <LoRaMacPayloadEncrypt+0x140>)
 800a788:	4914      	ldr	r1, [pc, #80]	; (800a7dc <LoRaMacPayloadEncrypt+0x148>)
 800a78a:	4813      	ldr	r0, [pc, #76]	; (800a7d8 <LoRaMacPayloadEncrypt+0x144>)
 800a78c:	f000 fdf8 	bl	800b380 <aes_encrypt>
        for( i = 0; i < size; i++ )
 800a790:	2300      	movs	r3, #0
 800a792:	82fb      	strh	r3, [r7, #22]
 800a794:	e015      	b.n	800a7c2 <LoRaMacPayloadEncrypt+0x12e>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a796:	7d7a      	ldrb	r2, [r7, #21]
 800a798:	8afb      	ldrh	r3, [r7, #22]
 800a79a:	4413      	add	r3, r2
 800a79c:	461a      	mov	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	7819      	ldrb	r1, [r3, #0]
 800a7a4:	8afb      	ldrh	r3, [r7, #22]
 800a7a6:	4a0d      	ldr	r2, [pc, #52]	; (800a7dc <LoRaMacPayloadEncrypt+0x148>)
 800a7a8:	5cd2      	ldrb	r2, [r2, r3]
 800a7aa:	7d78      	ldrb	r0, [r7, #21]
 800a7ac:	8afb      	ldrh	r3, [r7, #22]
 800a7ae:	4403      	add	r3, r0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	4403      	add	r3, r0
 800a7b6:	404a      	eors	r2, r1
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < size; i++ )
 800a7bc:	8afb      	ldrh	r3, [r7, #22]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	82fb      	strh	r3, [r7, #22]
 800a7c2:	8afa      	ldrh	r2, [r7, #22]
 800a7c4:	897b      	ldrh	r3, [r7, #10]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d3e5      	bcc.n	800a796 <LoRaMacPayloadEncrypt+0x102>
        }
    }
}
 800a7ca:	bf00      	nop
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2000055c 	.word	0x2000055c
 800a7d8:	200000dc 	.word	0x200000dc
 800a7dc:	2000054c 	.word	0x2000054c

0800a7e0 <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af04      	add	r7, sp, #16
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	817b      	strh	r3, [r7, #10]
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 800a7f0:	8979      	ldrh	r1, [r7, #10]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	7e3b      	ldrb	r3, [r7, #24]
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff ff46 	bl	800a694 <LoRaMacPayloadEncrypt>
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	607a      	str	r2, [r7, #4]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	460b      	mov	r3, r1
 800a81e:	817b      	strh	r3, [r7, #10]
    AES_CMAC_Init( AesCmacCtx );
 800a820:	4812      	ldr	r0, [pc, #72]	; (800a86c <LoRaMacJoinComputeMic+0x5c>)
 800a822:	f001 f9d0 	bl	800bbc6 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4810      	ldr	r0, [pc, #64]	; (800a86c <LoRaMacJoinComputeMic+0x5c>)
 800a82a:	f001 f9e5 	bl	800bbf8 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 800a82e:	897b      	ldrh	r3, [r7, #10]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	68f9      	ldr	r1, [r7, #12]
 800a836:	480d      	ldr	r0, [pc, #52]	; (800a86c <LoRaMacJoinComputeMic+0x5c>)
 800a838:	f001 f9ed 	bl	800bc16 <AES_CMAC_Update>

    AES_CMAC_Final( Mic, AesCmacCtx );
 800a83c:	490b      	ldr	r1, [pc, #44]	; (800a86c <LoRaMacJoinComputeMic+0x5c>)
 800a83e:	480c      	ldr	r0, [pc, #48]	; (800a870 <LoRaMacJoinComputeMic+0x60>)
 800a840:	f001 fa99 	bl	800bd76 <AES_CMAC_Final>

    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <LoRaMacJoinComputeMic+0x60>)
 800a846:	78db      	ldrb	r3, [r3, #3]
 800a848:	061a      	lsls	r2, r3, #24
 800a84a:	4b09      	ldr	r3, [pc, #36]	; (800a870 <LoRaMacJoinComputeMic+0x60>)
 800a84c:	789b      	ldrb	r3, [r3, #2]
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	431a      	orrs	r2, r3
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <LoRaMacJoinComputeMic+0x60>)
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	4313      	orrs	r3, r2
 800a85a:	4a05      	ldr	r2, [pc, #20]	; (800a870 <LoRaMacJoinComputeMic+0x60>)
 800a85c:	7812      	ldrb	r2, [r2, #0]
 800a85e:	431a      	orrs	r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000650 	.word	0x20000650
 800a870:	2000053c 	.word	0x2000053c

0800a874 <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	460b      	mov	r3, r1
 800a882:	817b      	strh	r3, [r7, #10]
    memset1( AesContext.ksch, '\0', 240 );
 800a884:	22f0      	movs	r2, #240	; 0xf0
 800a886:	2100      	movs	r1, #0
 800a888:	480e      	ldr	r0, [pc, #56]	; (800a8c4 <LoRaMacJoinDecrypt+0x50>)
 800a88a:	f006 ff85 	bl	8011798 <memset1>
    aes_set_key( key, 16, &AesContext );
 800a88e:	4a0d      	ldr	r2, [pc, #52]	; (800a8c4 <LoRaMacJoinDecrypt+0x50>)
 800a890:	2110      	movs	r1, #16
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fca6 	bl	800b1e4 <aes_set_key>
    aes_encrypt( buffer, decBuffer, &AesContext );
 800a898:	4a0a      	ldr	r2, [pc, #40]	; (800a8c4 <LoRaMacJoinDecrypt+0x50>)
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fd6f 	bl	800b380 <aes_encrypt>
    // Check if optional CFList is included
    if( size >= 16 )
 800a8a2:	897b      	ldrh	r3, [r7, #10]
 800a8a4:	2b0f      	cmp	r3, #15
 800a8a6:	d908      	bls.n	800a8ba <LoRaMacJoinDecrypt+0x46>
    {
        aes_encrypt( buffer + 16, decBuffer + 16, &AesContext );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f103 0010 	add.w	r0, r3, #16
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	3310      	adds	r3, #16
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <LoRaMacJoinDecrypt+0x50>)
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f000 fd63 	bl	800b380 <aes_encrypt>
    }
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2000055c 	.word	0x2000055c

0800a8c8 <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	; 0x28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	80fb      	strh	r3, [r7, #6]
    uint8_t nonce[16];
    uint8_t *pDevNonce = ( uint8_t * )&devNonce;
 800a8d8:	1dbb      	adds	r3, r7, #6
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
    
    memset1( AesContext.ksch, '\0', 240 );
 800a8dc:	22f0      	movs	r2, #240	; 0xf0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	4825      	ldr	r0, [pc, #148]	; (800a978 <LoRaMacJoinComputeSKeys+0xb0>)
 800a8e2:	f006 ff59 	bl	8011798 <memset1>
    aes_set_key( key, 16, &AesContext );
 800a8e6:	4a24      	ldr	r2, [pc, #144]	; (800a978 <LoRaMacJoinComputeSKeys+0xb0>)
 800a8e8:	2110      	movs	r1, #16
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fc7a 	bl	800b1e4 <aes_set_key>

    memset1( nonce, 0, sizeof( nonce ) );
 800a8f0:	f107 0314 	add.w	r3, r7, #20
 800a8f4:	2210      	movs	r2, #16
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f006 ff4d 	bl	8011798 <memset1>
    nonce[0] = 0x01;
 800a8fe:	2301      	movs	r3, #1
 800a900:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800a902:	f107 0314 	add.w	r3, r7, #20
 800a906:	3301      	adds	r3, #1
 800a908:	2206      	movs	r2, #6
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f006 ff0a 	bl	8011726 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800a912:	f107 0314 	add.w	r3, r7, #20
 800a916:	3307      	adds	r3, #7
 800a918:	2202      	movs	r2, #2
 800a91a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a91c:	4618      	mov	r0, r3
 800a91e:	f006 ff02 	bl	8011726 <memcpy1>
    aes_encrypt( nonce, nwkSKey, &AesContext );
 800a922:	f107 0314 	add.w	r3, r7, #20
 800a926:	4a14      	ldr	r2, [pc, #80]	; (800a978 <LoRaMacJoinComputeSKeys+0xb0>)
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fd28 	bl	800b380 <aes_encrypt>

    memset1( nonce, 0, sizeof( nonce ) );
 800a930:	f107 0314 	add.w	r3, r7, #20
 800a934:	2210      	movs	r2, #16
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f006 ff2d 	bl	8011798 <memset1>
    nonce[0] = 0x02;
 800a93e:	2302      	movs	r3, #2
 800a940:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800a942:	f107 0314 	add.w	r3, r7, #20
 800a946:	3301      	adds	r3, #1
 800a948:	2206      	movs	r2, #6
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f006 feea 	bl	8011726 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800a952:	f107 0314 	add.w	r3, r7, #20
 800a956:	3307      	adds	r3, #7
 800a958:	2202      	movs	r2, #2
 800a95a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a95c:	4618      	mov	r0, r3
 800a95e:	f006 fee2 	bl	8011726 <memcpy1>
    aes_encrypt( nonce, appSKey, &AesContext );
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	4a04      	ldr	r2, [pc, #16]	; (800a978 <LoRaMacJoinComputeSKeys+0xb0>)
 800a968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 fd08 	bl	800b380 <aes_encrypt>
}
 800a970:	bf00      	nop
 800a972:	3728      	adds	r7, #40	; 0x28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	2000055c 	.word	0x2000055c

0800a97c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781a      	ldrb	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3301      	adds	r3, #1
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	7852      	ldrb	r2, [r2, #1]
 800a996:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3302      	adds	r3, #2
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	7892      	ldrb	r2, [r2, #2]
 800a9a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3303      	adds	r3, #3
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	78d2      	ldrb	r2, [r2, #3]
 800a9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	7912      	ldrb	r2, [r2, #4]
 800a9b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3305      	adds	r3, #5
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	7952      	ldrb	r2, [r2, #5]
 800a9be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3306      	adds	r3, #6
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	7992      	ldrb	r2, [r2, #6]
 800a9c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3307      	adds	r3, #7
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	79d2      	ldrb	r2, [r2, #7]
 800a9d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	7a12      	ldrb	r2, [r2, #8]
 800a9dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3309      	adds	r3, #9
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	7a52      	ldrb	r2, [r2, #9]
 800a9e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	330a      	adds	r3, #10
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	7a92      	ldrb	r2, [r2, #10]
 800a9f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	330b      	adds	r3, #11
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	7ad2      	ldrb	r2, [r2, #11]
 800a9fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	330c      	adds	r3, #12
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	7b12      	ldrb	r2, [r2, #12]
 800aa04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	330d      	adds	r3, #13
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	7b52      	ldrb	r2, [r2, #13]
 800aa0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	330e      	adds	r3, #14
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	7b92      	ldrb	r2, [r2, #14]
 800aa18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	330f      	adds	r3, #15
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	7bd2      	ldrb	r2, [r2, #15]
 800aa22:	701a      	strb	r2, [r3, #0]
#endif
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr

0800aa2e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aa3c:	e007      	b.n	800aa4e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	1c53      	adds	r3, r2, #1
 800aa42:	60bb      	str	r3, [r7, #8]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1c59      	adds	r1, r3, #1
 800aa48:	60f9      	str	r1, [r7, #12]
 800aa4a:	7812      	ldrb	r2, [r2, #0]
 800aa4c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	1e5a      	subs	r2, r3, #1
 800aa52:	71fa      	strb	r2, [r7, #7]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1f2      	bne.n	800aa3e <copy_block_nn+0x10>
}
 800aa58:	bf00      	nop
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr

0800aa62 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	4053      	eors	r3, r2
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	7819      	ldrb	r1, [r3, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	781a      	ldrb	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	404a      	eors	r2, r1
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3302      	adds	r3, #2
 800aa96:	7819      	ldrb	r1, [r3, #0]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	404a      	eors	r2, r1
 800aaa4:	b2d2      	uxtb	r2, r2
 800aaa6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3303      	adds	r3, #3
 800aaac:	7819      	ldrb	r1, [r3, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	3303      	adds	r3, #3
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3303      	adds	r3, #3
 800aab8:	404a      	eors	r2, r1
 800aaba:	b2d2      	uxtb	r2, r2
 800aabc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3304      	adds	r3, #4
 800aac2:	7819      	ldrb	r1, [r3, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3304      	adds	r3, #4
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3304      	adds	r3, #4
 800aace:	404a      	eors	r2, r1
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3305      	adds	r3, #5
 800aad8:	7819      	ldrb	r1, [r3, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	3305      	adds	r3, #5
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3305      	adds	r3, #5
 800aae4:	404a      	eors	r2, r1
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3306      	adds	r3, #6
 800aaee:	7819      	ldrb	r1, [r3, #0]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	3306      	adds	r3, #6
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3306      	adds	r3, #6
 800aafa:	404a      	eors	r2, r1
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3307      	adds	r3, #7
 800ab04:	7819      	ldrb	r1, [r3, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	3307      	adds	r3, #7
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3307      	adds	r3, #7
 800ab10:	404a      	eors	r2, r1
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3308      	adds	r3, #8
 800ab1a:	7819      	ldrb	r1, [r3, #0]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	3308      	adds	r3, #8
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3308      	adds	r3, #8
 800ab26:	404a      	eors	r2, r1
 800ab28:	b2d2      	uxtb	r2, r2
 800ab2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3309      	adds	r3, #9
 800ab30:	7819      	ldrb	r1, [r3, #0]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	3309      	adds	r3, #9
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3309      	adds	r3, #9
 800ab3c:	404a      	eors	r2, r1
 800ab3e:	b2d2      	uxtb	r2, r2
 800ab40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	330a      	adds	r3, #10
 800ab46:	7819      	ldrb	r1, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	330a      	adds	r3, #10
 800ab4c:	781a      	ldrb	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	330a      	adds	r3, #10
 800ab52:	404a      	eors	r2, r1
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	330b      	adds	r3, #11
 800ab5c:	7819      	ldrb	r1, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	330b      	adds	r3, #11
 800ab62:	781a      	ldrb	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	330b      	adds	r3, #11
 800ab68:	404a      	eors	r2, r1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	330c      	adds	r3, #12
 800ab72:	7819      	ldrb	r1, [r3, #0]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	330c      	adds	r3, #12
 800ab7e:	404a      	eors	r2, r1
 800ab80:	b2d2      	uxtb	r2, r2
 800ab82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	330d      	adds	r3, #13
 800ab88:	7819      	ldrb	r1, [r3, #0]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	330d      	adds	r3, #13
 800ab8e:	781a      	ldrb	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	330d      	adds	r3, #13
 800ab94:	404a      	eors	r2, r1
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	330e      	adds	r3, #14
 800ab9e:	7819      	ldrb	r1, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	330e      	adds	r3, #14
 800aba4:	781a      	ldrb	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	330e      	adds	r3, #14
 800abaa:	404a      	eors	r2, r1
 800abac:	b2d2      	uxtb	r2, r2
 800abae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	330f      	adds	r3, #15
 800abb4:	7819      	ldrb	r1, [r3, #0]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	330f      	adds	r3, #15
 800abba:	781a      	ldrb	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	330f      	adds	r3, #15
 800abc0:	404a      	eors	r2, r1
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	701a      	strb	r2, [r3, #0]
#endif
}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	bc80      	pop	{r7}
 800abce:	4770      	bx	lr

0800abd0 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	4053      	eors	r3, r2
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	3301      	adds	r3, #1
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3301      	adds	r3, #1
 800abf6:	781a      	ldrb	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
 800abfc:	404a      	eors	r2, r1
 800abfe:	b2d2      	uxtb	r2, r2
 800ac00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3302      	adds	r3, #2
 800ac06:	7819      	ldrb	r1, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3302      	adds	r3, #2
 800ac0c:	781a      	ldrb	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3302      	adds	r3, #2
 800ac12:	404a      	eors	r2, r1
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	3303      	adds	r3, #3
 800ac1c:	7819      	ldrb	r1, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3303      	adds	r3, #3
 800ac22:	781a      	ldrb	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3303      	adds	r3, #3
 800ac28:	404a      	eors	r2, r1
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3304      	adds	r3, #4
 800ac32:	7819      	ldrb	r1, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3304      	adds	r3, #4
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	404a      	eors	r2, r1
 800ac40:	b2d2      	uxtb	r2, r2
 800ac42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	3305      	adds	r3, #5
 800ac48:	7819      	ldrb	r1, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3305      	adds	r3, #5
 800ac4e:	781a      	ldrb	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3305      	adds	r3, #5
 800ac54:	404a      	eors	r2, r1
 800ac56:	b2d2      	uxtb	r2, r2
 800ac58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	3306      	adds	r3, #6
 800ac5e:	7819      	ldrb	r1, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3306      	adds	r3, #6
 800ac64:	781a      	ldrb	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3306      	adds	r3, #6
 800ac6a:	404a      	eors	r2, r1
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	3307      	adds	r3, #7
 800ac74:	7819      	ldrb	r1, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3307      	adds	r3, #7
 800ac80:	404a      	eors	r2, r1
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	3308      	adds	r3, #8
 800ac8a:	7819      	ldrb	r1, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3308      	adds	r3, #8
 800ac96:	404a      	eors	r2, r1
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	3309      	adds	r3, #9
 800aca0:	7819      	ldrb	r1, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3309      	adds	r3, #9
 800aca6:	781a      	ldrb	r2, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3309      	adds	r3, #9
 800acac:	404a      	eors	r2, r1
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	330a      	adds	r3, #10
 800acb6:	7819      	ldrb	r1, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	330a      	adds	r3, #10
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	330a      	adds	r3, #10
 800acc2:	404a      	eors	r2, r1
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	330b      	adds	r3, #11
 800accc:	7819      	ldrb	r1, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	330b      	adds	r3, #11
 800acd2:	781a      	ldrb	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	330b      	adds	r3, #11
 800acd8:	404a      	eors	r2, r1
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	330c      	adds	r3, #12
 800ace2:	7819      	ldrb	r1, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	330c      	adds	r3, #12
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	330c      	adds	r3, #12
 800acee:	404a      	eors	r2, r1
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	330d      	adds	r3, #13
 800acf8:	7819      	ldrb	r1, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	330d      	adds	r3, #13
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	330d      	adds	r3, #13
 800ad04:	404a      	eors	r2, r1
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	330e      	adds	r3, #14
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	330e      	adds	r3, #14
 800ad14:	781a      	ldrb	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	330e      	adds	r3, #14
 800ad1a:	404a      	eors	r2, r1
 800ad1c:	b2d2      	uxtb	r2, r2
 800ad1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	330f      	adds	r3, #15
 800ad24:	7819      	ldrb	r1, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	330f      	adds	r3, #15
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	330f      	adds	r3, #15
 800ad30:	404a      	eors	r2, r1
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bc80      	pop	{r7}
 800ad3e:	4770      	bx	lr

0800ad40 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fe88 	bl	800aa62 <xor_block>
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b48      	ldr	r3, [pc, #288]	; (800ae8c <shift_sub_rows+0x130>)
 800ad6c:	5c9a      	ldrb	r2, [r3, r2]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3304      	adds	r3, #4
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4a43      	ldr	r2, [pc, #268]	; (800ae8c <shift_sub_rows+0x130>)
 800ad80:	5c52      	ldrb	r2, [r2, r1]
 800ad82:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3308      	adds	r3, #8
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	4a3e      	ldr	r2, [pc, #248]	; (800ae8c <shift_sub_rows+0x130>)
 800ad92:	5c52      	ldrb	r2, [r2, r1]
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	330c      	adds	r3, #12
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	330c      	adds	r3, #12
 800ada2:	4a3a      	ldr	r2, [pc, #232]	; (800ae8c <shift_sub_rows+0x130>)
 800ada4:	5c52      	ldrb	r2, [r2, r1]
 800ada6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	73fb      	strb	r3, [r7, #15]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3305      	adds	r3, #5
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	4619      	mov	r1, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3301      	adds	r3, #1
 800adba:	4a34      	ldr	r2, [pc, #208]	; (800ae8c <shift_sub_rows+0x130>)
 800adbc:	5c52      	ldrb	r2, [r2, r1]
 800adbe:	701a      	strb	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3309      	adds	r3, #9
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3305      	adds	r3, #5
 800adcc:	4a2f      	ldr	r2, [pc, #188]	; (800ae8c <shift_sub_rows+0x130>)
 800adce:	5c52      	ldrb	r2, [r2, r1]
 800add0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	330d      	adds	r3, #13
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	4619      	mov	r1, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3309      	adds	r3, #9
 800adde:	4a2b      	ldr	r2, [pc, #172]	; (800ae8c <shift_sub_rows+0x130>)
 800ade0:	5c52      	ldrb	r2, [r2, r1]
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	7bfa      	ldrb	r2, [r7, #15]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	330d      	adds	r3, #13
 800adea:	4928      	ldr	r1, [pc, #160]	; (800ae8c <shift_sub_rows+0x130>)
 800adec:	5c8a      	ldrb	r2, [r1, r2]
 800adee:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	789b      	ldrb	r3, [r3, #2]
 800adf4:	73fb      	strb	r3, [r7, #15]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	330a      	adds	r3, #10
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4619      	mov	r1, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3302      	adds	r3, #2
 800ae02:	4a22      	ldr	r2, [pc, #136]	; (800ae8c <shift_sub_rows+0x130>)
 800ae04:	5c52      	ldrb	r2, [r2, r1]
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	7bfa      	ldrb	r2, [r7, #15]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	330a      	adds	r3, #10
 800ae0e:	491f      	ldr	r1, [pc, #124]	; (800ae8c <shift_sub_rows+0x130>)
 800ae10:	5c8a      	ldrb	r2, [r1, r2]
 800ae12:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	799b      	ldrb	r3, [r3, #6]
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	330e      	adds	r3, #14
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3306      	adds	r3, #6
 800ae26:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <shift_sub_rows+0x130>)
 800ae28:	5c52      	ldrb	r2, [r2, r1]
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	7bfa      	ldrb	r2, [r7, #15]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	330e      	adds	r3, #14
 800ae32:	4916      	ldr	r1, [pc, #88]	; (800ae8c <shift_sub_rows+0x130>)
 800ae34:	5c8a      	ldrb	r2, [r1, r2]
 800ae36:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7bdb      	ldrb	r3, [r3, #15]
 800ae3c:	73fb      	strb	r3, [r7, #15]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	330b      	adds	r3, #11
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	4619      	mov	r1, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	330f      	adds	r3, #15
 800ae4a:	4a10      	ldr	r2, [pc, #64]	; (800ae8c <shift_sub_rows+0x130>)
 800ae4c:	5c52      	ldrb	r2, [r2, r1]
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3307      	adds	r3, #7
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	4619      	mov	r1, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	330b      	adds	r3, #11
 800ae5c:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <shift_sub_rows+0x130>)
 800ae5e:	5c52      	ldrb	r2, [r2, r1]
 800ae60:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3303      	adds	r3, #3
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3307      	adds	r3, #7
 800ae6e:	4a07      	ldr	r2, [pc, #28]	; (800ae8c <shift_sub_rows+0x130>)
 800ae70:	5c52      	ldrb	r2, [r2, r1]
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	7bfa      	ldrb	r2, [r7, #15]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	4904      	ldr	r1, [pc, #16]	; (800ae8c <shift_sub_rows+0x130>)
 800ae7c:	5c8a      	ldrb	r2, [r1, r2]
 800ae7e:	701a      	strb	r2, [r3, #0]
}
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bc80      	pop	{r7}
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	080124cc 	.word	0x080124cc

0800ae90 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ae98:	f107 0308 	add.w	r3, r7, #8
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff fd6c 	bl	800a97c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800aea4:	7a3b      	ldrb	r3, [r7, #8]
 800aea6:	461a      	mov	r2, r3
 800aea8:	4b9a      	ldr	r3, [pc, #616]	; (800b114 <mix_sub_columns+0x284>)
 800aeaa:	5c9a      	ldrb	r2, [r3, r2]
 800aeac:	7b7b      	ldrb	r3, [r7, #13]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4b99      	ldr	r3, [pc, #612]	; (800b118 <mix_sub_columns+0x288>)
 800aeb2:	5c5b      	ldrb	r3, [r3, r1]
 800aeb4:	4053      	eors	r3, r2
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	7cbb      	ldrb	r3, [r7, #18]
 800aeba:	4619      	mov	r1, r3
 800aebc:	4b97      	ldr	r3, [pc, #604]	; (800b11c <mix_sub_columns+0x28c>)
 800aebe:	5c5b      	ldrb	r3, [r3, r1]
 800aec0:	4053      	eors	r3, r2
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
 800aec6:	4619      	mov	r1, r3
 800aec8:	4b94      	ldr	r3, [pc, #592]	; (800b11c <mix_sub_columns+0x28c>)
 800aeca:	5c5b      	ldrb	r3, [r3, r1]
 800aecc:	4053      	eors	r3, r2
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800aed4:	7a3b      	ldrb	r3, [r7, #8]
 800aed6:	461a      	mov	r2, r3
 800aed8:	4b90      	ldr	r3, [pc, #576]	; (800b11c <mix_sub_columns+0x28c>)
 800aeda:	5c9a      	ldrb	r2, [r3, r2]
 800aedc:	7b7b      	ldrb	r3, [r7, #13]
 800aede:	4619      	mov	r1, r3
 800aee0:	4b8c      	ldr	r3, [pc, #560]	; (800b114 <mix_sub_columns+0x284>)
 800aee2:	5c5b      	ldrb	r3, [r3, r1]
 800aee4:	4053      	eors	r3, r2
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	7cbb      	ldrb	r3, [r7, #18]
 800aeea:	4619      	mov	r1, r3
 800aeec:	4b8a      	ldr	r3, [pc, #552]	; (800b118 <mix_sub_columns+0x288>)
 800aeee:	5c5b      	ldrb	r3, [r3, r1]
 800aef0:	4053      	eors	r3, r2
 800aef2:	b2d9      	uxtb	r1, r3
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	461a      	mov	r2, r3
 800aef8:	4b88      	ldr	r3, [pc, #544]	; (800b11c <mix_sub_columns+0x28c>)
 800aefa:	5c9a      	ldrb	r2, [r3, r2]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3301      	adds	r3, #1
 800af00:	404a      	eors	r2, r1
 800af02:	b2d2      	uxtb	r2, r2
 800af04:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800af06:	7a3b      	ldrb	r3, [r7, #8]
 800af08:	461a      	mov	r2, r3
 800af0a:	4b84      	ldr	r3, [pc, #528]	; (800b11c <mix_sub_columns+0x28c>)
 800af0c:	5c9a      	ldrb	r2, [r3, r2]
 800af0e:	7b7b      	ldrb	r3, [r7, #13]
 800af10:	4619      	mov	r1, r3
 800af12:	4b82      	ldr	r3, [pc, #520]	; (800b11c <mix_sub_columns+0x28c>)
 800af14:	5c5b      	ldrb	r3, [r3, r1]
 800af16:	4053      	eors	r3, r2
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	7cbb      	ldrb	r3, [r7, #18]
 800af1c:	4619      	mov	r1, r3
 800af1e:	4b7d      	ldr	r3, [pc, #500]	; (800b114 <mix_sub_columns+0x284>)
 800af20:	5c5b      	ldrb	r3, [r3, r1]
 800af22:	4053      	eors	r3, r2
 800af24:	b2d9      	uxtb	r1, r3
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	461a      	mov	r2, r3
 800af2a:	4b7b      	ldr	r3, [pc, #492]	; (800b118 <mix_sub_columns+0x288>)
 800af2c:	5c9a      	ldrb	r2, [r3, r2]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3302      	adds	r3, #2
 800af32:	404a      	eors	r2, r1
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800af38:	7a3b      	ldrb	r3, [r7, #8]
 800af3a:	461a      	mov	r2, r3
 800af3c:	4b76      	ldr	r3, [pc, #472]	; (800b118 <mix_sub_columns+0x288>)
 800af3e:	5c9a      	ldrb	r2, [r3, r2]
 800af40:	7b7b      	ldrb	r3, [r7, #13]
 800af42:	4619      	mov	r1, r3
 800af44:	4b75      	ldr	r3, [pc, #468]	; (800b11c <mix_sub_columns+0x28c>)
 800af46:	5c5b      	ldrb	r3, [r3, r1]
 800af48:	4053      	eors	r3, r2
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	7cbb      	ldrb	r3, [r7, #18]
 800af4e:	4619      	mov	r1, r3
 800af50:	4b72      	ldr	r3, [pc, #456]	; (800b11c <mix_sub_columns+0x28c>)
 800af52:	5c5b      	ldrb	r3, [r3, r1]
 800af54:	4053      	eors	r3, r2
 800af56:	b2d9      	uxtb	r1, r3
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	461a      	mov	r2, r3
 800af5c:	4b6d      	ldr	r3, [pc, #436]	; (800b114 <mix_sub_columns+0x284>)
 800af5e:	5c9a      	ldrb	r2, [r3, r2]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3303      	adds	r3, #3
 800af64:	404a      	eors	r2, r1
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800af6a:	7b3b      	ldrb	r3, [r7, #12]
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b69      	ldr	r3, [pc, #420]	; (800b114 <mix_sub_columns+0x284>)
 800af70:	5c9a      	ldrb	r2, [r3, r2]
 800af72:	7c7b      	ldrb	r3, [r7, #17]
 800af74:	4619      	mov	r1, r3
 800af76:	4b68      	ldr	r3, [pc, #416]	; (800b118 <mix_sub_columns+0x288>)
 800af78:	5c5b      	ldrb	r3, [r3, r1]
 800af7a:	4053      	eors	r3, r2
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	7dbb      	ldrb	r3, [r7, #22]
 800af80:	4619      	mov	r1, r3
 800af82:	4b66      	ldr	r3, [pc, #408]	; (800b11c <mix_sub_columns+0x28c>)
 800af84:	5c5b      	ldrb	r3, [r3, r1]
 800af86:	4053      	eors	r3, r2
 800af88:	b2d9      	uxtb	r1, r3
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	461a      	mov	r2, r3
 800af8e:	4b63      	ldr	r3, [pc, #396]	; (800b11c <mix_sub_columns+0x28c>)
 800af90:	5c9a      	ldrb	r2, [r3, r2]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3304      	adds	r3, #4
 800af96:	404a      	eors	r2, r1
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800af9c:	7b3b      	ldrb	r3, [r7, #12]
 800af9e:	461a      	mov	r2, r3
 800afa0:	4b5e      	ldr	r3, [pc, #376]	; (800b11c <mix_sub_columns+0x28c>)
 800afa2:	5c9a      	ldrb	r2, [r3, r2]
 800afa4:	7c7b      	ldrb	r3, [r7, #17]
 800afa6:	4619      	mov	r1, r3
 800afa8:	4b5a      	ldr	r3, [pc, #360]	; (800b114 <mix_sub_columns+0x284>)
 800afaa:	5c5b      	ldrb	r3, [r3, r1]
 800afac:	4053      	eors	r3, r2
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	7dbb      	ldrb	r3, [r7, #22]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b58      	ldr	r3, [pc, #352]	; (800b118 <mix_sub_columns+0x288>)
 800afb6:	5c5b      	ldrb	r3, [r3, r1]
 800afb8:	4053      	eors	r3, r2
 800afba:	b2d9      	uxtb	r1, r3
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	461a      	mov	r2, r3
 800afc0:	4b56      	ldr	r3, [pc, #344]	; (800b11c <mix_sub_columns+0x28c>)
 800afc2:	5c9a      	ldrb	r2, [r3, r2]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3305      	adds	r3, #5
 800afc8:	404a      	eors	r2, r1
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800afce:	7b3b      	ldrb	r3, [r7, #12]
 800afd0:	461a      	mov	r2, r3
 800afd2:	4b52      	ldr	r3, [pc, #328]	; (800b11c <mix_sub_columns+0x28c>)
 800afd4:	5c9a      	ldrb	r2, [r3, r2]
 800afd6:	7c7b      	ldrb	r3, [r7, #17]
 800afd8:	4619      	mov	r1, r3
 800afda:	4b50      	ldr	r3, [pc, #320]	; (800b11c <mix_sub_columns+0x28c>)
 800afdc:	5c5b      	ldrb	r3, [r3, r1]
 800afde:	4053      	eors	r3, r2
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	7dbb      	ldrb	r3, [r7, #22]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4b4b      	ldr	r3, [pc, #300]	; (800b114 <mix_sub_columns+0x284>)
 800afe8:	5c5b      	ldrb	r3, [r3, r1]
 800afea:	4053      	eors	r3, r2
 800afec:	b2d9      	uxtb	r1, r3
 800afee:	7afb      	ldrb	r3, [r7, #11]
 800aff0:	461a      	mov	r2, r3
 800aff2:	4b49      	ldr	r3, [pc, #292]	; (800b118 <mix_sub_columns+0x288>)
 800aff4:	5c9a      	ldrb	r2, [r3, r2]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3306      	adds	r3, #6
 800affa:	404a      	eors	r2, r1
 800affc:	b2d2      	uxtb	r2, r2
 800affe:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b000:	7b3b      	ldrb	r3, [r7, #12]
 800b002:	461a      	mov	r2, r3
 800b004:	4b44      	ldr	r3, [pc, #272]	; (800b118 <mix_sub_columns+0x288>)
 800b006:	5c9a      	ldrb	r2, [r3, r2]
 800b008:	7c7b      	ldrb	r3, [r7, #17]
 800b00a:	4619      	mov	r1, r3
 800b00c:	4b43      	ldr	r3, [pc, #268]	; (800b11c <mix_sub_columns+0x28c>)
 800b00e:	5c5b      	ldrb	r3, [r3, r1]
 800b010:	4053      	eors	r3, r2
 800b012:	b2da      	uxtb	r2, r3
 800b014:	7dbb      	ldrb	r3, [r7, #22]
 800b016:	4619      	mov	r1, r3
 800b018:	4b40      	ldr	r3, [pc, #256]	; (800b11c <mix_sub_columns+0x28c>)
 800b01a:	5c5b      	ldrb	r3, [r3, r1]
 800b01c:	4053      	eors	r3, r2
 800b01e:	b2d9      	uxtb	r1, r3
 800b020:	7afb      	ldrb	r3, [r7, #11]
 800b022:	461a      	mov	r2, r3
 800b024:	4b3b      	ldr	r3, [pc, #236]	; (800b114 <mix_sub_columns+0x284>)
 800b026:	5c9a      	ldrb	r2, [r3, r2]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3307      	adds	r3, #7
 800b02c:	404a      	eors	r2, r1
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b032:	7c3b      	ldrb	r3, [r7, #16]
 800b034:	461a      	mov	r2, r3
 800b036:	4b37      	ldr	r3, [pc, #220]	; (800b114 <mix_sub_columns+0x284>)
 800b038:	5c9a      	ldrb	r2, [r3, r2]
 800b03a:	7d7b      	ldrb	r3, [r7, #21]
 800b03c:	4619      	mov	r1, r3
 800b03e:	4b36      	ldr	r3, [pc, #216]	; (800b118 <mix_sub_columns+0x288>)
 800b040:	5c5b      	ldrb	r3, [r3, r1]
 800b042:	4053      	eors	r3, r2
 800b044:	b2da      	uxtb	r2, r3
 800b046:	7abb      	ldrb	r3, [r7, #10]
 800b048:	4619      	mov	r1, r3
 800b04a:	4b34      	ldr	r3, [pc, #208]	; (800b11c <mix_sub_columns+0x28c>)
 800b04c:	5c5b      	ldrb	r3, [r3, r1]
 800b04e:	4053      	eors	r3, r2
 800b050:	b2d9      	uxtb	r1, r3
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	461a      	mov	r2, r3
 800b056:	4b31      	ldr	r3, [pc, #196]	; (800b11c <mix_sub_columns+0x28c>)
 800b058:	5c9a      	ldrb	r2, [r3, r2]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3308      	adds	r3, #8
 800b05e:	404a      	eors	r2, r1
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b064:	7c3b      	ldrb	r3, [r7, #16]
 800b066:	461a      	mov	r2, r3
 800b068:	4b2c      	ldr	r3, [pc, #176]	; (800b11c <mix_sub_columns+0x28c>)
 800b06a:	5c9a      	ldrb	r2, [r3, r2]
 800b06c:	7d7b      	ldrb	r3, [r7, #21]
 800b06e:	4619      	mov	r1, r3
 800b070:	4b28      	ldr	r3, [pc, #160]	; (800b114 <mix_sub_columns+0x284>)
 800b072:	5c5b      	ldrb	r3, [r3, r1]
 800b074:	4053      	eors	r3, r2
 800b076:	b2da      	uxtb	r2, r3
 800b078:	7abb      	ldrb	r3, [r7, #10]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4b26      	ldr	r3, [pc, #152]	; (800b118 <mix_sub_columns+0x288>)
 800b07e:	5c5b      	ldrb	r3, [r3, r1]
 800b080:	4053      	eors	r3, r2
 800b082:	b2d9      	uxtb	r1, r3
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	461a      	mov	r2, r3
 800b088:	4b24      	ldr	r3, [pc, #144]	; (800b11c <mix_sub_columns+0x28c>)
 800b08a:	5c9a      	ldrb	r2, [r3, r2]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3309      	adds	r3, #9
 800b090:	404a      	eors	r2, r1
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b096:	7c3b      	ldrb	r3, [r7, #16]
 800b098:	461a      	mov	r2, r3
 800b09a:	4b20      	ldr	r3, [pc, #128]	; (800b11c <mix_sub_columns+0x28c>)
 800b09c:	5c9a      	ldrb	r2, [r3, r2]
 800b09e:	7d7b      	ldrb	r3, [r7, #21]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4b1e      	ldr	r3, [pc, #120]	; (800b11c <mix_sub_columns+0x28c>)
 800b0a4:	5c5b      	ldrb	r3, [r3, r1]
 800b0a6:	4053      	eors	r3, r2
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	7abb      	ldrb	r3, [r7, #10]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4b19      	ldr	r3, [pc, #100]	; (800b114 <mix_sub_columns+0x284>)
 800b0b0:	5c5b      	ldrb	r3, [r3, r1]
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	b2d9      	uxtb	r1, r3
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b17      	ldr	r3, [pc, #92]	; (800b118 <mix_sub_columns+0x288>)
 800b0bc:	5c9a      	ldrb	r2, [r3, r2]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	330a      	adds	r3, #10
 800b0c2:	404a      	eors	r2, r1
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b0c8:	7c3b      	ldrb	r3, [r7, #16]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4b12      	ldr	r3, [pc, #72]	; (800b118 <mix_sub_columns+0x288>)
 800b0ce:	5c9a      	ldrb	r2, [r3, r2]
 800b0d0:	7d7b      	ldrb	r3, [r7, #21]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4b11      	ldr	r3, [pc, #68]	; (800b11c <mix_sub_columns+0x28c>)
 800b0d6:	5c5b      	ldrb	r3, [r3, r1]
 800b0d8:	4053      	eors	r3, r2
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	7abb      	ldrb	r3, [r7, #10]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4b0e      	ldr	r3, [pc, #56]	; (800b11c <mix_sub_columns+0x28c>)
 800b0e2:	5c5b      	ldrb	r3, [r3, r1]
 800b0e4:	4053      	eors	r3, r2
 800b0e6:	b2d9      	uxtb	r1, r3
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <mix_sub_columns+0x284>)
 800b0ee:	5c9a      	ldrb	r2, [r3, r2]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	330b      	adds	r3, #11
 800b0f4:	404a      	eors	r2, r1
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b0fa:	7d3b      	ldrb	r3, [r7, #20]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <mix_sub_columns+0x284>)
 800b100:	5c9a      	ldrb	r2, [r3, r2]
 800b102:	7a7b      	ldrb	r3, [r7, #9]
 800b104:	4619      	mov	r1, r3
 800b106:	4b04      	ldr	r3, [pc, #16]	; (800b118 <mix_sub_columns+0x288>)
 800b108:	5c5b      	ldrb	r3, [r3, r1]
 800b10a:	4053      	eors	r3, r2
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	4619      	mov	r1, r3
 800b112:	e005      	b.n	800b120 <mix_sub_columns+0x290>
 800b114:	080125cc 	.word	0x080125cc
 800b118:	080126cc 	.word	0x080126cc
 800b11c:	080124cc 	.word	0x080124cc
 800b120:	4b2d      	ldr	r3, [pc, #180]	; (800b1d8 <mix_sub_columns+0x348>)
 800b122:	5c5b      	ldrb	r3, [r3, r1]
 800b124:	4053      	eors	r3, r2
 800b126:	b2d9      	uxtb	r1, r3
 800b128:	7cfb      	ldrb	r3, [r7, #19]
 800b12a:	461a      	mov	r2, r3
 800b12c:	4b2a      	ldr	r3, [pc, #168]	; (800b1d8 <mix_sub_columns+0x348>)
 800b12e:	5c9a      	ldrb	r2, [r3, r2]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	330c      	adds	r3, #12
 800b134:	404a      	eors	r2, r1
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b13a:	7d3b      	ldrb	r3, [r7, #20]
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b26      	ldr	r3, [pc, #152]	; (800b1d8 <mix_sub_columns+0x348>)
 800b140:	5c9a      	ldrb	r2, [r3, r2]
 800b142:	7a7b      	ldrb	r3, [r7, #9]
 800b144:	4619      	mov	r1, r3
 800b146:	4b25      	ldr	r3, [pc, #148]	; (800b1dc <mix_sub_columns+0x34c>)
 800b148:	5c5b      	ldrb	r3, [r3, r1]
 800b14a:	4053      	eors	r3, r2
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	4619      	mov	r1, r3
 800b152:	4b23      	ldr	r3, [pc, #140]	; (800b1e0 <mix_sub_columns+0x350>)
 800b154:	5c5b      	ldrb	r3, [r3, r1]
 800b156:	4053      	eors	r3, r2
 800b158:	b2d9      	uxtb	r1, r3
 800b15a:	7cfb      	ldrb	r3, [r7, #19]
 800b15c:	461a      	mov	r2, r3
 800b15e:	4b1e      	ldr	r3, [pc, #120]	; (800b1d8 <mix_sub_columns+0x348>)
 800b160:	5c9a      	ldrb	r2, [r3, r2]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	330d      	adds	r3, #13
 800b166:	404a      	eors	r2, r1
 800b168:	b2d2      	uxtb	r2, r2
 800b16a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b16c:	7d3b      	ldrb	r3, [r7, #20]
 800b16e:	461a      	mov	r2, r3
 800b170:	4b19      	ldr	r3, [pc, #100]	; (800b1d8 <mix_sub_columns+0x348>)
 800b172:	5c9a      	ldrb	r2, [r3, r2]
 800b174:	7a7b      	ldrb	r3, [r7, #9]
 800b176:	4619      	mov	r1, r3
 800b178:	4b17      	ldr	r3, [pc, #92]	; (800b1d8 <mix_sub_columns+0x348>)
 800b17a:	5c5b      	ldrb	r3, [r3, r1]
 800b17c:	4053      	eors	r3, r2
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	4619      	mov	r1, r3
 800b184:	4b15      	ldr	r3, [pc, #84]	; (800b1dc <mix_sub_columns+0x34c>)
 800b186:	5c5b      	ldrb	r3, [r3, r1]
 800b188:	4053      	eors	r3, r2
 800b18a:	b2d9      	uxtb	r1, r3
 800b18c:	7cfb      	ldrb	r3, [r7, #19]
 800b18e:	461a      	mov	r2, r3
 800b190:	4b13      	ldr	r3, [pc, #76]	; (800b1e0 <mix_sub_columns+0x350>)
 800b192:	5c9a      	ldrb	r2, [r3, r2]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	330e      	adds	r3, #14
 800b198:	404a      	eors	r2, r1
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b19e:	7d3b      	ldrb	r3, [r7, #20]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <mix_sub_columns+0x350>)
 800b1a4:	5c9a      	ldrb	r2, [r3, r2]
 800b1a6:	7a7b      	ldrb	r3, [r7, #9]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <mix_sub_columns+0x348>)
 800b1ac:	5c5b      	ldrb	r3, [r3, r1]
 800b1ae:	4053      	eors	r3, r2
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <mix_sub_columns+0x348>)
 800b1b8:	5c5b      	ldrb	r3, [r3, r1]
 800b1ba:	4053      	eors	r3, r2
 800b1bc:	b2d9      	uxtb	r1, r3
 800b1be:	7cfb      	ldrb	r3, [r7, #19]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <mix_sub_columns+0x34c>)
 800b1c4:	5c9a      	ldrb	r2, [r3, r2]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	330f      	adds	r3, #15
 800b1ca:	404a      	eors	r2, r1
 800b1cc:	b2d2      	uxtb	r2, r2
 800b1ce:	701a      	strb	r2, [r3, #0]
  }
 800b1d0:	bf00      	nop
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	080124cc 	.word	0x080124cc
 800b1dc:	080125cc 	.word	0x080125cc
 800b1e0:	080126cc 	.word	0x080126cc

0800b1e4 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b1f2:	7afb      	ldrb	r3, [r7, #11]
 800b1f4:	2b18      	cmp	r3, #24
 800b1f6:	d009      	beq.n	800b20c <aes_set_key+0x28>
 800b1f8:	2b20      	cmp	r3, #32
 800b1fa:	d007      	beq.n	800b20c <aes_set_key+0x28>
 800b1fc:	2b10      	cmp	r3, #16
 800b1fe:	d005      	beq.n	800b20c <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b208:	23ff      	movs	r3, #255	; 0xff
 800b20a:	e0b2      	b.n	800b372 <aes_set_key+0x18e>
        break;
 800b20c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	7afa      	ldrb	r2, [r7, #11]
 800b212:	68f9      	ldr	r1, [r7, #12]
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fc0a 	bl	800aa2e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b21a:	7afb      	ldrb	r3, [r7, #11]
 800b21c:	331c      	adds	r3, #28
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b224:	7c7b      	ldrb	r3, [r7, #17]
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	3b01      	subs	r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	75fb      	strb	r3, [r7, #23]
 800b238:	2301      	movs	r3, #1
 800b23a:	75bb      	strb	r3, [r7, #22]
 800b23c:	e093      	b.n	800b366 <aes_set_key+0x182>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	3b04      	subs	r3, #4
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	5cd3      	ldrb	r3, [r2, r3]
 800b246:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	3b03      	subs	r3, #3
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	5cd3      	ldrb	r3, [r2, r3]
 800b250:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	3b02      	subs	r3, #2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	5cd3      	ldrb	r3, [r2, r3]
 800b25a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	3b01      	subs	r3, #1
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	5cd3      	ldrb	r3, [r2, r3]
 800b264:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	7afa      	ldrb	r2, [r7, #11]
 800b26a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b26e:	fb02 f201 	mul.w	r2, r2, r1
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d127      	bne.n	800b2ca <aes_set_key+0xe6>
        {
            tt = t0;
 800b27a:	7d7b      	ldrb	r3, [r7, #21]
 800b27c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b27e:	7d3b      	ldrb	r3, [r7, #20]
 800b280:	4a3e      	ldr	r2, [pc, #248]	; (800b37c <aes_set_key+0x198>)
 800b282:	5cd2      	ldrb	r2, [r2, r3]
 800b284:	7dbb      	ldrb	r3, [r7, #22]
 800b286:	4053      	eors	r3, r2
 800b288:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b28a:	7cfb      	ldrb	r3, [r7, #19]
 800b28c:	4a3b      	ldr	r2, [pc, #236]	; (800b37c <aes_set_key+0x198>)
 800b28e:	5cd3      	ldrb	r3, [r2, r3]
 800b290:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b292:	7cbb      	ldrb	r3, [r7, #18]
 800b294:	4a39      	ldr	r2, [pc, #228]	; (800b37c <aes_set_key+0x198>)
 800b296:	5cd3      	ldrb	r3, [r2, r3]
 800b298:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b29a:	7c3b      	ldrb	r3, [r7, #16]
 800b29c:	4a37      	ldr	r2, [pc, #220]	; (800b37c <aes_set_key+0x198>)
 800b29e:	5cd3      	ldrb	r3, [r2, r3]
 800b2a0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b2a2:	7dbb      	ldrb	r3, [r7, #22]
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	b25a      	sxtb	r2, r3
 800b2a8:	7dbb      	ldrb	r3, [r7, #22]
 800b2aa:	09db      	lsrs	r3, r3, #7
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	0049      	lsls	r1, r1, #1
 800b2b2:	440b      	add	r3, r1
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	00c8      	lsls	r0, r1, #3
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	440b      	add	r3, r1
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	b25b      	sxtb	r3, r3
 800b2c2:	4053      	eors	r3, r2
 800b2c4:	b25b      	sxtb	r3, r3
 800b2c6:	75bb      	strb	r3, [r7, #22]
 800b2c8:	e01c      	b.n	800b304 <aes_set_key+0x120>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	2b18      	cmp	r3, #24
 800b2ce:	d919      	bls.n	800b304 <aes_set_key+0x120>
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	7afa      	ldrb	r2, [r7, #11]
 800b2d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2d8:	fb02 f201 	mul.w	r2, r2, r1
 800b2dc:	1a9b      	subs	r3, r3, r2
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b10      	cmp	r3, #16
 800b2e2:	d10f      	bne.n	800b304 <aes_set_key+0x120>
        {
            t0 = s_box(t0);
 800b2e4:	7d7b      	ldrb	r3, [r7, #21]
 800b2e6:	4a25      	ldr	r2, [pc, #148]	; (800b37c <aes_set_key+0x198>)
 800b2e8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ea:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b2ec:	7d3b      	ldrb	r3, [r7, #20]
 800b2ee:	4a23      	ldr	r2, [pc, #140]	; (800b37c <aes_set_key+0x198>)
 800b2f0:	5cd3      	ldrb	r3, [r2, r3]
 800b2f2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b2f4:	7cfb      	ldrb	r3, [r7, #19]
 800b2f6:	4a21      	ldr	r2, [pc, #132]	; (800b37c <aes_set_key+0x198>)
 800b2f8:	5cd3      	ldrb	r3, [r2, r3]
 800b2fa:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b2fc:	7cbb      	ldrb	r3, [r7, #18]
 800b2fe:	4a1f      	ldr	r2, [pc, #124]	; (800b37c <aes_set_key+0x198>)
 800b300:	5cd3      	ldrb	r3, [r2, r3]
 800b302:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b304:	7dfa      	ldrb	r2, [r7, #23]
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b30c:	7c3b      	ldrb	r3, [r7, #16]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	5cd1      	ldrb	r1, [r2, r3]
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	7d7a      	ldrb	r2, [r7, #21]
 800b316:	404a      	eors	r2, r1
 800b318:	b2d1      	uxtb	r1, r2
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b31e:	7c3b      	ldrb	r3, [r7, #16]
 800b320:	3301      	adds	r3, #1
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	5cd1      	ldrb	r1, [r2, r3]
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	3301      	adds	r3, #1
 800b32a:	7d3a      	ldrb	r2, [r7, #20]
 800b32c:	404a      	eors	r2, r1
 800b32e:	b2d1      	uxtb	r1, r2
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b334:	7c3b      	ldrb	r3, [r7, #16]
 800b336:	3302      	adds	r3, #2
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	5cd1      	ldrb	r1, [r2, r3]
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	3302      	adds	r3, #2
 800b340:	7cfa      	ldrb	r2, [r7, #19]
 800b342:	404a      	eors	r2, r1
 800b344:	b2d1      	uxtb	r1, r2
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b34a:	7c3b      	ldrb	r3, [r7, #16]
 800b34c:	3303      	adds	r3, #3
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	5cd1      	ldrb	r1, [r2, r3]
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	3303      	adds	r3, #3
 800b356:	7cba      	ldrb	r2, [r7, #18]
 800b358:	404a      	eors	r2, r1
 800b35a:	b2d1      	uxtb	r1, r2
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	3304      	adds	r3, #4
 800b364:	75fb      	strb	r3, [r7, #23]
 800b366:	7dfa      	ldrb	r2, [r7, #23]
 800b368:	7c7b      	ldrb	r3, [r7, #17]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	f4ff af67 	bcc.w	800b23e <aes_set_key+0x5a>
    }
    return 0;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	080124cc 	.word	0x080124cc

0800b380 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08a      	sub	sp, #40	; 0x28
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d038      	beq.n	800b408 <aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	f107 0314 	add.w	r3, r7, #20
 800b39c:	68f9      	ldr	r1, [r7, #12]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff fc16 	bl	800abd0 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3aa:	e014      	b.n	800b3d6 <aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff fd6d 	bl	800ae90 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3bc:	0112      	lsls	r2, r2, #4
 800b3be:	441a      	add	r2, r3
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fcba 	bl	800ad40 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b3dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3e3      	bcc.n	800b3ac <aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b3e4:	f107 0314 	add.w	r3, r7, #20
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff fcb7 	bl	800ad5c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3f4:	0112      	lsls	r2, r2, #4
 800b3f6:	441a      	add	r2, r3
 800b3f8:	f107 0314 	add.w	r3, r7, #20
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	68b8      	ldr	r0, [r7, #8]
 800b400:	f7ff fbe6 	bl	800abd0 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b404:	2300      	movs	r3, #0
 800b406:	e000      	b.n	800b40a <aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b408:	23ff      	movs	r3, #255	; 0xff
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3728      	adds	r7, #40	; 0x28
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <OnCalibrateSystemWakeupTimeTimerEvent>:

/*!
* Callback indicating the end of the system wake-up time calibration
*/
static void OnCalibrateSystemWakeupTimeTimerEvent( void )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  TimerStop( &CalibrateSystemWakeupTimeTimer );
 800b418:	4803      	ldr	r0, [pc, #12]	; (800b428 <OnCalibrateSystemWakeupTimeTimerEvent+0x14>)
 800b41a:	f005 fd19 	bl	8010e50 <TimerStop>
  SystemWakeupTimeCalibrated = true;
 800b41e:	4b03      	ldr	r3, [pc, #12]	; (800b42c <OnCalibrateSystemWakeupTimeTimerEvent+0x18>)
 800b420:	2201      	movs	r2, #1
 800b422:	701a      	strb	r2, [r3, #0]
}
 800b424:	bf00      	nop
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20000768 	.word	0x20000768
 800b42c:	2000077d 	.word	0x2000077d

0800b430 <BoardDisableIrq>:
* \remark Interrupt should only be fully disabled once the value is 0
*/
static uint8_t IrqNestLevel = 0;

void BoardDisableIrq( void )
{
 800b430:	b480      	push	{r7}
 800b432:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b434:	b672      	cpsid	i
  __disable_irq( );
  IrqNestLevel++;
 800b436:	4b05      	ldr	r3, [pc, #20]	; (800b44c <BoardDisableIrq+0x1c>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	3301      	adds	r3, #1
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <BoardDisableIrq+0x1c>)
 800b440:	701a      	strb	r2, [r3, #0]
}
 800b442:	bf00      	nop
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	2000077e 	.word	0x2000077e

0800b450 <BoardEnableIrq>:

void BoardEnableIrq( void )
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  IrqNestLevel--;
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <BoardEnableIrq+0x24>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	3b01      	subs	r3, #1
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <BoardEnableIrq+0x24>)
 800b45e:	701a      	strb	r2, [r3, #0]
  if( IrqNestLevel == 0 )
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <BoardEnableIrq+0x24>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d100      	bne.n	800b46a <BoardEnableIrq+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800b468:	b662      	cpsie	i
  {
    __enable_irq( );
  }
}
 800b46a:	bf00      	nop
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	2000077e 	.word	0x2000077e

0800b478 <BoardInitPeriph>:

void BoardInitPeriph( void )
{  
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af02      	add	r7, sp, #8
	
    GpioInit( &EN_Vext, Vext, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800b47e:	2300      	movs	r3, #0
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2301      	movs	r3, #1
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	2201      	movs	r2, #1
 800b48a:	2113      	movs	r1, #19
 800b48c:	4808      	ldr	r0, [pc, #32]	; (800b4b0 <BoardInitPeriph+0x38>)
 800b48e:	f001 f89d 	bl	800c5cc <GpioInit>
	  GpioWrite(&EN_Vext, 0 );// Turn ON RF(SX1278) power
 800b492:	2100      	movs	r1, #0
 800b494:	4806      	ldr	r0, [pc, #24]	; (800b4b0 <BoardInitPeriph+0x38>)
 800b496:	f001 f8d8 	bl	800c64a <GpioWrite>
		HAL_Delay(1000);
 800b49a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b49e:	f7f5 fb83 	bl	8000ba8 <HAL_Delay>
#if defined ADC_measurement
	    MX_GPIO_Init();
 800b4a2:	f001 f941 	bl	800c728 <MX_GPIO_Init>
	    MX_ADC_Init();
 800b4a6:	f001 f8e5 	bl	800c674 <MX_ADC_Init>
#endif
}
 800b4aa:	bf00      	nop
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20000c20 	.word	0x20000c20

0800b4b4 <BoardInitMcu>:
    }
  }
}

void BoardInitMcu( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af02      	add	r7, sp, #8
#if defined ADC_measurement
    SystemClock_Config();
 800b4ba:	f002 ff3d 	bl	800e338 <SystemClock_Config>
#endif
  if( McuInitialized == false )
 800b4be:	4b1a      	ldr	r3, [pc, #104]	; (800b528 <BoardInitMcu+0x74>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	f083 0301 	eor.w	r3, r3, #1
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <BoardInitMcu+0x30>
  {
#if defined( USE_BOOTLOADER )
    // Set the Vector Table base location at 0x3000
    SCB->VTOR = FLASH_BASE | 0x3000;
#endif
    HAL_Init( );
 800b4cc:	f7f5 fafe 	bl	8000acc <HAL_Init>
    
    SystemClockConfig( );
 800b4d0:	f000 f9ce 	bl	800b870 <SystemClockConfig>
#elif defined( USE_DEBUGGER ) && defined( USB_VCP )
	USB_VCP_init();
//	HAL_Delay( 3000 ); //wait for usb init
	DebugPrintf("USB CDC init done!\r\n");
#endif
    DebugPrintf("Heltec lora node demo\r\n");
 800b4d4:	4815      	ldr	r0, [pc, #84]	; (800b52c <BoardInitMcu+0x78>)
 800b4d6:	f005 fed9 	bl	801128c <DebugPrintf>
    RtcInit( );
 800b4da:	f001 fefb 	bl	800d2d4 <RtcInit>
    
    BoardUnusedIoInit( );
 800b4de:	f000 f8bf 	bl	800b660 <BoardUnusedIoInit>
 800b4e2:	e001      	b.n	800b4e8 <BoardInitMcu+0x34>
//#warning "Commented for test!"
  }
  else
  {
    SystemClockReConfig( );
 800b4e4:	f000 fa7a 	bl	800b9dc <SystemClockReConfig>
//#warning "Commented for test!"
  }

  SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2305      	movs	r3, #5
 800b4f0:	2206      	movs	r2, #6
 800b4f2:	2107      	movs	r1, #7
 800b4f4:	480e      	ldr	r0, [pc, #56]	; (800b530 <BoardInitMcu+0x7c>)
 800b4f6:	f002 fc3d 	bl	800dd74 <SpiInit>
  SX1276IoInit( );
 800b4fa:	f002 ffcb 	bl	800e494 <SX1276IoInit>

  if( McuInitialized == false )
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <BoardInitMcu+0x74>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	f083 0301 	eor.w	r3, r3, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <BoardInitMcu+0x6c>
  {
    McuInitialized = true;
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <BoardInitMcu+0x74>)
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
    if( GetBoardPowerSource( ) == BATTERY_POWER )
 800b512:	f000 fac7 	bl	800baa4 <GetBoardPowerSource>
 800b516:	4603      	mov	r3, r0
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <BoardInitMcu+0x6c>
    {
      CalibrateSystemWakeupTime( );
 800b51c:	f000 fa36 	bl	800b98c <CalibrateSystemWakeupTime>
    }

  }
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	2000077c 	.word	0x2000077c
 800b52c:	0801238c 	.word	0x0801238c
 800b530:	20000f2c 	.word	0x20000f2c

0800b534 <BoardDeInitMcu>:

void BoardDeInitMcu( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af02      	add	r7, sp, #8
  Gpio_t ioPin;
  
  SpiDeInit( &SX1276.Spi );
 800b53a:	4818      	ldr	r0, [pc, #96]	; (800b59c <BoardDeInitMcu+0x68>)
 800b53c:	f002 fd1a 	bl	800df74 <SpiDeInit>
  SX1276IoDeInit( );
 800b540:	f002 ffee 	bl	800e520 <SX1276IoDeInit>
  
  GpioInit( &ioPin, OSC_HSE_IN, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b544:	1d38      	adds	r0, r7, #4
 800b546:	2300      	movs	r3, #0
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	2300      	movs	r3, #0
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	2203      	movs	r2, #3
 800b552:	2160      	movs	r1, #96	; 0x60
 800b554:	f001 f83a 	bl	800c5cc <GpioInit>
  GpioInit( &ioPin, OSC_HSE_OUT, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b558:	1d38      	adds	r0, r7, #4
 800b55a:	2300      	movs	r3, #0
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	2300      	movs	r3, #0
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	2300      	movs	r3, #0
 800b564:	2203      	movs	r2, #3
 800b566:	2161      	movs	r1, #97	; 0x61
 800b568:	f001 f830 	bl	800c5cc <GpioInit>
  
  GpioInit( &ioPin, OSC_LSE_IN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b56c:	1d38      	adds	r0, r7, #4
 800b56e:	2300      	movs	r3, #0
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	2300      	movs	r3, #0
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	2300      	movs	r3, #0
 800b578:	2200      	movs	r2, #0
 800b57a:	212e      	movs	r1, #46	; 0x2e
 800b57c:	f001 f826 	bl	800c5cc <GpioInit>
  GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b580:	1d38      	adds	r0, r7, #4
 800b582:	2300      	movs	r3, #0
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	2300      	movs	r3, #0
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	2200      	movs	r2, #0
 800b58e:	212f      	movs	r1, #47	; 0x2f
 800b590:	f001 f81c 	bl	800c5cc <GpioInit>
}
 800b594:	bf00      	nop
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000f2c 	.word	0x20000f2c

0800b5a0 <BoardBatteryMeasureVolage>:
#define BATTERY_SHUTDOWN_LEVEL                      3100 // mV

static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;

uint16_t BoardBatteryMeasureVolage( void )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
  //    uint16_t vdd = 0;
  //    uint16_t vref = VREFINT_CAL;
  //    uint16_t vdiv = 0;
  uint16_t batteryVoltage = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	80fb      	strh	r3, [r7, #6]
  //    batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
  //
  //    //                                vDiv
  //    // Divider bridge  VBAT <-> 470k -<--|-->- 470k <-> GND => vBat = 2 * vDiv
  //    batteryVoltage = 2 * batteryVoltage;
  return batteryVoltage;
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bc80      	pop	{r7}
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <BoardGetBatteryLevel>:
{
  return BatteryVoltage;
}

uint8_t BoardGetBatteryLevel( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	71fb      	strb	r3, [r7, #7]
  
  BatteryVoltage = BoardBatteryMeasureVolage( );
 800b5c2:	f7ff ffed 	bl	800b5a0 <BoardBatteryMeasureVolage>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b23      	ldr	r3, [pc, #140]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b5cc:	801a      	strh	r2, [r3, #0]
  
  if( GetBoardPowerSource( ) == USB_POWER )
 800b5ce:	f000 fa69 	bl	800baa4 <GetBoardPowerSource>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <BoardGetBatteryLevel+0x26>
  {
    batteryLevel = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	71fb      	strb	r3, [r7, #7]
 800b5dc:	e036      	b.n	800b64c <BoardGetBatteryLevel+0x94>
  }
  else
  {
    if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 800b5de:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	f241 0235 	movw	r2, #4149	; 0x1035
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d902      	bls.n	800b5f0 <BoardGetBatteryLevel+0x38>
    {
      batteryLevel = 254;
 800b5ea:	23fe      	movs	r3, #254	; 0xfe
 800b5ec:	71fb      	strb	r3, [r7, #7]
 800b5ee:	e02d      	b.n	800b64c <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 800b5f0:	4b19      	ldr	r3, [pc, #100]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b5f8:	d918      	bls.n	800b62c <BoardGetBatteryLevel+0x74>
 800b5fa:	4b17      	ldr	r3, [pc, #92]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	f241 0235 	movw	r2, #4149	; 0x1035
 800b602:	4293      	cmp	r3, r2
 800b604:	d812      	bhi.n	800b62c <BoardGetBatteryLevel+0x74>
    {
      batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL - BATTERY_MIN_LEVEL ) ) + 1;
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	f5a3 6248 	sub.w	r2, r3, #3200	; 0xc80
 800b60e:	4613      	mov	r3, r2
 800b610:	019b      	lsls	r3, r3, #6
 800b612:	1a9b      	subs	r3, r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	4a10      	ldr	r2, [pc, #64]	; (800b65c <BoardGetBatteryLevel+0xa4>)
 800b61a:	fb82 1203 	smull	r1, r2, r2, r3
 800b61e:	1212      	asrs	r2, r2, #8
 800b620:	17db      	asrs	r3, r3, #31
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	b2db      	uxtb	r3, r3
 800b626:	3301      	adds	r3, #1
 800b628:	71fb      	strb	r3, [r7, #7]
 800b62a:	e00f      	b.n	800b64c <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEVEL ) )
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b634:	4293      	cmp	r3, r2
 800b636:	d907      	bls.n	800b648 <BoardGetBatteryLevel+0x90>
 800b638:	4b07      	ldr	r3, [pc, #28]	; (800b658 <BoardGetBatteryLevel+0xa0>)
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b640:	d802      	bhi.n	800b648 <BoardGetBatteryLevel+0x90>
    {
      batteryLevel = 1;
 800b642:	2301      	movs	r3, #1
 800b644:	71fb      	strb	r3, [r7, #7]
 800b646:	e001      	b.n	800b64c <BoardGetBatteryLevel+0x94>
    }
    else //if( BatteryVoltage <= BATTERY_SHUTDOWN_LEVEL )
    {
      batteryLevel = 255;
 800b648:	23ff      	movs	r3, #255	; 0xff
 800b64a:	71fb      	strb	r3, [r7, #7]
      //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
      //GpioInit( &BoardPowerDown, BOARD_POWER_DOWN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    }
  }
  return batteryLevel;
 800b64c:	79fb      	ldrb	r3, [r7, #7]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	200000ec 	.word	0x200000ec
 800b65c:	44fc3a35 	.word	0x44fc3a35

0800b660 <BoardUnusedIoInit>:

static void BoardUnusedIoInit( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af02      	add	r7, sp, #8
  Gpio_t ioPin;

	GpioInit( &ioPin, UNUSEDPINPA0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b666:	1d38      	adds	r0, r7, #4
 800b668:	2300      	movs	r3, #0
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	2300      	movs	r3, #0
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	2300      	movs	r3, #0
 800b672:	2203      	movs	r2, #3
 800b674:	2100      	movs	r1, #0
 800b676:	f000 ffa9 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b67a:	1d38      	adds	r0, r7, #4
 800b67c:	2300      	movs	r3, #0
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	2300      	movs	r3, #0
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	2203      	movs	r2, #3
 800b688:	2101      	movs	r1, #1
 800b68a:	f000 ff9f 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b68e:	1d38      	adds	r0, r7, #4
 800b690:	2300      	movs	r3, #0
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2300      	movs	r3, #0
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2300      	movs	r3, #0
 800b69a:	2203      	movs	r2, #3
 800b69c:	2102      	movs	r1, #2
 800b69e:	f000 ff95 	bl	800c5cc <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPA3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPA8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6a2:	1d38      	adds	r0, r7, #4
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	2108      	movs	r1, #8
 800b6b2:	f000 ff8b 	bl	800c5cc <GpioInit>
#if !defined( USE_DEBUGGER )
	GpioInit( &ioPin, UNUSEDPINPA9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );  // TX
 800b6b6:	1d38      	adds	r0, r7, #4
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2203      	movs	r2, #3
 800b6c4:	2109      	movs	r1, #9
 800b6c6:	f000 ff81 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // RX
 800b6ca:	1d38      	adds	r0, r7, #4
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	210a      	movs	r1, #10
 800b6da:	f000 ff77 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DM
 800b6de:	1d38      	adds	r0, r7, #4
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2203      	movs	r2, #3
 800b6ec:	210b      	movs	r1, #11
 800b6ee:	f000 ff6d 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DP
 800b6f2:	1d38      	adds	r0, r7, #4
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	2203      	movs	r2, #3
 800b700:	210c      	movs	r1, #12
 800b702:	f000 ff63 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWDIO
 800b706:	1d38      	adds	r0, r7, #4
 800b708:	2300      	movs	r3, #0
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	2300      	movs	r3, #0
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	2300      	movs	r3, #0
 800b712:	2203      	movs	r2, #3
 800b714:	210d      	movs	r1, #13
 800b716:	f000 ff59 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWCLK
 800b71a:	1d38      	adds	r0, r7, #4
 800b71c:	2300      	movs	r3, #0
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	2300      	movs	r3, #0
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	2300      	movs	r3, #0
 800b726:	2203      	movs	r2, #3
 800b728:	210e      	movs	r1, #14
 800b72a:	f000 ff4f 	bl	800c5cc <GpioInit>
#endif
	GpioInit( &ioPin, UNUSEDPINPA15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b72e:	1d38      	adds	r0, r7, #4
 800b730:	2300      	movs	r3, #0
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	2300      	movs	r3, #0
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	2300      	movs	r3, #0
 800b73a:	2203      	movs	r2, #3
 800b73c:	210f      	movs	r1, #15
 800b73e:	f000 ff45 	bl	800c5cc <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPB0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b742:	1d38      	adds	r0, r7, #4
 800b744:	2300      	movs	r3, #0
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	2300      	movs	r3, #0
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	2300      	movs	r3, #0
 800b74e:	2203      	movs	r2, #3
 800b750:	2110      	movs	r1, #16
 800b752:	f000 ff3b 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b756:	1d38      	adds	r0, r7, #4
 800b758:	2300      	movs	r3, #0
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	2300      	movs	r3, #0
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2300      	movs	r3, #0
 800b762:	2203      	movs	r2, #3
 800b764:	2111      	movs	r1, #17
 800b766:	f000 ff31 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b76a:	1d38      	adds	r0, r7, #4
 800b76c:	2300      	movs	r3, #0
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	2203      	movs	r2, #3
 800b778:	2112      	movs	r1, #18
 800b77a:	f000 ff27 	bl	800c5cc <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b77e:	1d38      	adds	r0, r7, #4
 800b780:	2300      	movs	r3, #0
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	2300      	movs	r3, #0
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2300      	movs	r3, #0
 800b78a:	2203      	movs	r2, #3
 800b78c:	2114      	movs	r1, #20
 800b78e:	f000 ff1d 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b792:	1d38      	adds	r0, r7, #4
 800b794:	2300      	movs	r3, #0
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	2300      	movs	r3, #0
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	2300      	movs	r3, #0
 800b79e:	2203      	movs	r2, #3
 800b7a0:	2115      	movs	r1, #21
 800b7a2:	f000 ff13 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b7a6:	1d38      	adds	r0, r7, #4
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9301      	str	r3, [sp, #4]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2203      	movs	r2, #3
 800b7b4:	2116      	movs	r1, #22
 800b7b6:	f000 ff09 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b7ba:	1d38      	adds	r0, r7, #4
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	2117      	movs	r1, #23
 800b7ca:	f000 feff 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b7ce:	1d38      	adds	r0, r7, #4
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	2203      	movs	r2, #3
 800b7dc:	2118      	movs	r1, #24
 800b7de:	f000 fef5 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b7e2:	1d38      	adds	r0, r7, #4
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	2119      	movs	r1, #25
 800b7f2:	f000 feeb 	bl	800c5cc <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b7f6:	1d38      	adds	r0, r7, #4
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9301      	str	r3, [sp, #4]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	2203      	movs	r2, #3
 800b804:	211c      	movs	r1, #28
 800b806:	f000 fee1 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b80a:	1d38      	adds	r0, r7, #4
 800b80c:	2300      	movs	r3, #0
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	2300      	movs	r3, #0
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	2300      	movs	r3, #0
 800b816:	2203      	movs	r2, #3
 800b818:	211d      	movs	r1, #29
 800b81a:	f000 fed7 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b81e:	1d38      	adds	r0, r7, #4
 800b820:	2300      	movs	r3, #0
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	2300      	movs	r3, #0
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	2300      	movs	r3, #0
 800b82a:	2203      	movs	r2, #3
 800b82c:	211e      	movs	r1, #30
 800b82e:	f000 fecd 	bl	800c5cc <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b832:	1d38      	adds	r0, r7, #4
 800b834:	2300      	movs	r3, #0
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	2300      	movs	r3, #0
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	2300      	movs	r3, #0
 800b83e:	2203      	movs	r2, #3
 800b840:	211f      	movs	r1, #31
 800b842:	f000 fec3 	bl	800c5cc <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPC13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b846:	1d38      	adds	r0, r7, #4
 800b848:	2300      	movs	r3, #0
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	2300      	movs	r3, #0
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	2300      	movs	r3, #0
 800b852:	2203      	movs	r2, #3
 800b854:	212d      	movs	r1, #45	; 0x2d
 800b856:	f000 feb9 	bl	800c5cc <GpioInit>
#if defined( USE_DEBUGGER )
  HAL_DBGMCU_EnableDBGStopMode( );
  HAL_DBGMCU_EnableDBGSleepMode( );
  HAL_DBGMCU_EnableDBGStandbyMode( );
#else
    HAL_DBGMCU_DisableDBGSleepMode( );
 800b85a:	f7f5 f9c7 	bl	8000bec <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode( );
 800b85e:	f7f5 f9d3 	bl	8000c08 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode( );
 800b862:	f7f5 f9df 	bl	8000c24 <HAL_DBGMCU_DisableDBGStandbyMode>
  
  //���ã����͹����¹ر�SWD�������޷���STLINK������¼���򣡣���
  //    GpioInit( &ioPin, SWDIO, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //    GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
 800b866:	bf00      	nop
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <SystemClockConfig>:

void SystemClockConfig( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b096      	sub	sp, #88	; 0x58
 800b874:	af00      	add	r7, sp, #0


	/****************************************************************************************************/
	/*                      HSI->SYS                HSE->PLL->USB                                       */
#elif !defined( USE_DEBUGGER )
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b87a:	2234      	movs	r2, #52	; 0x34
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f005 fff2 	bl	8011868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b884:	f107 0310 	add.w	r3, r7, #16
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	605a      	str	r2, [r3, #4]
 800b88e:	609a      	str	r2, [r3, #8]
 800b890:	60da      	str	r2, [r3, #12]
 800b892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b89e:	4b38      	ldr	r3, [pc, #224]	; (800b980 <SystemClockConfig+0x110>)
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	4a37      	ldr	r2, [pc, #220]	; (800b980 <SystemClockConfig+0x110>)
 800b8a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a8:	6253      	str	r3, [r2, #36]	; 0x24
 800b8aa:	4b35      	ldr	r3, [pc, #212]	; (800b980 <SystemClockConfig+0x110>)
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b2:	607b      	str	r3, [r7, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b8b6:	4b33      	ldr	r3, [pc, #204]	; (800b984 <SystemClockConfig+0x114>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b8be:	4a31      	ldr	r2, [pc, #196]	; (800b984 <SystemClockConfig+0x114>)
 800b8c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b8c4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800b8c6:	2307      	movs	r3, #7
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b8d6:	2310      	movs	r3, #16
 800b8d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b8de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800b8e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800b8ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b8ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f6 ffa1 	bl	800283c <HAL_RCC_OscConfig>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <SystemClockConfig+0x94>
  {
    Error_Handler();
 800b900:	f001 fce2 	bl	800d2c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b904:	230f      	movs	r3, #15
 800b906:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b908:	2301      	movs	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b914:	2300      	movs	r3, #0
 800b916:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	2101      	movs	r1, #1
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f7 fabc 	bl	8002e9c <HAL_RCC_ClockConfig>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <SystemClockConfig+0xbe>
  {
    Error_Handler();
 800b92a:	f001 fccd 	bl	800d2c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b92e:	2301      	movs	r3, #1
 800b930:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b936:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7f7 fca3 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <SystemClockConfig+0xdc>
  {
    Error_Handler();
 800b948:	f001 fcbe 	bl	800d2c8 <Error_Handler>
  }
#endif
  /**************************************************END***********************************************/


  HAL_SYSTICK_Config( HAL_RCC_GetHCLKFreq( ) / 1000 );
 800b94c:	f7f7 fc32 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 800b950:	4602      	mov	r2, r0
 800b952:	4b0d      	ldr	r3, [pc, #52]	; (800b988 <SystemClockConfig+0x118>)
 800b954:	fba3 2302 	umull	r2, r3, r3, r2
 800b958:	099b      	lsrs	r3, r3, #6
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7f5 feb9 	bl	80016d2 <HAL_SYSTICK_Config>
  
  HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 800b960:	2004      	movs	r0, #4
 800b962:	f7f5 fec3 	bl	80016ec <HAL_SYSTICK_CLKSourceConfig>
  
  // HAL_NVIC_GetPriorityGrouping
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800b966:	2003      	movs	r0, #3
 800b968:	f7f5 fe7e 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>
  
  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority( SysTick_IRQn, 0, 0 );
 800b96c:	2200      	movs	r2, #0
 800b96e:	2100      	movs	r1, #0
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	f7f5 fe83 	bl	800167e <HAL_NVIC_SetPriority>
}
 800b978:	bf00      	nop
 800b97a:	3758      	adds	r7, #88	; 0x58
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	40023800 	.word	0x40023800
 800b984:	40007000 	.word	0x40007000
 800b988:	10624dd3 	.word	0x10624dd3

0800b98c <CalibrateSystemWakeupTime>:

void CalibrateSystemWakeupTime( void )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
  if( SystemWakeupTimeCalibrated == false )
 800b990:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <CalibrateSystemWakeupTime+0x44>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f083 0301 	eor.w	r3, r3, #1
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d015      	beq.n	800b9ca <CalibrateSystemWakeupTime+0x3e>
  {
    TimerInit( &CalibrateSystemWakeupTimeTimer, OnCalibrateSystemWakeupTimeTimerEvent );
 800b99e:	490d      	ldr	r1, [pc, #52]	; (800b9d4 <CalibrateSystemWakeupTime+0x48>)
 800b9a0:	480d      	ldr	r0, [pc, #52]	; (800b9d8 <CalibrateSystemWakeupTime+0x4c>)
 800b9a2:	f005 f8f3 	bl	8010b8c <TimerInit>
    TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 800b9a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b9aa:	480b      	ldr	r0, [pc, #44]	; (800b9d8 <CalibrateSystemWakeupTime+0x4c>)
 800b9ac:	f005 fb0c 	bl	8010fc8 <TimerSetValue>
    TimerStart( &CalibrateSystemWakeupTimeTimer );
 800b9b0:	4809      	ldr	r0, [pc, #36]	; (800b9d8 <CalibrateSystemWakeupTime+0x4c>)
 800b9b2:	f005 f905 	bl	8010bc0 <TimerStart>
    while( SystemWakeupTimeCalibrated == false )
 800b9b6:	e001      	b.n	800b9bc <CalibrateSystemWakeupTime+0x30>
    {
    	//HAL_Delay(2);
    	TimerLowPowerHandler( ); //开启低功耗模式时注释这里将导致收发窗口对不上
 800b9b8:	f005 fb4c 	bl	8011054 <TimerLowPowerHandler>
    while( SystemWakeupTimeCalibrated == false )
 800b9bc:	4b04      	ldr	r3, [pc, #16]	; (800b9d0 <CalibrateSystemWakeupTime+0x44>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f083 0301 	eor.w	r3, r3, #1
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1f6      	bne.n	800b9b8 <CalibrateSystemWakeupTime+0x2c>
    }
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	2000077d 	.word	0x2000077d
 800b9d4:	0800b415 	.word	0x0800b415
 800b9d8:	20000768 	.word	0x20000768

0800b9dc <SystemClockReConfig>:

void SystemClockReConfig( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b9e2:	4b28      	ldr	r3, [pc, #160]	; (800ba84 <SystemClockReConfig+0xa8>)
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	4a27      	ldr	r2, [pc, #156]	; (800ba84 <SystemClockReConfig+0xa8>)
 800b9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ec:	6253      	str	r3, [r2, #36]	; 0x24
 800b9ee:	4b25      	ldr	r3, [pc, #148]	; (800ba84 <SystemClockReConfig+0xa8>)
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f6:	607b      	str	r3, [r7, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 800b9fa:	4b23      	ldr	r3, [pc, #140]	; (800ba88 <SystemClockReConfig+0xac>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800ba02:	4a21      	ldr	r2, [pc, #132]	; (800ba88 <SystemClockReConfig+0xac>)
 800ba04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ba08:	6013      	str	r3, [r2, #0]
  
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800ba0a:	4b20      	ldr	r3, [pc, #128]	; (800ba8c <SystemClockReConfig+0xb0>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800ba10:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ba18:	4a1a      	ldr	r2, [pc, #104]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba1e:	6053      	str	r3, [r2, #4]
  //__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST((uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_VAL(RCC_ICSCR_HSITRIM)));

    
  /* Wait till HSI is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSIRDY ) == RESET )
 800ba20:	bf00      	nop
 800ba22:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0f9      	beq.n	800ba22 <SystemClockReConfig+0x46>
	{
	}
#if !defined( USE_DEBUGGER ) || defined( USB_VCP )
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 800ba2e:	4b15      	ldr	r3, [pc, #84]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a14      	ldr	r2, [pc, #80]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba38:	6013      	str	r3, [r2, #0]
  /* Enable PLL */
	__HAL_RCC_PLL_ENABLE( );
 800ba3a:	4b15      	ldr	r3, [pc, #84]	; (800ba90 <SystemClockReConfig+0xb4>)
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSERDY ) == RESET )
 800ba40:	bf00      	nop
 800ba42:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d0f9      	beq.n	800ba42 <SystemClockReConfig+0x66>
	{
	}

  /* Wait till PLL is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET )
 800ba4e:	bf00      	nop
 800ba50:	4b0c      	ldr	r3, [pc, #48]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0f9      	beq.n	800ba50 <SystemClockReConfig+0x74>
	{
	}


	/* Select PLL as system clock source */
	__HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_HSI );
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f023 0303 	bic.w	r3, r3, #3
 800ba64:	4a07      	ldr	r2, [pc, #28]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba66:	f043 0301 	orr.w	r3, r3, #1
 800ba6a:	6093      	str	r3, [r2, #8]

	/* Wait till PLL is used as system clock source */
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_HSI )
 800ba6c:	bf00      	nop
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <SystemClockReConfig+0xa8>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 030c 	and.w	r3, r3, #12
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d1f9      	bne.n	800ba6e <SystemClockReConfig+0x92>
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK )
	{
	}
	/*PLL->SYS*/
#endif
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc80      	pop	{r7}
 800ba82:	4770      	bx	lr
 800ba84:	40023800 	.word	0x40023800
 800ba88:	40007000 	.word	0x40007000
 800ba8c:	42470000 	.word	0x42470000
 800ba90:	42470060 	.word	0x42470060

0800ba94 <SysTick_Handler>:


void SysTick_Handler( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  HAL_IncTick( );
 800ba98:	f7f5 f86a 	bl	8000b70 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler( );
 800ba9c:	f7f5 fe42 	bl	8001724 <HAL_SYSTICK_IRQHandler>
}
 800baa0:	bf00      	nop
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <GetBoardPowerSource>:

uint8_t GetBoardPowerSource( void )
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  else
  {
    return USB_POWER;
  }
#else
  return BATTERY_POWER;
 800baa8:	2301      	movs	r3, #1
#endif
}
 800baaa:	4618      	mov	r0, r3
 800baac:	46bd      	mov	sp, r7
 800baae:	bc80      	pop	{r7}
 800bab0:	4770      	bx	lr

0800bab2 <HexToString>:

uint32_t HexToString(/*IN*/  const char    * pHex,  
                     /*IN*/  uint32_t           hexLen,  
                     /*OUT*/ char          * pByteString)  
{  
 800bab2:	b480      	push	{r7}
 800bab4:	b087      	sub	sp, #28
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
  unsigned long i;  
  
  if (pHex==NULL)  
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <HexToString+0x16>
    return 1;  
 800bac4:	2301      	movs	r3, #1
 800bac6:	e079      	b.n	800bbbc <HexToString+0x10a>
  
  if(hexLen <= 0)  
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <HexToString+0x20>
    return 2;  
 800bace:	2302      	movs	r3, #2
 800bad0:	e074      	b.n	800bbbc <HexToString+0x10a>
  
  for(i=0;i<hexLen;i++)  
 800bad2:	2300      	movs	r3, #0
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e06c      	b.n	800bbb2 <HexToString+0x100>
  {  
    if(((pHex[i]&0xf0)>>4)>=0 && ((pHex[i]&0xf0)>>4)<=9)  
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	4413      	add	r3, r2
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	091b      	lsrs	r3, r3, #4
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	d80d      	bhi.n	800bb04 <HexToString+0x52>
      pByteString[2*i]=((pHex[i]&0xf0)>>4)+0x30;  
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	4413      	add	r3, r2
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	091b      	lsrs	r3, r3, #4
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	440b      	add	r3, r1
 800bafc:	3230      	adds	r2, #48	; 0x30
 800bafe:	b2d2      	uxtb	r2, r2
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	e01c      	b.n	800bb3e <HexToString+0x8c>
    else if(((pHex[i]&0xf0)>>4)>=10 && ((pHex[i]&0xf0)>>4)<=16)  
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	4413      	add	r3, r2
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	091b      	lsrs	r3, r3, #4
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d914      	bls.n	800bb3e <HexToString+0x8c>
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	4413      	add	r3, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	091b      	lsrs	r3, r3, #4
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b10      	cmp	r3, #16
 800bb22:	d80c      	bhi.n	800bb3e <HexToString+0x8c>
      pByteString[2*i]=((pHex[i]&0xf0)>>4)+0x37;   //  Сд��0x37 ��Ϊ 0x57   
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	4413      	add	r3, r2
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	091b      	lsrs	r3, r3, #4
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	440b      	add	r3, r1
 800bb38:	3237      	adds	r2, #55	; 0x37
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	701a      	strb	r2, [r3, #0]
    
    if((pHex[i]&0x0f)>=0 && (pHex[i]&0x0f)<=9)  
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	4413      	add	r3, r2
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	2b09      	cmp	r3, #9
 800bb4c:	dc0f      	bgt.n	800bb6e <HexToString+0xbc>
      pByteString[2*i+1]=(pHex[i]&0x0f)+0x30;  
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	4413      	add	r3, r2
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	3301      	adds	r3, #1
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	440b      	add	r3, r1
 800bb66:	3230      	adds	r2, #48	; 0x30
 800bb68:	b2d2      	uxtb	r2, r2
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	e01e      	b.n	800bbac <HexToString+0xfa>
    else if((pHex[i]&0x0f)>=10 && (pHex[i]&0x0f)<=16)  
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	4413      	add	r3, r2
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	2b09      	cmp	r3, #9
 800bb7c:	dd16      	ble.n	800bbac <HexToString+0xfa>
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	4413      	add	r3, r2
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	2b10      	cmp	r3, #16
 800bb8c:	dc0e      	bgt.n	800bbac <HexToString+0xfa>
      pByteString[2*i+1]=(pHex[i]&0x0f)+0x37;      //  Сд��0x37 ��Ϊ 0x57   
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	4413      	add	r3, r2
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	3301      	adds	r3, #1
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	440b      	add	r3, r1
 800bba6:	3237      	adds	r2, #55	; 0x37
 800bba8:	b2d2      	uxtb	r2, r2
 800bbaa:	701a      	strb	r2, [r3, #0]
  for(i=0;i<hexLen;i++)  
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d38e      	bcc.n	800bad8 <HexToString+0x26>
  }  
  return 0;  
 800bbba:	2300      	movs	r3, #0
} 
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	371c      	adds	r7, #28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc80      	pop	{r7}
 800bbc4:	4770      	bx	lr

0800bbc6 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b082      	sub	sp, #8
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	33f1      	adds	r3, #241	; 0xf1
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f005 fdde 	bl	8011798 <memset1>
            ctx->M_n = 0;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	22f0      	movs	r2, #240	; 0xf0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f005 fdd4 	bl	8011798 <memset1>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	461a      	mov	r2, r3
 800bc06:	2110      	movs	r1, #16
 800bc08:	6838      	ldr	r0, [r7, #0]
 800bc0a:	f7ff faeb 	bl	800b1e4 <aes_set_key>
}
 800bc0e:	bf00      	nop
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b08c      	sub	sp, #48	; 0x30
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 808f 	beq.w	800bd4c <AES_CMAC_Update+0x136>
                  mlen = MIN(16 - ctx->M_n, len);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc34:	f1c3 0310 	rsb	r3, r3, #16
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	bf28      	it	cs
 800bc3e:	4613      	movcs	r3, r2
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f203 1201 	addw	r2, r3, #257	; 0x101
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc4e:	4413      	add	r3, r2
 800bc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc52:	b292      	uxth	r2, r2
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f005 fd65 	bl	8011726 <memcpy1>
                    ctx->M_n += mlen;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc72:	2b0f      	cmp	r3, #15
 800bc74:	d97b      	bls.n	800bd6e <AES_CMAC_Update+0x158>
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d077      	beq.n	800bd6e <AES_CMAC_Update+0x158>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800bc7e:	2300      	movs	r3, #0
 800bc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc82:	e015      	b.n	800bcb0 <AES_CMAC_Update+0x9a>
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	4413      	add	r3, r2
 800bc8a:	33f1      	adds	r3, #241	; 0xf1
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	68f9      	ldr	r1, [r7, #12]
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	440b      	add	r3, r1
 800bc94:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	4053      	eors	r3, r2
 800bc9c:	b2d9      	uxtb	r1, r3
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	4413      	add	r3, r2
 800bca4:	33f1      	adds	r3, #241	; 0xf1
 800bca6:	460a      	mov	r2, r1
 800bca8:	701a      	strb	r2, [r3, #0]
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	3301      	adds	r3, #1
 800bcae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	2b0f      	cmp	r3, #15
 800bcb4:	dde6      	ble.n	800bc84 <AES_CMAC_Update+0x6e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	33f1      	adds	r3, #241	; 0xf1
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f7ff fb5c 	bl	800b380 <aes_encrypt>
                    data += mlen;
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	4413      	add	r3, r2
 800bcce:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800bcd8:	e038      	b.n	800bd4c <AES_CMAC_Update+0x136>

                    XOR(data, ctx->X);
 800bcda:	2300      	movs	r3, #0
 800bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcde:	e013      	b.n	800bd08 <AES_CMAC_Update+0xf2>
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	4413      	add	r3, r2
 800bce6:	33f1      	adds	r3, #241	; 0xf1
 800bce8:	781a      	ldrb	r2, [r3, #0]
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	440b      	add	r3, r1
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	4053      	eors	r3, r2
 800bcf4:	b2d9      	uxtb	r1, r3
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	4413      	add	r3, r2
 800bcfc:	33f1      	adds	r3, #241	; 0xf1
 800bcfe:	460a      	mov	r2, r1
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	3301      	adds	r3, #1
 800bd06:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	2b0f      	cmp	r3, #15
 800bd0c:	dde8      	ble.n	800bce0 <AES_CMAC_Update+0xca>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bd14:	f107 0314 	add.w	r3, r7, #20
 800bd18:	2210      	movs	r2, #16
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f005 fd03 	bl	8011726 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	f107 0114 	add.w	r1, r7, #20
 800bd26:	f107 0314 	add.w	r3, r7, #20
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fb28 	bl	800b380 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	33f1      	adds	r3, #241	; 0xf1
 800bd34:	f107 0114 	add.w	r1, r7, #20
 800bd38:	2210      	movs	r2, #16
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f005 fcf3 	bl	8011726 <memcpy1>

                    data += 16;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	3310      	adds	r3, #16
 800bd44:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3b10      	subs	r3, #16
 800bd4a:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b10      	cmp	r3, #16
 800bd50:	d8c3      	bhi.n	800bcda <AES_CMAC_Update+0xc4>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	b292      	uxth	r2, r2
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f005 fce1 	bl	8011726 <memcpy1>
            ctx->M_n = len;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bd6c:	e000      	b.n	800bd70 <AES_CMAC_Update+0x15a>
                            return;
 800bd6e:	bf00      	nop
}
 800bd70:	3730      	adds	r7, #48	; 0x30
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b092      	sub	sp, #72	; 0x48
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800bd80:	f107 031c 	add.w	r3, r7, #28
 800bd84:	2210      	movs	r2, #16
 800bd86:	2100      	movs	r1, #0
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f005 fd05 	bl	8011798 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	f107 011c 	add.w	r1, r7, #28
 800bd94:	f107 031c 	add.w	r3, r7, #28
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff faf1 	bl	800b380 <aes_encrypt>

            if (K[0] & 0x80) {
 800bd9e:	7f3b      	ldrb	r3, [r7, #28]
 800bda0:	b25b      	sxtb	r3, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	da31      	bge.n	800be0a <AES_CMAC_Final+0x94>
                    LSHIFT(K, K);
 800bda6:	2300      	movs	r3, #0
 800bda8:	647b      	str	r3, [r7, #68]	; 0x44
 800bdaa:	e01c      	b.n	800bde6 <AES_CMAC_Final+0x70>
 800bdac:	f107 021c 	add.w	r2, r7, #28
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb2:	4413      	add	r3, r2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	b25a      	sxtb	r2, r3
 800bdba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bdc2:	440b      	add	r3, r1
 800bdc4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bdc8:	09db      	lsrs	r3, r3, #7
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	b2d9      	uxtb	r1, r3
 800bdd4:	f107 021c 	add.w	r2, r7, #28
 800bdd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdda:	4413      	add	r3, r2
 800bddc:	460a      	mov	r2, r1
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bde2:	3301      	adds	r3, #1
 800bde4:	647b      	str	r3, [r7, #68]	; 0x44
 800bde6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bde8:	2b0e      	cmp	r3, #14
 800bdea:	dddf      	ble.n	800bdac <AES_CMAC_Final+0x36>
 800bdec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                   K[15] ^= 0x87;
 800bdf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdfc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800be00:	43db      	mvns	r3, r3
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be08:	e028      	b.n	800be5c <AES_CMAC_Final+0xe6>
            } else
                    LSHIFT(K, K);
 800be0a:	2300      	movs	r3, #0
 800be0c:	643b      	str	r3, [r7, #64]	; 0x40
 800be0e:	e01c      	b.n	800be4a <AES_CMAC_Final+0xd4>
 800be10:	f107 021c 	add.w	r2, r7, #28
 800be14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be16:	4413      	add	r3, r2
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	b25a      	sxtb	r2, r3
 800be1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be20:	3301      	adds	r3, #1
 800be22:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800be26:	440b      	add	r3, r1
 800be28:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be2c:	09db      	lsrs	r3, r3, #7
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	b25b      	sxtb	r3, r3
 800be32:	4313      	orrs	r3, r2
 800be34:	b25b      	sxtb	r3, r3
 800be36:	b2d9      	uxtb	r1, r3
 800be38:	f107 021c 	add.w	r2, r7, #28
 800be3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3e:	4413      	add	r3, r2
 800be40:	460a      	mov	r2, r1
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be46:	3301      	adds	r3, #1
 800be48:	643b      	str	r3, [r7, #64]	; 0x40
 800be4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4c:	2b0e      	cmp	r3, #14
 800be4e:	dddf      	ble.n	800be10 <AES_CMAC_Final+0x9a>
 800be50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


            if (ctx->M_n == 16) {
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be62:	2b10      	cmp	r3, #16
 800be64:	d11d      	bne.n	800bea2 <AES_CMAC_Final+0x12c>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800be66:	2300      	movs	r3, #0
 800be68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be6a:	e016      	b.n	800be9a <AES_CMAC_Final+0x124>
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be70:	4413      	add	r3, r2
 800be72:	f203 1301 	addw	r3, r3, #257	; 0x101
 800be76:	781a      	ldrb	r2, [r3, #0]
 800be78:	f107 011c 	add.w	r1, r7, #28
 800be7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7e:	440b      	add	r3, r1
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	4053      	eors	r3, r2
 800be84:	b2d9      	uxtb	r1, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8a:	4413      	add	r3, r2
 800be8c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800be90:	460a      	mov	r2, r1
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be96:	3301      	adds	r3, #1
 800be98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9c:	2b0f      	cmp	r3, #15
 800be9e:	dde5      	ble.n	800be6c <AES_CMAC_Final+0xf6>
 800bea0:	e098      	b.n	800bfd4 <AES_CMAC_Final+0x25e>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800bea2:	7f3b      	ldrb	r3, [r7, #28]
 800bea4:	b25b      	sxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	da31      	bge.n	800bf0e <AES_CMAC_Final+0x198>
                          LSHIFT(K, K);
 800beaa:	2300      	movs	r3, #0
 800beac:	63bb      	str	r3, [r7, #56]	; 0x38
 800beae:	e01c      	b.n	800beea <AES_CMAC_Final+0x174>
 800beb0:	f107 021c 	add.w	r2, r7, #28
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	b25a      	sxtb	r2, r3
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	3301      	adds	r3, #1
 800bec2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bec6:	440b      	add	r3, r1
 800bec8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800becc:	09db      	lsrs	r3, r3, #7
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	b25b      	sxtb	r3, r3
 800bed2:	4313      	orrs	r3, r2
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	b2d9      	uxtb	r1, r3
 800bed8:	f107 021c 	add.w	r2, r7, #28
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	4413      	add	r3, r2
 800bee0:	460a      	mov	r2, r1
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	3301      	adds	r3, #1
 800bee8:	63bb      	str	r3, [r7, #56]	; 0x38
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	2b0e      	cmp	r3, #14
 800beee:	dddf      	ble.n	800beb0 <AES_CMAC_Final+0x13a>
 800bef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                          K[15] ^= 0x87;
 800befc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf00:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bf04:	43db      	mvns	r3, r3
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf0c:	e028      	b.n	800bf60 <AES_CMAC_Final+0x1ea>
                  } else
                           LSHIFT(K, K);
 800bf0e:	2300      	movs	r3, #0
 800bf10:	637b      	str	r3, [r7, #52]	; 0x34
 800bf12:	e01c      	b.n	800bf4e <AES_CMAC_Final+0x1d8>
 800bf14:	f107 021c 	add.w	r2, r7, #28
 800bf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1a:	4413      	add	r3, r2
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	b25a      	sxtb	r2, r3
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	3301      	adds	r3, #1
 800bf26:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bf2a:	440b      	add	r3, r1
 800bf2c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf30:	09db      	lsrs	r3, r3, #7
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	b25b      	sxtb	r3, r3
 800bf36:	4313      	orrs	r3, r2
 800bf38:	b25b      	sxtb	r3, r3
 800bf3a:	b2d9      	uxtb	r1, r3
 800bf3c:	f107 021c 	add.w	r2, r7, #28
 800bf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf42:	4413      	add	r3, r2
 800bf44:	460a      	mov	r2, r1
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf50:	2b0e      	cmp	r3, #14
 800bf52:	dddf      	ble.n	800bf14 <AES_CMAC_Final+0x19e>
 800bf54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4413      	add	r3, r2
 800bf6a:	2280      	movs	r2, #128	; 0x80
 800bf6c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bf70:	e007      	b.n	800bf82 <AES_CMAC_Final+0x20c>
                         ctx->M_last[ctx->M_n] = 0;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf96:	2b0f      	cmp	r3, #15
 800bf98:	d9eb      	bls.n	800bf72 <AES_CMAC_Final+0x1fc>
   
                  XOR(K, ctx->M_last);
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9e:	e016      	b.n	800bfce <AES_CMAC_Final+0x258>
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bfaa:	781a      	ldrb	r2, [r3, #0]
 800bfac:	f107 011c 	add.w	r1, r7, #28
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	440b      	add	r3, r1
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	4053      	eors	r3, r2
 800bfb8:	b2d9      	uxtb	r1, r3
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	701a      	strb	r2, [r3, #0]
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	3301      	adds	r3, #1
 800bfcc:	633b      	str	r3, [r7, #48]	; 0x30
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2b0f      	cmp	r3, #15
 800bfd2:	dde5      	ble.n	800bfa0 <AES_CMAC_Final+0x22a>


           }
           XOR(ctx->M_last, ctx->X);
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfd8:	e015      	b.n	800c006 <AES_CMAC_Final+0x290>
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	4413      	add	r3, r2
 800bfe0:	33f1      	adds	r3, #241	; 0xf1
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	440b      	add	r3, r1
 800bfea:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	4053      	eors	r3, r2
 800bff2:	b2d9      	uxtb	r1, r3
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	4413      	add	r3, r2
 800bffa:	33f1      	adds	r3, #241	; 0xf1
 800bffc:	460a      	mov	r2, r1
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	3301      	adds	r3, #1
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	2b0f      	cmp	r3, #15
 800c00a:	dde6      	ble.n	800bfda <AES_CMAC_Final+0x264>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c012:	f107 030c 	add.w	r3, r7, #12
 800c016:	2210      	movs	r2, #16
 800c018:	4618      	mov	r0, r3
 800c01a:	f005 fb84 	bl	8011726 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	6879      	ldr	r1, [r7, #4]
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff f9aa 	bl	800b380 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800c02c:	f107 031c 	add.w	r3, r7, #28
 800c030:	2210      	movs	r2, #16
 800c032:	2100      	movs	r1, #0
 800c034:	4618      	mov	r0, r3
 800c036:	f005 fbaf 	bl	8011798 <memset1>

}
 800c03a:	bf00      	nop
 800c03c:	3748      	adds	r7, #72	; 0x48
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7f4 fdac 	bl	8000ba8 <HAL_Delay>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <FifoNext>:
Maintainer: Miguel Luis and Gregory Cristian
*/
#include "fifo.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->Size;
 800c064:	887b      	ldrh	r3, [r7, #2]
 800c066:	3301      	adds	r3, #1
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	8912      	ldrh	r2, [r2, #8]
 800c06c:	fb93 f1f2 	sdiv	r1, r3, r2
 800c070:	fb02 f201 	mul.w	r2, r2, r1
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	b29b      	uxth	r3, r3
}
 800c078:	4618      	mov	r0, r3
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr

0800c082 <FifoPush>:
    fifo->Data = buffer;
    fifo->Size = size;
}

void FifoPush( Fifo_t *fifo, uint8_t data )
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	460b      	mov	r3, r1
 800c08c:	70fb      	strb	r3, [r7, #3]
    fifo->End = FifoNext( fifo, fifo->End );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ffdf 	bl	800c058 <FifoNext>
 800c09a:	4603      	mov	r3, r0
 800c09c:	461a      	mov	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	805a      	strh	r2, [r3, #2]
    fifo->Data[fifo->End] = data;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	8852      	ldrh	r2, [r2, #2]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	78fa      	ldrb	r2, [r7, #3]
 800c0ae:	701a      	strb	r2, [r3, #0]
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <FifoPop>:

uint8_t FifoPop( Fifo_t *fifo )
{
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
    uint8_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685c      	ldr	r4, [r3, #4]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff ffc4 	bl	800c058 <FifoNext>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	4423      	add	r3, r4
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	73fb      	strb	r3, [r7, #15]

    fifo->Begin = FifoNext( fifo, fifo->Begin );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ffba 	bl	800c058 <FifoNext>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	801a      	strh	r2, [r3, #0]
    return data;
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd90      	pop	{r4, r7, pc}

0800c0f6 <IsFifoEmpty>:
    fifo->Begin = 0;
    fifo->End = 0;
}

bool IsFifoEmpty( Fifo_t *fifo )
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
    return ( fifo->Begin == fifo->End );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	881a      	ldrh	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	885b      	ldrh	r3, [r3, #2]
 800c106:	429a      	cmp	r2, r3
 800c108:	bf0c      	ite	eq
 800c10a:	2301      	moveq	r3, #1
 800c10c:	2300      	movne	r3, #0
 800c10e:	b2db      	uxtb	r3, r3
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	bc80      	pop	{r7}
 800c118:	4770      	bx	lr

0800c11a <IsFifoFull>:

bool IsFifoFull( Fifo_t *fifo )
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
    return ( FifoNext( fifo, fifo->End ) == fifo->Begin );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff ff95 	bl	800c058 <FifoNext>
 800c12e:	4603      	mov	r3, r0
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	bf0c      	ite	eq
 800c13a:	2301      	moveq	r3, #1
 800c13c:	2300      	movne	r3, #0
 800c13e:	b2db      	uxtb	r3, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08c      	sub	sp, #48	; 0x30
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	4608      	mov	r0, r1
 800c152:	4611      	mov	r1, r2
 800c154:	461a      	mov	r2, r3
 800c156:	4603      	mov	r3, r0
 800c158:	70fb      	strb	r3, [r7, #3]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70bb      	strb	r3, [r7, #2]
 800c15e:	4613      	mov	r3, r2
 800c160:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    obj->pin = pin;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	78fa      	ldrb	r2, [r7, #3]
 800c166:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
 800c168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c170:	f000 80b5 	beq.w	800c2de <GpioMcuInit+0x196>
    {
        return;
    }

    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f993 3000 	ldrsb.w	r3, [r3]
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f003 030f 	and.w	r3, r3, #15
 800c180:	2201      	movs	r2, #1
 800c182:	fa02 f303 	lsl.w	r3, r2, r3
 800c186:	b29a      	uxth	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f993 3000 	ldrsb.w	r3, [r3]
 800c192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10f      	bne.n	800c1ba <GpioMcuInit+0x72>
    {
        obj->port = GPIOA;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a52      	ldr	r2, [pc, #328]	; (800c2e8 <GpioMcuInit+0x1a0>)
 800c19e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800c1a0:	4b52      	ldr	r3, [pc, #328]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	4a51      	ldr	r2, [pc, #324]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1a6:	f043 0301 	orr.w	r3, r3, #1
 800c1aa:	61d3      	str	r3, [r2, #28]
 800c1ac:	4b4f      	ldr	r3, [pc, #316]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	61bb      	str	r3, [r7, #24]
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	e053      	b.n	800c262 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f993 3000 	ldrsb.w	r3, [r3]
 800c1c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1c4:	2b10      	cmp	r3, #16
 800c1c6:	d10f      	bne.n	800c1e8 <GpioMcuInit+0xa0>
    {
        obj->port = GPIOB;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a49      	ldr	r2, [pc, #292]	; (800c2f0 <GpioMcuInit+0x1a8>)
 800c1cc:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800c1ce:	4b47      	ldr	r3, [pc, #284]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	4a46      	ldr	r2, [pc, #280]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1d4:	f043 0302 	orr.w	r3, r3, #2
 800c1d8:	61d3      	str	r3, [r2, #28]
 800c1da:	4b44      	ldr	r3, [pc, #272]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	f003 0302 	and.w	r3, r3, #2
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	e03c      	b.n	800c262 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f993 3000 	ldrsb.w	r3, [r3]
 800c1ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d10f      	bne.n	800c216 <GpioMcuInit+0xce>
    {
        obj->port = GPIOC;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a3e      	ldr	r2, [pc, #248]	; (800c2f4 <GpioMcuInit+0x1ac>)
 800c1fa:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800c1fc:	4b3b      	ldr	r3, [pc, #236]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	4a3a      	ldr	r2, [pc, #232]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c202:	f043 0304 	orr.w	r3, r3, #4
 800c206:	61d3      	str	r3, [r2, #28]
 800c208:	4b38      	ldr	r3, [pc, #224]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	613b      	str	r3, [r7, #16]
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	e025      	b.n	800c262 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f993 3000 	ldrsb.w	r3, [r3]
 800c21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c220:	2b30      	cmp	r3, #48	; 0x30
 800c222:	d10f      	bne.n	800c244 <GpioMcuInit+0xfc>
    {
        obj->port = GPIOD;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a34      	ldr	r2, [pc, #208]	; (800c2f8 <GpioMcuInit+0x1b0>)
 800c228:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800c22a:	4b30      	ldr	r3, [pc, #192]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	4a2f      	ldr	r2, [pc, #188]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c230:	f043 0308 	orr.w	r3, r3, #8
 800c234:	61d3      	str	r3, [r2, #28]
 800c236:	4b2d      	ldr	r3, [pc, #180]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	f003 0308 	and.w	r3, r3, #8
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	e00e      	b.n	800c262 <GpioMcuInit+0x11a>
    }
    else
    {
        obj->port = GPIOH;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a2d      	ldr	r2, [pc, #180]	; (800c2fc <GpioMcuInit+0x1b4>)
 800c248:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800c24a:	4b28      	ldr	r3, [pc, #160]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	4a27      	ldr	r2, [pc, #156]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c250:	f043 0320 	orr.w	r3, r3, #32
 800c254:	61d3      	str	r3, [r2, #28]
 800c256:	4b25      	ldr	r3, [pc, #148]	; (800c2ec <GpioMcuInit+0x1a4>)
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	f003 0320 	and.w	r3, r3, #32
 800c25e:	60bb      	str	r3, [r7, #8]
 800c260:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = obj->pull = type;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c26e:	729a      	strb	r2, [r3, #10]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7a9b      	ldrb	r3, [r3, #10]
 800c274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c276:	2302      	movs	r3, #2
 800c278:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mode == PIN_INPUT )
 800c27a:	78bb      	ldrb	r3, [r7, #2]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <GpioMcuInit+0x13e>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c280:	2300      	movs	r3, #0
 800c282:	623b      	str	r3, [r7, #32]
 800c284:	e01b      	b.n	800c2be <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ANALOGIC )
 800c286:	78bb      	ldrb	r3, [r7, #2]
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d102      	bne.n	800c292 <GpioMcuInit+0x14a>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800c28c:	2303      	movs	r3, #3
 800c28e:	623b      	str	r3, [r7, #32]
 800c290:	e015      	b.n	800c2be <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800c292:	78bb      	ldrb	r3, [r7, #2]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d10a      	bne.n	800c2ae <GpioMcuInit+0x166>
    {
        if( config == PIN_OPEN_DRAIN )
 800c298:	787b      	ldrb	r3, [r7, #1]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d102      	bne.n	800c2a4 <GpioMcuInit+0x15c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800c29e:	2312      	movs	r3, #18
 800c2a0:	623b      	str	r3, [r7, #32]
 800c2a2:	e001      	b.n	800c2a8 <GpioMcuInit+0x160>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ac:	e007      	b.n	800c2be <GpioMcuInit+0x176>
    }
    else // mode output
    {
        if( config == PIN_OPEN_DRAIN )
 800c2ae:	787b      	ldrb	r3, [r7, #1]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d102      	bne.n	800c2ba <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800c2b4:	2311      	movs	r3, #17
 800c2b6:	623b      	str	r3, [r7, #32]
 800c2b8:	e001      	b.n	800c2be <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	623b      	str	r3, [r7, #32]
        }
    }

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800c2be:	78bb      	ldrb	r3, [r7, #2]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d103      	bne.n	800c2cc <GpioMcuInit+0x184>
    {
        GpioMcuWrite( obj, value );
 800c2c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f8dc 	bl	800c484 <GpioMcuWrite>
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f107 021c 	add.w	r2, r7, #28
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f5 fa72 	bl	80017c0 <HAL_GPIO_Init>
 800c2dc:	e000      	b.n	800c2e0 <GpioMcuInit+0x198>
        return;
 800c2de:	bf00      	nop
}
 800c2e0:	3730      	adds	r7, #48	; 0x30
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	40020000 	.word	0x40020000
 800c2ec:	40023800 	.word	0x40023800
 800c2f0:	40020400 	.word	0x40020400
 800c2f4:	40020800 	.word	0x40020800
 800c2f8:	40020c00 	.word	0x40020c00
 800c2fc:	40021400 	.word	0x40021400

0800c300 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08c      	sub	sp, #48	; 0x30
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	72fb      	strb	r3, [r7, #11]
 800c30e:	4613      	mov	r3, r2
 800c310:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800c316:	2306      	movs	r3, #6
 800c318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80a4 	beq.w	800c46c <GpioMcuSetInterrupt+0x16c>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	885b      	ldrh	r3, [r3, #2]
 800c328:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800c32a:	7afb      	ldrb	r3, [r7, #11]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d102      	bne.n	800c336 <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c330:	4b50      	ldr	r3, [pc, #320]	; (800c474 <GpioMcuSetInterrupt+0x174>)
 800c332:	61bb      	str	r3, [r7, #24]
 800c334:	e007      	b.n	800c346 <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d102      	bne.n	800c342 <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800c33c:	4b4e      	ldr	r3, [pc, #312]	; (800c478 <GpioMcuSetInterrupt+0x178>)
 800c33e:	61bb      	str	r3, [r7, #24]
 800c340:	e001      	b.n	800c346 <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c342:	4b4e      	ldr	r3, [pc, #312]	; (800c47c <GpioMcuSetInterrupt+0x17c>)
 800c344:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = obj->pull;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	7a9b      	ldrb	r3, [r3, #10]
 800c34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c34c:	2302      	movs	r3, #2
 800c34e:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f107 0214 	add.w	r2, r7, #20
 800c358:	4611      	mov	r1, r2
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7f5 fa30 	bl	80017c0 <HAL_GPIO_Init>

    switch( irqPriority )
 800c360:	7abb      	ldrb	r3, [r7, #10]
 800c362:	2b03      	cmp	r3, #3
 800c364:	d813      	bhi.n	800c38e <GpioMcuSetInterrupt+0x8e>
 800c366:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <GpioMcuSetInterrupt+0x6c>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c37d 	.word	0x0800c37d
 800c374:	0800c383 	.word	0x0800c383
 800c378:	0800c389 	.word	0x0800c389
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800c37c:	2303      	movs	r3, #3
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c380:	e008      	b.n	800c394 <GpioMcuSetInterrupt+0x94>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800c382:	2302      	movs	r3, #2
 800c384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c386:	e005      	b.n	800c394 <GpioMcuSetInterrupt+0x94>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800c388:	2301      	movs	r3, #1
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c38c:	e002      	b.n	800c394 <GpioMcuSetInterrupt+0x94>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c392:	bf00      	nop
    }

    switch( obj->pinIndex )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	885b      	ldrh	r3, [r3, #2]
 800c398:	2b80      	cmp	r3, #128	; 0x80
 800c39a:	d048      	beq.n	800c42e <GpioMcuSetInterrupt+0x12e>
 800c39c:	2b80      	cmp	r3, #128	; 0x80
 800c39e:	dc11      	bgt.n	800c3c4 <GpioMcuSetInterrupt+0xc4>
 800c3a0:	2b08      	cmp	r3, #8
 800c3a2:	d03c      	beq.n	800c41e <GpioMcuSetInterrupt+0x11e>
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	dc06      	bgt.n	800c3b6 <GpioMcuSetInterrupt+0xb6>
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d030      	beq.n	800c40e <GpioMcuSetInterrupt+0x10e>
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d032      	beq.n	800c416 <GpioMcuSetInterrupt+0x116>
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d028      	beq.n	800c406 <GpioMcuSetInterrupt+0x106>
    case GPIO_PIN_14:
    case GPIO_PIN_15:
        IRQnb = EXTI15_10_IRQn;
        break;
    default:
        break;
 800c3b4:	e043      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
    switch( obj->pinIndex )
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d039      	beq.n	800c42e <GpioMcuSetInterrupt+0x12e>
 800c3ba:	2b40      	cmp	r3, #64	; 0x40
 800c3bc:	d037      	beq.n	800c42e <GpioMcuSetInterrupt+0x12e>
 800c3be:	2b10      	cmp	r3, #16
 800c3c0:	d031      	beq.n	800c426 <GpioMcuSetInterrupt+0x126>
        break;
 800c3c2:	e03c      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
    switch( obj->pinIndex )
 800c3c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c8:	d035      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
 800c3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3ce:	dc09      	bgt.n	800c3e4 <GpioMcuSetInterrupt+0xe4>
 800c3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3d4:	d02b      	beq.n	800c42e <GpioMcuSetInterrupt+0x12e>
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3da:	d02c      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e0:	d025      	beq.n	800c42e <GpioMcuSetInterrupt+0x12e>
        break;
 800c3e2:	e02c      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
    switch( obj->pinIndex )
 800c3e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e8:	d025      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
 800c3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ee:	dc03      	bgt.n	800c3f8 <GpioMcuSetInterrupt+0xf8>
 800c3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f4:	d01f      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
        break;
 800c3f6:	e022      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
    switch( obj->pinIndex )
 800c3f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3fc:	d01b      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
 800c3fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c402:	d018      	beq.n	800c436 <GpioMcuSetInterrupt+0x136>
        break;
 800c404:	e01b      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI0_IRQn;
 800c406:	2306      	movs	r3, #6
 800c408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c40c:	e017      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI1_IRQn;
 800c40e:	2307      	movs	r3, #7
 800c410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c414:	e013      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI2_IRQn;
 800c416:	2308      	movs	r3, #8
 800c418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c41c:	e00f      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI3_IRQn;
 800c41e:	2309      	movs	r3, #9
 800c420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c424:	e00b      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI4_IRQn;
 800c426:	230a      	movs	r3, #10
 800c428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c42c:	e007      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI9_5_IRQn;
 800c42e:	2317      	movs	r3, #23
 800c430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c434:	e003      	b.n	800c43e <GpioMcuSetInterrupt+0x13e>
        IRQnb = EXTI15_10_IRQn;
 800c436:	2328      	movs	r3, #40	; 0x28
 800c438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c43c:	bf00      	nop
    }

    GpioIrq[( obj->pin ) & 0x0F] = irqHandler;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f993 3000 	ldrsb.w	r3, [r3]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	490d      	ldr	r1, [pc, #52]	; (800c480 <GpioMcuSetInterrupt+0x180>)
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800c452:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c456:	2200      	movs	r2, #0
 800c458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f5 f90f 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800c460:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c464:	4618      	mov	r0, r3
 800c466:	f7f5 f926 	bl	80016b6 <HAL_NVIC_EnableIRQ>
 800c46a:	e000      	b.n	800c46e <GpioMcuSetInterrupt+0x16e>
        return;
 800c46c:	bf00      	nop
}
 800c46e:	3730      	adds	r7, #48	; 0x30
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	10110000 	.word	0x10110000
 800c478:	10210000 	.word	0x10210000
 800c47c:	10310000 	.word	0x10310000
 800c480:	20000780 	.word	0x20000780

0800c484 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f993 3000 	ldrsb.w	r3, [r3]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d009      	beq.n	800c4b2 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6858      	ldr	r0, [r3, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	885b      	ldrh	r3, [r3, #2]
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f7f5 fbe6 	bl	8001c7c <HAL_GPIO_WritePin>
 800c4b0:	e000      	b.n	800c4b4 <GpioMcuWrite+0x30>
        return;
 800c4b2:	bf00      	nop
}
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c4be:	f001 f82f 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	f7f5 fbf2 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c4c8:	bf00      	nop
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c4d0:	f001 f826 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800c4d4:	2002      	movs	r0, #2
 800c4d6:	f7f5 fbe9 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c4da:	bf00      	nop
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c4e2:	f001 f81d 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800c4e6:	2004      	movs	r0, #4
 800c4e8:	f7f5 fbe0 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c4ec:	bf00      	nop
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c4f4:	f001 f814 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800c4f8:	2008      	movs	r0, #8
 800c4fa:	f7f5 fbd7 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c4fe:	bf00      	nop
 800c500:	bd80      	pop	{r7, pc}

0800c502 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 800c502:	b580      	push	{r7, lr}
 800c504:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c506:	f001 f80b 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800c50a:	2010      	movs	r0, #16
 800c50c:	f7f5 fbce 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}

0800c514 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c518:	f001 f802 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800c51c:	2020      	movs	r0, #32
 800c51e:	f7f5 fbc5 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800c522:	2040      	movs	r0, #64	; 0x40
 800c524:	f7f5 fbc2 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800c528:	2080      	movs	r0, #128	; 0x80
 800c52a:	f7f5 fbbf 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800c52e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c532:	f7f5 fbbb 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800c536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c53a:	f7f5 fbb7 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}

0800c542 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 800c542:	b580      	push	{r7, lr}
 800c544:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c546:	f000 ffeb 	bl	800d520 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800c54a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c54e:	f7f5 fbad 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800c552:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c556:	f7f5 fba9 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800c55a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c55e:	f7f5 fba5 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800c562:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c566:	f7f5 fba1 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800c56a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c56e:	f7f5 fb9d 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800c572:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c576:	f7f5 fb99 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
}
 800c57a:	bf00      	nop
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800c58e:	88fb      	ldrh	r3, [r7, #6]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d009      	beq.n	800c5a8 <HAL_GPIO_EXTI_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 800c594:	e005      	b.n	800c5a2 <HAL_GPIO_EXTI_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800c5a2:	88fb      	ldrh	r3, [r7, #6]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d1f6      	bne.n	800c596 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
 800c5aa:	4a07      	ldr	r2, [pc, #28]	; (800c5c8 <HAL_GPIO_EXTI_Callback+0x48>)
 800c5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d004      	beq.n	800c5be <HAL_GPIO_EXTI_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <HAL_GPIO_EXTI_Callback+0x48>)
 800c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5bc:	4798      	blx	r3
    }
}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000780 	.word	0x20000780

0800c5cc <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af02      	add	r7, sp, #8
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4603      	mov	r3, r0
 800c5dc:	70fb      	strb	r3, [r7, #3]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70bb      	strb	r3, [r7, #2]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800c5e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5ea:	111b      	asrs	r3, r3, #4
 800c5ec:	b25b      	sxtb	r3, r3
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b06      	cmp	r3, #6
 800c5f2:	d80b      	bhi.n	800c60c <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800c5f4:	7878      	ldrb	r0, [r7, #1]
 800c5f6:	78ba      	ldrb	r2, [r7, #2]
 800c5f8:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	7c3b      	ldrb	r3, [r7, #16]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	4603      	mov	r3, r0
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fd9e 	bl	800c148 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	607b      	str	r3, [r7, #4]
 800c61e:	460b      	mov	r3, r1
 800c620:	72fb      	strb	r3, [r7, #11]
 800c622:	4613      	mov	r3, r2
 800c624:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f993 3000 	ldrsb.w	r3, [r3]
 800c62c:	111b      	asrs	r3, r3, #4
 800c62e:	b25b      	sxtb	r3, r3
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b06      	cmp	r3, #6
 800c634:	d805      	bhi.n	800c642 <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800c636:	7aba      	ldrb	r2, [r7, #10]
 800c638:	7af9      	ldrb	r1, [r7, #11]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fe5f 	bl	800c300 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f993 3000 	ldrsb.w	r3, [r3]
 800c65a:	111b      	asrs	r3, r3, #4
 800c65c:	b25b      	sxtb	r3, r3
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b06      	cmp	r3, #6
 800c662:	d803      	bhi.n	800c66c <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff ff0c 	bl	800c484 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <MX_ADC_Init>:
#include "LoRaMac.h"
#include "Commissioning.h"
ADC_HandleTypeDef hadc;
uint32_t ADC_value = 0;
 void MX_ADC_Init(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c67a:	1d3b      	adds	r3, r7, #4
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	605a      	str	r2, [r3, #4]
 800c682:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c684:	4b26      	ldr	r3, [pc, #152]	; (800c720 <MX_ADC_Init+0xac>)
 800c686:	4a27      	ldr	r2, [pc, #156]	; (800c724 <MX_ADC_Init+0xb0>)
 800c688:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800c68a:	4b25      	ldr	r3, [pc, #148]	; (800c720 <MX_ADC_Init+0xac>)
 800c68c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c690:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <MX_ADC_Init+0xac>)
 800c694:	2200      	movs	r2, #0
 800c696:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c698:	4b21      	ldr	r3, [pc, #132]	; (800c720 <MX_ADC_Init+0xac>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c69e:	4b20      	ldr	r3, [pc, #128]	; (800c720 <MX_ADC_Init+0xac>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c6a4:	4b1e      	ldr	r3, [pc, #120]	; (800c720 <MX_ADC_Init+0xac>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800c6aa:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <MX_ADC_Init+0xac>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800c6b0:	4b1b      	ldr	r3, [pc, #108]	; (800c720 <MX_ADC_Init+0xac>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	; (800c720 <MX_ADC_Init+0xac>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800c6bc:	4b18      	ldr	r3, [pc, #96]	; (800c720 <MX_ADC_Init+0xac>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800c6c4:	4b16      	ldr	r3, [pc, #88]	; (800c720 <MX_ADC_Init+0xac>)
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800c6ca:	4b15      	ldr	r3, [pc, #84]	; (800c720 <MX_ADC_Init+0xac>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c6d2:	4b13      	ldr	r3, [pc, #76]	; (800c720 <MX_ADC_Init+0xac>)
 800c6d4:	2210      	movs	r2, #16
 800c6d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c6d8:	4b11      	ldr	r3, [pc, #68]	; (800c720 <MX_ADC_Init+0xac>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800c6de:	4b10      	ldr	r3, [pc, #64]	; (800c720 <MX_ADC_Init+0xac>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c6e6:	480e      	ldr	r0, [pc, #56]	; (800c720 <MX_ADC_Init+0xac>)
 800c6e8:	f7f4 faaa 	bl	8000c40 <HAL_ADC_Init>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 800c6f2:	f000 fde9 	bl	800d2c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c702:	1d3b      	adds	r3, r7, #4
 800c704:	4619      	mov	r1, r3
 800c706:	4806      	ldr	r0, [pc, #24]	; (800c720 <MX_ADC_Init+0xac>)
 800c708:	f7f4 fd02 	bl	8001110 <HAL_ADC_ConfigChannel>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 800c712:	f000 fdd9 	bl	800d2c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800c716:	bf00      	nop
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000e40 	.word	0x20000e40
 800c724:	40012400 	.word	0x40012400

0800c728 <MX_GPIO_Init>:

 void MX_GPIO_Init(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08a      	sub	sp, #40	; 0x28
 800c72c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c72e:	f107 0314 	add.w	r3, r7, #20
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	609a      	str	r2, [r3, #8]
 800c73a:	60da      	str	r2, [r3, #12]
 800c73c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c73e:	4b24      	ldr	r3, [pc, #144]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	4a23      	ldr	r2, [pc, #140]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c744:	f043 0304 	orr.w	r3, r3, #4
 800c748:	61d3      	str	r3, [r2, #28]
 800c74a:	4b21      	ldr	r3, [pc, #132]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	613b      	str	r3, [r7, #16]
 800c754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c756:	4b1e      	ldr	r3, [pc, #120]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	4a1d      	ldr	r2, [pc, #116]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c75c:	f043 0320 	orr.w	r3, r3, #32
 800c760:	61d3      	str	r3, [r2, #28]
 800c762:	4b1b      	ldr	r3, [pc, #108]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c764:	69db      	ldr	r3, [r3, #28]
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c76e:	4b18      	ldr	r3, [pc, #96]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	4a17      	ldr	r2, [pc, #92]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c774:	f043 0301 	orr.w	r3, r3, #1
 800c778:	61d3      	str	r3, [r2, #28]
 800c77a:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	60bb      	str	r3, [r7, #8]
 800c784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c786:	4b12      	ldr	r3, [pc, #72]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	4a11      	ldr	r2, [pc, #68]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c78c:	f043 0302 	orr.w	r3, r3, #2
 800c790:	61d3      	str	r3, [r2, #28]
 800c792:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <MX_GPIO_Init+0xa8>)
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	607b      	str	r3, [r7, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 |GPIO_PIN_3, GPIO_PIN_RESET);
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f44f 7184 	mov.w	r1, #264	; 0x108
 800c7a4:	480b      	ldr	r0, [pc, #44]	; (800c7d4 <MX_GPIO_Init+0xac>)
 800c7a6:	f7f5 fa69 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_3;
 800c7aa:	f44f 7384 	mov.w	r3, #264	; 0x108
 800c7ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7bc:	f107 0314 	add.w	r3, r7, #20
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	4804      	ldr	r0, [pc, #16]	; (800c7d4 <MX_GPIO_Init+0xac>)
 800c7c4:	f7f4 fffc 	bl	80017c0 <HAL_GPIO_Init>


}
 800c7c8:	bf00      	nop
 800c7ca:	3728      	adds	r7, #40	; 0x28
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	40023800 	.word	0x40023800
 800c7d4:	40020400 	.word	0x40020400

0800c7d8 <ADC_measure>:
void ADC_measure(void ){
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2108      	movs	r1, #8
 800c7e0:	480c      	ldr	r0, [pc, #48]	; (800c814 <ADC_measure+0x3c>)
 800c7e2:	f7f5 fa4b 	bl	8001c7c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800c7e6:	2032      	movs	r0, #50	; 0x32
 800c7e8:	f7f4 f9de 	bl	8000ba8 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800c7ec:	480a      	ldr	r0, [pc, #40]	; (800c818 <ADC_measure+0x40>)
 800c7ee:	f7f4 fb6d 	bl	8000ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,500);
 800c7f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c7f6:	4808      	ldr	r0, [pc, #32]	; (800c818 <ADC_measure+0x40>)
 800c7f8:	f7f4 fbf4 	bl	8000fe4 <HAL_ADC_PollForConversion>
	ADC_value = HAL_ADC_GetValue(&hadc);
 800c7fc:	4806      	ldr	r0, [pc, #24]	; (800c818 <ADC_measure+0x40>)
 800c7fe:	f7f4 fc7a 	bl	80010f6 <HAL_ADC_GetValue>
 800c802:	4602      	mov	r2, r0
 800c804:	4b05      	ldr	r3, [pc, #20]	; (800c81c <ADC_measure+0x44>)
 800c806:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800c808:	4803      	ldr	r0, [pc, #12]	; (800c818 <ADC_measure+0x40>)
 800c80a:	f7f4 fbbf 	bl	8000f8c <HAL_ADC_Stop>
}
 800c80e:	bf00      	nop
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	40020400 	.word	0x40020400
 800c818:	20000e40 	.word	0x20000e40
 800c81c:	200007c0 	.word	0x200007c0

0800c820 <ADC_Process>:
    bool LinkCheck;
    uint8_t DemodMargin;
    uint8_t NbGateways;
}ComplianceTest;

void ADC_Process(uint32_t val){
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	   int TH = (int)(val / 1000);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a22      	ldr	r2, [pc, #136]	; (800c8b4 <ADC_Process+0x94>)
 800c82c:	fba2 2303 	umull	r2, r3, r2, r3
 800c830:	099b      	lsrs	r3, r3, #6
 800c832:	617b      	str	r3, [r7, #20]
		AppData[3] = (char)(TH) ;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	b2da      	uxtb	r2, r3
 800c838:	4b1f      	ldr	r3, [pc, #124]	; (800c8b8 <ADC_Process+0x98>)
 800c83a:	70da      	strb	r2, [r3, #3]

		int HU = (int)((val - TH*1000) / 100);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c842:	fb02 f303 	mul.w	r3, r2, r3
 800c846:	461a      	mov	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	4a1b      	ldr	r2, [pc, #108]	; (800c8bc <ADC_Process+0x9c>)
 800c84e:	fba2 2303 	umull	r2, r3, r2, r3
 800c852:	095b      	lsrs	r3, r3, #5
 800c854:	613b      	str	r3, [r7, #16]
		AppData[2] =  (char)(HU) ;
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <ADC_Process+0x98>)
 800c85c:	709a      	strb	r2, [r3, #2]

		int Ten = (int)((val - TH * 1000 - HU * 100) / 10);
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c864:	fb02 f303 	mul.w	r3, r2, r3
 800c868:	461a      	mov	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	2164      	movs	r1, #100	; 0x64
 800c872:	fb01 f202 	mul.w	r2, r1, r2
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	4a11      	ldr	r2, [pc, #68]	; (800c8c0 <ADC_Process+0xa0>)
 800c87a:	fba2 2303 	umull	r2, r3, r2, r3
 800c87e:	08db      	lsrs	r3, r3, #3
 800c880:	60fb      	str	r3, [r7, #12]
		AppData[1] =  (char)(Ten) ;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	b2da      	uxtb	r2, r3
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <ADC_Process+0x98>)
 800c888:	705a      	strb	r2, [r3, #1]

		int Sin = (val % 10);
 800c88a:	6879      	ldr	r1, [r7, #4]
 800c88c:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <ADC_Process+0xa0>)
 800c88e:	fba3 2301 	umull	r2, r3, r3, r1
 800c892:	08da      	lsrs	r2, r3, #3
 800c894:	4613      	mov	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	1aca      	subs	r2, r1, r3
 800c89e:	60ba      	str	r2, [r7, #8]
		AppData[0] = (char)(Sin) ;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	4b04      	ldr	r3, [pc, #16]	; (800c8b8 <ADC_Process+0x98>)
 800c8a6:	701a      	strb	r2, [r3, #0]
//	AppData[2] =  (char)(Ten +'0') ;
//
//	int Sin = (val % 10);
//	AppData[3] = (char)(Sin +'0') ;

}
 800c8a8:	bf00      	nop
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bc80      	pop	{r7}
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	10624dd3 	.word	0x10624dd3
 800c8b8:	200007c4 	.word	0x200007c4
 800c8bc:	51eb851f 	.word	0x51eb851f
 800c8c0:	cccccccd 	.word	0xcccccccd

0800c8c4 <PrepareTxFrame>:
/*!
 * \brief   Prepares the payload of the frame
 */
static void PrepareTxFrame( uint8_t port )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	71fb      	strb	r3, [r7, #7]
    switch( port )
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d002      	beq.n	800c8da <PrepareTxFrame+0x16>
 800c8d4:	2be0      	cmp	r3, #224	; 0xe0
 800c8d6:	d006      	beq.n	800c8e6 <PrepareTxFrame+0x22>
                break;
            }
        }
        break;
    default:
        break;
 800c8d8:	e03a      	b.n	800c950 <PrepareTxFrame+0x8c>
        	ADC_Process(ADC_value);
 800c8da:	4b1f      	ldr	r3, [pc, #124]	; (800c958 <PrepareTxFrame+0x94>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff ff9e 	bl	800c820 <ADC_Process>
        break;
 800c8e4:	e034      	b.n	800c950 <PrepareTxFrame+0x8c>
        if( ComplianceTest.LinkCheck == true )
 800c8e6:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <PrepareTxFrame+0x98>)
 800c8e8:	7b9b      	ldrb	r3, [r3, #14]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d014      	beq.n	800c918 <PrepareTxFrame+0x54>
            ComplianceTest.LinkCheck = false;
 800c8ee:	4b1b      	ldr	r3, [pc, #108]	; (800c95c <PrepareTxFrame+0x98>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	739a      	strb	r2, [r3, #14]
            AppDataSize = 3;
 800c8f4:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <PrepareTxFrame+0x9c>)
 800c8f6:	2203      	movs	r2, #3
 800c8f8:	701a      	strb	r2, [r3, #0]
            AppData[0] = 5;
 800c8fa:	4b1a      	ldr	r3, [pc, #104]	; (800c964 <PrepareTxFrame+0xa0>)
 800c8fc:	2205      	movs	r2, #5
 800c8fe:	701a      	strb	r2, [r3, #0]
            AppData[1] = ComplianceTest.DemodMargin;
 800c900:	4b16      	ldr	r3, [pc, #88]	; (800c95c <PrepareTxFrame+0x98>)
 800c902:	7bda      	ldrb	r2, [r3, #15]
 800c904:	4b17      	ldr	r3, [pc, #92]	; (800c964 <PrepareTxFrame+0xa0>)
 800c906:	705a      	strb	r2, [r3, #1]
            AppData[2] = ComplianceTest.NbGateways;
 800c908:	4b14      	ldr	r3, [pc, #80]	; (800c95c <PrepareTxFrame+0x98>)
 800c90a:	7c1a      	ldrb	r2, [r3, #16]
 800c90c:	4b15      	ldr	r3, [pc, #84]	; (800c964 <PrepareTxFrame+0xa0>)
 800c90e:	709a      	strb	r2, [r3, #2]
            ComplianceTest.State = 1;
 800c910:	4b12      	ldr	r3, [pc, #72]	; (800c95c <PrepareTxFrame+0x98>)
 800c912:	2201      	movs	r2, #1
 800c914:	705a      	strb	r2, [r3, #1]
        break;
 800c916:	e01a      	b.n	800c94e <PrepareTxFrame+0x8a>
            switch( ComplianceTest.State )
 800c918:	4b10      	ldr	r3, [pc, #64]	; (800c95c <PrepareTxFrame+0x98>)
 800c91a:	785b      	ldrb	r3, [r3, #1]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d006      	beq.n	800c92e <PrepareTxFrame+0x6a>
 800c920:	2b04      	cmp	r3, #4
 800c922:	d000      	beq.n	800c926 <PrepareTxFrame+0x62>
        break;
 800c924:	e013      	b.n	800c94e <PrepareTxFrame+0x8a>
                ComplianceTest.State = 1;
 800c926:	4b0d      	ldr	r3, [pc, #52]	; (800c95c <PrepareTxFrame+0x98>)
 800c928:	2201      	movs	r2, #1
 800c92a:	705a      	strb	r2, [r3, #1]
                break;
 800c92c:	e00f      	b.n	800c94e <PrepareTxFrame+0x8a>
                AppDataSize = 2;
 800c92e:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <PrepareTxFrame+0x9c>)
 800c930:	2202      	movs	r2, #2
 800c932:	701a      	strb	r2, [r3, #0]
                AppData[0] = ComplianceTest.DownLinkCounter >> 8;
 800c934:	4b09      	ldr	r3, [pc, #36]	; (800c95c <PrepareTxFrame+0x98>)
 800c936:	899b      	ldrh	r3, [r3, #12]
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	4b09      	ldr	r3, [pc, #36]	; (800c964 <PrepareTxFrame+0xa0>)
 800c940:	701a      	strb	r2, [r3, #0]
                AppData[1] = ComplianceTest.DownLinkCounter;
 800c942:	4b06      	ldr	r3, [pc, #24]	; (800c95c <PrepareTxFrame+0x98>)
 800c944:	899b      	ldrh	r3, [r3, #12]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	4b06      	ldr	r3, [pc, #24]	; (800c964 <PrepareTxFrame+0xa0>)
 800c94a:	705a      	strb	r2, [r3, #1]
                break;
 800c94c:	bf00      	nop
        break;
 800c94e:	bf00      	nop
    }
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	200007c0 	.word	0x200007c0
 800c95c:	20000e2c 	.word	0x20000e2c
 800c960:	20000111 	.word	0x20000111
 800c964:	200007c4 	.word	0x200007c4

0800c968 <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
static bool SendFrame( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c96e:	4b21      	ldr	r3, [pc, #132]	; (800c9f4 <SendFrame+0x8c>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	1d3a      	adds	r2, r7, #4
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc fef0 	bl	800975c <LoRaMacQueryTxPossible>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d008      	beq.n	800c994 <SendFrame+0x2c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c982:	2300      	movs	r3, #0
 800c984:	723b      	strb	r3, [r7, #8]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c986:	2300      	movs	r3, #0
 800c988:	613b      	str	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	82bb      	strh	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800c98e:	2300      	movs	r3, #0
 800c990:	75bb      	strb	r3, [r7, #22]
 800c992:	e020      	b.n	800c9d6 <SendFrame+0x6e>
    }
    else
    {
        if( IsTxConfirmed == false )
 800c994:	4b18      	ldr	r3, [pc, #96]	; (800c9f8 <SendFrame+0x90>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10d      	bne.n	800c9b8 <SendFrame+0x50>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c99c:	2300      	movs	r3, #0
 800c99e:	723b      	strb	r3, [r7, #8]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
 800c9a0:	4b16      	ldr	r3, [pc, #88]	; (800c9fc <SendFrame+0x94>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	733b      	strb	r3, [r7, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData;
 800c9a6:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <SendFrame+0x98>)
 800c9a8:	613b      	str	r3, [r7, #16]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
 800c9aa:	4b12      	ldr	r3, [pc, #72]	; (800c9f4 <SendFrame+0x8c>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	82bb      	strh	r3, [r7, #20]
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75bb      	strb	r3, [r7, #22]
 800c9b6:	e00e      	b.n	800c9d6 <SendFrame+0x6e>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	723b      	strb	r3, [r7, #8]
            mcpsReq.Req.Confirmed.fPort = AppPort;
 800c9bc:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <SendFrame+0x94>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	733b      	strb	r3, [r7, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData;
 800c9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <SendFrame+0x98>)
 800c9c4:	613b      	str	r3, [r7, #16]
            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <SendFrame+0x8c>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	82bb      	strh	r3, [r7, #20]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c9ce:	2308      	movs	r3, #8
 800c9d0:	75fb      	strb	r3, [r7, #23]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	75bb      	strb	r3, [r7, #22]
        }
    }

    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800c9d6:	f107 0308 	add.w	r3, r7, #8
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fd fc26 	bl	800a22c <LoRaMacMcpsRequest>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <SendFrame+0x82>
    {
        return false;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e000      	b.n	800c9ec <SendFrame+0x84>
    }
    return true;
 800c9ea:	2301      	movs	r3, #1
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20000111 	.word	0x20000111
 800c9f8:	20000112 	.word	0x20000112
 800c9fc:	20000110 	.word	0x20000110
 800ca00:	200007c4 	.word	0x200007c4

0800ca04 <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    TimerStop( &TxNextPacketTimer );
 800ca0a:	480f      	ldr	r0, [pc, #60]	; (800ca48 <OnTxNextPacketTimerEvent+0x44>)
 800ca0c:	f004 fa20 	bl	8010e50 <TimerStop>

    mibReq.Type = MIB_NETWORK_JOINED;
 800ca10:	2301      	movs	r3, #1
 800ca12:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ca14:	463b      	mov	r3, r7
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fc ff10 	bl	800983c <LoRaMacMibGetRequestConfirm>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]

    if( status == LORAMAC_STATUS_OK )
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10c      	bne.n	800ca40 <OnTxNextPacketTimerEvent+0x3c>
    {
        if( mibReq.Param.IsNetworkJoined == true )
 800ca26:	793b      	ldrb	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d006      	beq.n	800ca3a <OnTxNextPacketTimerEvent+0x36>
        {
            DeviceState = DEVICE_STATE_SEND;
 800ca2c:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <OnTxNextPacketTimerEvent+0x48>)
 800ca2e:	2202      	movs	r2, #2
 800ca30:	701a      	strb	r2, [r3, #0]
            NextTx = true;
 800ca32:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <OnTxNextPacketTimerEvent+0x4c>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	701a      	strb	r2, [r3, #0]
        else
        {
            DeviceState = DEVICE_STATE_JOIN;
        }
    }
}
 800ca38:	e002      	b.n	800ca40 <OnTxNextPacketTimerEvent+0x3c>
            DeviceState = DEVICE_STATE_JOIN;
 800ca3a:	4b04      	ldr	r3, [pc, #16]	; (800ca4c <OnTxNextPacketTimerEvent+0x48>)
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	701a      	strb	r2, [r3, #0]
}
 800ca40:	bf00      	nop
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20000808 	.word	0x20000808
 800ca4c:	2000081d 	.word	0x2000081d
 800ca50:	20000113 	.word	0x20000113

0800ca54 <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d108      	bne.n	800ca76 <McpsConfirm+0x22>
    {
        switch( mcpsConfirm->McpsRequest )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d006      	beq.n	800ca7a <McpsConfirm+0x26>
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d006      	beq.n	800ca7e <McpsConfirm+0x2a>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d006      	beq.n	800ca82 <McpsConfirm+0x2e>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 800ca74:	e006      	b.n	800ca84 <McpsConfirm+0x30>
        }        
    }     
 800ca76:	bf00      	nop
 800ca78:	e004      	b.n	800ca84 <McpsConfirm+0x30>
                break;
 800ca7a:	bf00      	nop
 800ca7c:	e002      	b.n	800ca84 <McpsConfirm+0x30>
                break;
 800ca7e:	bf00      	nop
 800ca80:	e000      	b.n	800ca84 <McpsConfirm+0x30>
                break;
 800ca82:	bf00      	nop
    
    NextTx = true;    
 800ca84:	4b03      	ldr	r3, [pc, #12]	; (800ca94 <McpsConfirm+0x40>)
 800ca86:	2201      	movs	r2, #1
 800ca88:	701a      	strb	r2, [r3, #0]
}
 800ca8a:	bf00      	nop
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bc80      	pop	{r7}
 800ca92:	4770      	bx	lr
 800ca94:	20000113 	.word	0x20000113

0800ca98 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800ca9e:	af02      	add	r7, sp, #8
 800caa0:	1d3b      	adds	r3, r7, #4
 800caa2:	6018      	str	r0, [r3, #0]
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800caa4:	1d3b      	adds	r3, r7, #4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f040 8242 	bne.w	800cf34 <McpsIndication+0x49c>
    {      
        return;
    }

    switch( mcpsIndication->McpsIndication )
 800cab0:	1d3b      	adds	r3, r7, #4
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d80a      	bhi.n	800cad0 <McpsIndication+0x38>
 800caba:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <McpsIndication+0x28>)
 800cabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac0:	0800cad1 	.word	0x0800cad1
 800cac4:	0800cad1 	.word	0x0800cad1
 800cac8:	0800cad1 	.word	0x0800cad1
 800cacc:	0800cad1 	.word	0x0800cad1
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 800cad0:	bf00      	nop
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    
    if( mcpsIndication->AckReceived == true )
 800cad2:	1d3b      	adds	r3, r7, #4
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	7c9b      	ldrb	r3, [r3, #18]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <McpsIndication+0x5e>
    { 
		DebugPrintf("+SEND:ACK RECEIVED\r\n");
 800cadc:	48b5      	ldr	r0, [pc, #724]	; (800cdb4 <McpsIndication+0x31c>)
 800cade:	f004 fbd5 	bl	801128c <DebugPrintf>
		DebugPrintf("+SEND:DONE\r\n\r\n");
 800cae2:	48b5      	ldr	r0, [pc, #724]	; (800cdb8 <McpsIndication+0x320>)
 800cae4:	f004 fbd2 	bl	801128c <DebugPrintf>
		GpioWrite( &EN_Vext, 1 );
 800cae8:	2101      	movs	r1, #1
 800caea:	48b4      	ldr	r0, [pc, #720]	; (800cdbc <McpsIndication+0x324>)
 800caec:	f7ff fdad 	bl	800c64a <GpioWrite>
		HAL_Delay(10);
 800caf0:	200a      	movs	r0, #10
 800caf2:	f7f4 f859 	bl	8000ba8 <HAL_Delay>
    }

    if( ComplianceTest.Running == true )
 800caf6:	4bb2      	ldr	r3, [pc, #712]	; (800cdc0 <McpsIndication+0x328>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d005      	beq.n	800cb0a <McpsIndication+0x72>
    {
        ComplianceTest.DownLinkCounter++;
 800cafe:	4bb0      	ldr	r3, [pc, #704]	; (800cdc0 <McpsIndication+0x328>)
 800cb00:	899b      	ldrh	r3, [r3, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	4bae      	ldr	r3, [pc, #696]	; (800cdc0 <McpsIndication+0x328>)
 800cb08:	819a      	strh	r2, [r3, #12]
    }

    uint8_t temp[200]={0};
 800cb0a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800cb0e:	22c8      	movs	r2, #200	; 0xc8
 800cb10:	2100      	movs	r1, #0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f004 fea8 	bl	8011868 <memset>
    uint8_t temp1[200]={0};
 800cb18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	23c8      	movs	r3, #200	; 0xc8
 800cb20:	461a      	mov	r2, r3
 800cb22:	2100      	movs	r1, #0
 800cb24:	f004 fea0 	bl	8011868 <memset>
    if( mcpsIndication->RxData == true )
 800cb28:	1d3b      	adds	r3, r7, #4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	7b5b      	ldrb	r3, [r3, #13]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8202 	beq.w	800cf38 <McpsIndication+0x4a0>
    {
        memset(temp,0,200);
 800cb34:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800cb38:	22c8      	movs	r2, #200	; 0xc8
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f004 fe93 	bl	8011868 <memset>
        memset(temp1,0,200);
 800cb42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cb46:	22c8      	movs	r2, #200	; 0xc8
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f004 fe8c 	bl	8011868 <memset>
        
        HexToString((const char *)(mcpsIndication->Buffer),mcpsIndication->BufferSize,(char *)(temp1));
 800cb50:	1d3b      	adds	r3, r7, #4
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6898      	ldr	r0, [r3, #8]
 800cb56:	1d3b      	adds	r3, r7, #4
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	7b1b      	ldrb	r3, [r3, #12]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cb62:	461a      	mov	r2, r3
 800cb64:	f7fe ffa5 	bl	800bab2 <HexToString>
        temp1[mcpsIndication->BufferSize * 2]='\0';   
 800cb68:	1d3b      	adds	r3, r7, #4
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	7b1b      	ldrb	r3, [r3, #12]
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800cb74:	2100      	movs	r1, #0
 800cb76:	54d1      	strb	r1, [r2, r3]
        
        sprintf((char *)temp,"+REV MSG:%s,RXSIZE %d,\"%s\"\r\n\r\n", mcpsIndication->RxSlot?"RXWIN2":"RXWIN1", mcpsIndication->BufferSize, temp1);
 800cb78:	1d3b      	adds	r3, r7, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	7c5b      	ldrb	r3, [r3, #17]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <McpsIndication+0xee>
 800cb82:	4a90      	ldr	r2, [pc, #576]	; (800cdc4 <McpsIndication+0x32c>)
 800cb84:	e000      	b.n	800cb88 <McpsIndication+0xf0>
 800cb86:	4a90      	ldr	r2, [pc, #576]	; (800cdc8 <McpsIndication+0x330>)
 800cb88:	1d3b      	adds	r3, r7, #4
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	7b1b      	ldrb	r3, [r3, #12]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 800cb94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	498b      	ldr	r1, [pc, #556]	; (800cdcc <McpsIndication+0x334>)
 800cb9e:	f004 fe6b 	bl	8011878 <siprintf>
        UartPutBuffer(&Uart1,temp,strlen((char const*)temp));
 800cba2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f3 faea 	bl	8000180 <strlen>
 800cbac:	4603      	mov	r3, r0
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4886      	ldr	r0, [pc, #536]	; (800cdd0 <McpsIndication+0x338>)
 800cbb8:	f004 fb36 	bl	8011228 <UartPutBuffer>
        
        switch( mcpsIndication->Port )
 800cbbc:	1d3b      	adds	r3, r7, #4
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	78db      	ldrb	r3, [r3, #3]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	f2c0 81ba 	blt.w	800cf3c <McpsIndication+0x4a4>
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	dd02      	ble.n	800cbd2 <McpsIndication+0x13a>
 800cbcc:	2be0      	cmp	r3, #224	; 0xe0
 800cbce:	d018      	beq.n	800cc02 <McpsIndication+0x16a>
                    break;
                }
            }
            break;
        default:
            break;
 800cbd0:	e1b4      	b.n	800cf3c <McpsIndication+0x4a4>
            if( mcpsIndication->BufferSize == 1 )
 800cbd2:	1d3b      	adds	r3, r7, #4
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	7b1b      	ldrb	r3, [r3, #12]
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	f040 81b1 	bne.w	800cf40 <McpsIndication+0x4a8>
                AppLedStateOn = mcpsIndication->Buffer[0] & 0x01;   
 800cbde:	1d3b      	adds	r3, r7, #4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	bf14      	ite	ne
 800cbee:	2301      	movne	r3, #1
 800cbf0:	2300      	moveq	r3, #0
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	4b77      	ldr	r3, [pc, #476]	; (800cdd4 <McpsIndication+0x33c>)
 800cbf6:	701a      	strb	r2, [r3, #0]
                AppLedStateOn = AppLedStateOn;
 800cbf8:	4b76      	ldr	r3, [pc, #472]	; (800cdd4 <McpsIndication+0x33c>)
 800cbfa:	781a      	ldrb	r2, [r3, #0]
 800cbfc:	4b75      	ldr	r3, [pc, #468]	; (800cdd4 <McpsIndication+0x33c>)
 800cbfe:	701a      	strb	r2, [r3, #0]
            break;
 800cc00:	e19e      	b.n	800cf40 <McpsIndication+0x4a8>
            if( ComplianceTest.Running == false )
 800cc02:	4b6f      	ldr	r3, [pc, #444]	; (800cdc0 <McpsIndication+0x328>)
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	f083 0301 	eor.w	r3, r3, #1
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d050      	beq.n	800ccb2 <McpsIndication+0x21a>
                if( ( mcpsIndication->BufferSize == 4 ) &&
 800cc10:	1d3b      	adds	r3, r7, #4
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	7b1b      	ldrb	r3, [r3, #12]
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	f040 8194 	bne.w	800cf44 <McpsIndication+0x4ac>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800cc1c:	1d3b      	adds	r3, r7, #4
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	781b      	ldrb	r3, [r3, #0]
                if( ( mcpsIndication->BufferSize == 4 ) &&
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	f040 818d 	bne.w	800cf44 <McpsIndication+0x4ac>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800cc2a:	1d3b      	adds	r3, r7, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	3301      	adds	r3, #1
 800cc32:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	f040 8185 	bne.w	800cf44 <McpsIndication+0x4ac>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800cc3a:	1d3b      	adds	r3, r7, #4
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	3302      	adds	r3, #2
 800cc42:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	f040 817d 	bne.w	800cf44 <McpsIndication+0x4ac>
                    ( mcpsIndication->Buffer[3] == 0x01 ) )
 800cc4a:	1d3b      	adds	r3, r7, #4
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	3303      	adds	r3, #3
 800cc52:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	f040 8175 	bne.w	800cf44 <McpsIndication+0x4ac>
                    IsTxConfirmed = false;
 800cc5a:	4b5f      	ldr	r3, [pc, #380]	; (800cdd8 <McpsIndication+0x340>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
                    AppPort = 224;
 800cc60:	4b5e      	ldr	r3, [pc, #376]	; (800cddc <McpsIndication+0x344>)
 800cc62:	22e0      	movs	r2, #224	; 0xe0
 800cc64:	701a      	strb	r2, [r3, #0]
                    AppDataSize = 2;
 800cc66:	4b5e      	ldr	r3, [pc, #376]	; (800cde0 <McpsIndication+0x348>)
 800cc68:	2202      	movs	r2, #2
 800cc6a:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
 800cc6c:	4b54      	ldr	r3, [pc, #336]	; (800cdc0 <McpsIndication+0x328>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.LinkCheck = false;
 800cc72:	4b53      	ldr	r3, [pc, #332]	; (800cdc0 <McpsIndication+0x328>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = 0;
 800cc78:	4b51      	ldr	r3, [pc, #324]	; (800cdc0 <McpsIndication+0x328>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = 0;
 800cc7e:	4b50      	ldr	r3, [pc, #320]	; (800cdc0 <McpsIndication+0x328>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	741a      	strb	r2, [r3, #16]
                    ComplianceTest.Running = true;
 800cc84:	4b4e      	ldr	r3, [pc, #312]	; (800cdc0 <McpsIndication+0x328>)
 800cc86:	2201      	movs	r2, #1
 800cc88:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
 800cc8a:	4b4d      	ldr	r3, [pc, #308]	; (800cdc0 <McpsIndication+0x328>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800cc90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cc94:	2202      	movs	r2, #2
 800cc96:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = true;
 800cc98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cca0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fc fedb 	bl	8009a60 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( false );
 800ccaa:	2000      	movs	r0, #0
 800ccac:	f7fd fb7c 	bl	800a3a8 <LoRaMacTestSetDutyCycleOn>
            break;
 800ccb0:	e148      	b.n	800cf44 <McpsIndication+0x4ac>
                ComplianceTest.State = mcpsIndication->Buffer[0];
 800ccb2:	1d3b      	adds	r3, r7, #4
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	4b41      	ldr	r3, [pc, #260]	; (800cdc0 <McpsIndication+0x328>)
 800ccbc:	705a      	strb	r2, [r3, #1]
                switch( ComplianceTest.State )
 800ccbe:	4b40      	ldr	r3, [pc, #256]	; (800cdc0 <McpsIndication+0x328>)
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	2b07      	cmp	r3, #7
 800ccc4:	f200 8134 	bhi.w	800cf30 <McpsIndication+0x498>
 800ccc8:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <McpsIndication+0x238>)
 800ccca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccce:	bf00      	nop
 800ccd0:	0800ccf1 	.word	0x0800ccf1
 800ccd4:	0800cd31 	.word	0x0800cd31
 800ccd8:	0800cd39 	.word	0x0800cd39
 800ccdc:	0800cd47 	.word	0x0800cd47
 800cce0:	0800cd55 	.word	0x0800cd55
 800cce4:	0800cd9f 	.word	0x0800cd9f
 800cce8:	0800cde9 	.word	0x0800cde9
 800ccec:	0800ce61 	.word	0x0800ce61
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 800ccf0:	4b39      	ldr	r3, [pc, #228]	; (800cdd8 <McpsIndication+0x340>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	701a      	strb	r2, [r3, #0]
                    AppPort = LORAWAN_APP_PORT;
 800ccf6:	4b39      	ldr	r3, [pc, #228]	; (800cddc <McpsIndication+0x344>)
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	701a      	strb	r2, [r3, #0]
                    AppDataSize = LORAWAN_APP_DATA_SIZE;
 800ccfc:	4b38      	ldr	r3, [pc, #224]	; (800cde0 <McpsIndication+0x348>)
 800ccfe:	2204      	movs	r2, #4
 800cd00:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
 800cd02:	4b2f      	ldr	r3, [pc, #188]	; (800cdc0 <McpsIndication+0x328>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.Running = false;
 800cd08:	4b2d      	ldr	r3, [pc, #180]	; (800cdc0 <McpsIndication+0x328>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
                    mibReq.Type = MIB_ADR;
 800cd0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd12:	2202      	movs	r2, #2
 800cd14:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 800cd16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cd1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc fe9c 	bl	8009a60 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800cd28:	2001      	movs	r0, #1
 800cd2a:	f7fd fb3d 	bl	800a3a8 <LoRaMacTestSetDutyCycleOn>
                    break;
 800cd2e:	e100      	b.n	800cf32 <McpsIndication+0x49a>
                    AppDataSize = 2;
 800cd30:	4b2b      	ldr	r3, [pc, #172]	; (800cde0 <McpsIndication+0x348>)
 800cd32:	2202      	movs	r2, #2
 800cd34:	701a      	strb	r2, [r3, #0]
                    break;
 800cd36:	e0fc      	b.n	800cf32 <McpsIndication+0x49a>
                    IsTxConfirmed = true;
 800cd38:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <McpsIndication+0x340>)
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
 800cd3e:	4b20      	ldr	r3, [pc, #128]	; (800cdc0 <McpsIndication+0x328>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	705a      	strb	r2, [r3, #1]
                    break;
 800cd44:	e0f5      	b.n	800cf32 <McpsIndication+0x49a>
                    IsTxConfirmed = false;
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <McpsIndication+0x340>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
 800cd4c:	4b1c      	ldr	r3, [pc, #112]	; (800cdc0 <McpsIndication+0x328>)
 800cd4e:	2201      	movs	r2, #1
 800cd50:	705a      	strb	r2, [r3, #1]
                    break;
 800cd52:	e0ee      	b.n	800cf32 <McpsIndication+0x49a>
                    AppDataSize = mcpsIndication->BufferSize;
 800cd54:	1d3b      	adds	r3, r7, #4
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	7b1a      	ldrb	r2, [r3, #12]
 800cd5a:	4b21      	ldr	r3, [pc, #132]	; (800cde0 <McpsIndication+0x348>)
 800cd5c:	701a      	strb	r2, [r3, #0]
                    AppData[0] = 4;
 800cd5e:	4b21      	ldr	r3, [pc, #132]	; (800cde4 <McpsIndication+0x34c>)
 800cd60:	2204      	movs	r2, #4
 800cd62:	701a      	strb	r2, [r3, #0]
                    for( uint8_t i = 1; i < AppDataSize; i++ )
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800cd6a:	e011      	b.n	800cd90 <McpsIndication+0x2f8>
                        AppData[i] = mcpsIndication->Buffer[i] + 1;
 800cd6c:	1d3b      	adds	r3, r7, #4
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	689a      	ldr	r2, [r3, #8]
 800cd72:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800cd76:	4413      	add	r3, r2
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800cd7e:	3201      	adds	r2, #1
 800cd80:	b2d1      	uxtb	r1, r2
 800cd82:	4a18      	ldr	r2, [pc, #96]	; (800cde4 <McpsIndication+0x34c>)
 800cd84:	54d1      	strb	r1, [r2, r3]
                    for( uint8_t i = 1; i < AppDataSize; i++ )
 800cd86:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800cd90:	4b13      	ldr	r3, [pc, #76]	; (800cde0 <McpsIndication+0x348>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d3e7      	bcc.n	800cd6c <McpsIndication+0x2d4>
                    break;
 800cd9c:	e0c9      	b.n	800cf32 <McpsIndication+0x49a>
                        mlmeReq.Type = MLME_LINK_CHECK;
 800cd9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cda2:	2201      	movs	r2, #1
 800cda4:	701a      	strb	r2, [r3, #0]
                        LoRaMacMlmeRequest( &mlmeReq );
 800cda6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd f95a 	bl	800a064 <LoRaMacMlmeRequest>
                    break;
 800cdb0:	e0bf      	b.n	800cf32 <McpsIndication+0x49a>
 800cdb2:	bf00      	nop
 800cdb4:	080123a4 	.word	0x080123a4
 800cdb8:	080123bc 	.word	0x080123bc
 800cdbc:	20000c20 	.word	0x20000c20
 800cdc0:	20000e2c 	.word	0x20000e2c
 800cdc4:	080123cc 	.word	0x080123cc
 800cdc8:	080123d4 	.word	0x080123d4
 800cdcc:	080123dc 	.word	0x080123dc
 800cdd0:	200009e8 	.word	0x200009e8
 800cdd4:	2000081c 	.word	0x2000081c
 800cdd8:	20000112 	.word	0x20000112
 800cddc:	20000110 	.word	0x20000110
 800cde0:	20000111 	.word	0x20000111
 800cde4:	200007c4 	.word	0x200007c4
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
 800cde8:	4b59      	ldr	r3, [pc, #356]	; (800cf50 <McpsIndication+0x4b8>)
 800cdea:	2201      	movs	r2, #1
 800cdec:	701a      	strb	r2, [r3, #0]
                        AppPort = LORAWAN_APP_PORT;
 800cdee:	4b59      	ldr	r3, [pc, #356]	; (800cf54 <McpsIndication+0x4bc>)
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	701a      	strb	r2, [r3, #0]
                        AppDataSize = LORAWAN_APP_DATA_SIZE;
 800cdf4:	4b58      	ldr	r3, [pc, #352]	; (800cf58 <McpsIndication+0x4c0>)
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	701a      	strb	r2, [r3, #0]
                        ComplianceTest.DownLinkCounter = 0;
 800cdfa:	4b58      	ldr	r3, [pc, #352]	; (800cf5c <McpsIndication+0x4c4>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	819a      	strh	r2, [r3, #12]
                        ComplianceTest.Running = false;
 800ce00:	4b56      	ldr	r3, [pc, #344]	; (800cf5c <McpsIndication+0x4c4>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
                        mibReq.Type = MIB_ADR;
 800ce06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	701a      	strb	r2, [r3, #0]
                        mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 800ce0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce12:	2201      	movs	r2, #1
 800ce14:	711a      	strb	r2, [r3, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
 800ce16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fc fe20 	bl	8009a60 <LoRaMacMibSetRequestConfirm>
                        LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800ce20:	2001      	movs	r0, #1
 800ce22:	f7fd fac1 	bl	800a3a8 <LoRaMacTestSetDutyCycleOn>
                        mlmeReq.Type = MLME_JOIN;
 800ce26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]
                        mlmeReq.Req.Join.DevEui = DevEui;
 800ce2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce32:	4a4b      	ldr	r2, [pc, #300]	; (800cf60 <McpsIndication+0x4c8>)
 800ce34:	605a      	str	r2, [r3, #4]
                        mlmeReq.Req.Join.AppEui = AppEui;
 800ce36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce3a:	4a4a      	ldr	r2, [pc, #296]	; (800cf64 <McpsIndication+0x4cc>)
 800ce3c:	609a      	str	r2, [r3, #8]
                        mlmeReq.Req.Join.AppKey = AppKey;
 800ce3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce42:	4a49      	ldr	r2, [pc, #292]	; (800cf68 <McpsIndication+0x4d0>)
 800ce44:	60da      	str	r2, [r3, #12]
                        mlmeReq.Req.Join.NbTrials = 3;
 800ce46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce4a:	2203      	movs	r2, #3
 800ce4c:	741a      	strb	r2, [r3, #16]
                        LoRaMacMlmeRequest( &mlmeReq );
 800ce4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fd f906 	bl	800a064 <LoRaMacMlmeRequest>
                        DeviceState = DEVICE_STATE_SLEEP;
 800ce58:	4b44      	ldr	r3, [pc, #272]	; (800cf6c <McpsIndication+0x4d4>)
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	701a      	strb	r2, [r3, #0]
                    break;
 800ce5e:	e068      	b.n	800cf32 <McpsIndication+0x49a>
                        if( mcpsIndication->BufferSize == 3 )
 800ce60:	1d3b      	adds	r3, r7, #4
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	7b1b      	ldrb	r3, [r3, #12]
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d11c      	bne.n	800cea4 <McpsIndication+0x40c>
                            mlmeReq.Type = MLME_TXCW;
 800ce6a:	f107 031c 	add.w	r3, r7, #28
 800ce6e:	2202      	movs	r2, #2
 800ce70:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ce72:	1d3b      	adds	r3, r7, #4
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	021b      	lsls	r3, r3, #8
 800ce7e:	b21a      	sxth	r2, r3
 800ce80:	1d3b      	adds	r3, r7, #4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	3302      	adds	r3, #2
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b21b      	sxth	r3, r3
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	b21b      	sxth	r3, r3
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	f107 031c 	add.w	r3, r7, #28
 800ce96:	809a      	strh	r2, [r3, #4]
                            LoRaMacMlmeRequest( &mlmeReq );
 800ce98:	f107 031c 	add.w	r3, r7, #28
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fd f8e1 	bl	800a064 <LoRaMacMlmeRequest>
 800cea2:	e041      	b.n	800cf28 <McpsIndication+0x490>
                        else if( mcpsIndication->BufferSize == 7 )
 800cea4:	1d3b      	adds	r3, r7, #4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	7b1b      	ldrb	r3, [r3, #12]
 800ceaa:	2b07      	cmp	r3, #7
 800ceac:	d13c      	bne.n	800cf28 <McpsIndication+0x490>
                            mlmeReq.Type = MLME_TXCW_1;
 800ceae:	f107 0308 	add.w	r3, r7, #8
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ceb6:	1d3b      	adds	r3, r7, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	3301      	adds	r3, #1
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	021b      	lsls	r3, r3, #8
 800cec2:	b21a      	sxth	r2, r3
 800cec4:	1d3b      	adds	r3, r7, #4
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	3302      	adds	r3, #2
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	b21b      	sxth	r3, r3
 800ced0:	4313      	orrs	r3, r2
 800ced2:	b21b      	sxth	r3, r3
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	809a      	strh	r2, [r3, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800cedc:	1d3b      	adds	r3, r7, #4
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	3303      	adds	r3, #3
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	041a      	lsls	r2, r3, #16
 800cee8:	1d3b      	adds	r3, r7, #4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	3304      	adds	r3, #4
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	021b      	lsls	r3, r3, #8
 800cef4:	4313      	orrs	r3, r2
 800cef6:	1d3a      	adds	r2, r7, #4
 800cef8:	6812      	ldr	r2, [r2, #0]
 800cefa:	6892      	ldr	r2, [r2, #8]
 800cefc:	3205      	adds	r2, #5
 800cefe:	7812      	ldrb	r2, [r2, #0]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	461a      	mov	r2, r3
 800cf04:	2364      	movs	r3, #100	; 0x64
 800cf06:	fb03 f202 	mul.w	r2, r3, r2
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	609a      	str	r2, [r3, #8]
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800cf10:	1d3b      	adds	r3, r7, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	799a      	ldrb	r2, [r3, #6]
 800cf18:	f107 0308 	add.w	r3, r7, #8
 800cf1c:	731a      	strb	r2, [r3, #12]
                            LoRaMacMlmeRequest( &mlmeReq );
 800cf1e:	f107 0308 	add.w	r3, r7, #8
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fd f89e 	bl	800a064 <LoRaMacMlmeRequest>
                        ComplianceTest.State = 1;
 800cf28:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <McpsIndication+0x4c4>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	705a      	strb	r2, [r3, #1]
                    break;
 800cf2e:	e000      	b.n	800cf32 <McpsIndication+0x49a>
                    break;
 800cf30:	bf00      	nop
            break;
 800cf32:	e007      	b.n	800cf44 <McpsIndication+0x4ac>
        return;
 800cf34:	bf00      	nop
 800cf36:	e006      	b.n	800cf46 <McpsIndication+0x4ae>
        }
    }
 800cf38:	bf00      	nop
 800cf3a:	e004      	b.n	800cf46 <McpsIndication+0x4ae>
            break;
 800cf3c:	bf00      	nop
 800cf3e:	e002      	b.n	800cf46 <McpsIndication+0x4ae>
            break;
 800cf40:	bf00      	nop
 800cf42:	e000      	b.n	800cf46 <McpsIndication+0x4ae>
            break;
 800cf44:	bf00      	nop
}
 800cf46:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000112 	.word	0x20000112
 800cf54:	20000110 	.word	0x20000110
 800cf58:	20000111 	.word	0x20000111
 800cf5c:	20000e2c 	.word	0x20000e2c
 800cf60:	200000f0 	.word	0x200000f0
 800cf64:	200000f8 	.word	0x200000f8
 800cf68:	20000100 	.word	0x20000100
 800cf6c:	2000081d 	.word	0x2000081d

0800cf70 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	switch( mlmeConfirm->MlmeRequest )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <MlmeConfirm+0x16>
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d00f      	beq.n	800cfa4 <MlmeConfirm+0x34>
				}
			}
			break;
		}
		default:
				break;
 800cf84:	e022      	b.n	800cfcc <MlmeConfirm+0x5c>
				if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	785b      	ldrb	r3, [r3, #1]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <MlmeConfirm+0x2c>
					DebugPrintf("+JOIN:DONE\r\n\r\n");
 800cf8e:	4813      	ldr	r0, [pc, #76]	; (800cfdc <MlmeConfirm+0x6c>)
 800cf90:	f004 f97c 	bl	801128c <DebugPrintf>
					DeviceState = DEVICE_STATE_SEND;
 800cf94:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <MlmeConfirm+0x70>)
 800cf96:	2202      	movs	r2, #2
 800cf98:	701a      	strb	r2, [r3, #0]
				break;
 800cf9a:	e017      	b.n	800cfcc <MlmeConfirm+0x5c>
					DeviceState = DEVICE_STATE_JOIN;
 800cf9c:	4b10      	ldr	r3, [pc, #64]	; (800cfe0 <MlmeConfirm+0x70>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	701a      	strb	r2, [r3, #0]
				break;
 800cfa2:	e013      	b.n	800cfcc <MlmeConfirm+0x5c>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	785b      	ldrb	r3, [r3, #1]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10e      	bne.n	800cfca <MlmeConfirm+0x5a>
				if( ComplianceTest.Running == true )
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <MlmeConfirm+0x74>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00a      	beq.n	800cfca <MlmeConfirm+0x5a>
						ComplianceTest.LinkCheck = true;
 800cfb4:	4b0b      	ldr	r3, [pc, #44]	; (800cfe4 <MlmeConfirm+0x74>)
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	739a      	strb	r2, [r3, #14]
						ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7a1a      	ldrb	r2, [r3, #8]
 800cfbe:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <MlmeConfirm+0x74>)
 800cfc0:	73da      	strb	r2, [r3, #15]
						ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7a5a      	ldrb	r2, [r3, #9]
 800cfc6:	4b07      	ldr	r3, [pc, #28]	; (800cfe4 <MlmeConfirm+0x74>)
 800cfc8:	741a      	strb	r2, [r3, #16]
			break;
 800cfca:	bf00      	nop
	}
	NextTx = true;
 800cfcc:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <MlmeConfirm+0x78>)
 800cfce:	2201      	movs	r2, #1
 800cfd0:	701a      	strb	r2, [r3, #0]
}
 800cfd2:	bf00      	nop
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	080123fc 	.word	0x080123fc
 800cfe0:	2000081d 	.word	0x2000081d
 800cfe4:	20000e2c 	.word	0x20000e2c
 800cfe8:	20000113 	.word	0x20000113

0800cfec <main>:

/**
 * Main application entry point.
 */
int main( void )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b09c      	sub	sp, #112	; 0x70
 800cff0:	af02      	add	r7, sp, #8
    LoRaMacPrimitives_t LoRaMacPrimitives;
    LoRaMacCallback_t LoRaMacCallbacks;
    MibRequestConfirm_t mibReq;

    BoardInitMcu( );
 800cff2:	f7fe fa5f 	bl	800b4b4 <BoardInitMcu>

    BoardInitPeriph( );
 800cff6:	f7fe fa3f 	bl	800b478 <BoardInitPeriph>

    DeviceState = DEVICE_STATE_INIT;
 800cffa:	4b98      	ldr	r3, [pc, #608]	; (800d25c <main+0x270>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	701a      	strb	r2, [r3, #0]

    while( 1 )
    {
        switch( DeviceState )
 800d000:	4b96      	ldr	r3, [pc, #600]	; (800d25c <main+0x270>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b04      	cmp	r3, #4
 800d006:	f200 8124 	bhi.w	800d252 <main+0x266>
 800d00a:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <main+0x24>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d025 	.word	0x0800d025
 800d014:	0800d17b 	.word	0x0800d17b
 800d018:	0800d1d3 	.word	0x0800d1d3
 800d01c:	0800d233 	.word	0x0800d233
 800d020:	0800d24d 	.word	0x0800d24d
        {
            case DEVICE_STATE_INIT:
            {
                LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d024:	4b8e      	ldr	r3, [pc, #568]	; (800d260 <main+0x274>)
 800d026:	627b      	str	r3, [r7, #36]	; 0x24
                LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d028:	4b8e      	ldr	r3, [pc, #568]	; (800d264 <main+0x278>)
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
                LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d02c:	4b8e      	ldr	r3, [pc, #568]	; (800d268 <main+0x27c>)
 800d02e:	62fb      	str	r3, [r7, #44]	; 0x2c
                LoRaMacCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
 800d030:	4b8e      	ldr	r3, [pc, #568]	; (800d26c <main+0x280>)
 800d032:	623b      	str	r3, [r7, #32]
                LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks );
 800d034:	f107 0220 	add.w	r2, r7, #32
 800d038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d03c:	4611      	mov	r1, r2
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fc fa72 	bl	8009528 <LoRaMacInitialization>

                TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 800d044:	498a      	ldr	r1, [pc, #552]	; (800d270 <main+0x284>)
 800d046:	488b      	ldr	r0, [pc, #556]	; (800d274 <main+0x288>)
 800d048:	f003 fda0 	bl	8010b8c <TimerInit>
                            
                mibReq.Type = MIB_ADR;
 800d04c:	2302      	movs	r3, #2
 800d04e:	753b      	strb	r3, [r7, #20]
                mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
 800d050:	2301      	movs	r3, #1
 800d052:	763b      	strb	r3, [r7, #24]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d054:	f107 0314 	add.w	r3, r7, #20
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fc fd01 	bl	8009a60 <LoRaMacMibSetRequestConfirm>

                mibReq.Type = MIB_PUBLIC_NETWORK;
 800d05e:	2307      	movs	r3, #7
 800d060:	753b      	strb	r3, [r7, #20]
                mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d062:	2301      	movs	r3, #1
 800d064:	763b      	strb	r3, [r7, #24]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d066:	f107 0314 	add.w	r3, r7, #20
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fc fcf8 	bl	8009a60 <LoRaMacMibSetRequestConfirm>

#if defined( USE_BAND_868 )
                LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800d070:	2001      	movs	r0, #1
 800d072:	f7fd f999 	bl	800a3a8 <LoRaMacTestSetDutyCycleOn>

#if( USE_SEMTECH_DEFAULT_CHANNEL_LINEUP == 1 ) 
                LoRaMacChannelAdd( 3, ( ChannelParams_t )LC4 );
 800d076:	4a80      	ldr	r2, [pc, #512]	; (800d278 <main+0x28c>)
 800d078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d07c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d080:	e883 0003 	stmia.w	r3, {r0, r1}
 800d084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d088:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d08c:	2003      	movs	r0, #3
 800d08e:	f7fc fe8f 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 4, ( ChannelParams_t )LC5 );
 800d092:	4a7a      	ldr	r2, [pc, #488]	; (800d27c <main+0x290>)
 800d094:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d09c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d0a8:	2004      	movs	r0, #4
 800d0aa:	f7fc fe81 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 5, ( ChannelParams_t )LC6 );
 800d0ae:	4a74      	ldr	r2, [pc, #464]	; (800d280 <main+0x294>)
 800d0b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d0c4:	2005      	movs	r0, #5
 800d0c6:	f7fc fe73 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 6, ( ChannelParams_t )LC7 );
 800d0ca:	4a6e      	ldr	r2, [pc, #440]	; (800d284 <main+0x298>)
 800d0cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d0e0:	2006      	movs	r0, #6
 800d0e2:	f7fc fe65 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 7, ( ChannelParams_t )LC8 );
 800d0e6:	4a68      	ldr	r2, [pc, #416]	; (800d288 <main+0x29c>)
 800d0e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d0fc:	2007      	movs	r0, #7
 800d0fe:	f7fc fe57 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 8, ( ChannelParams_t )LC9 );
 800d102:	4a62      	ldr	r2, [pc, #392]	; (800d28c <main+0x2a0>)
 800d104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d10c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d110:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d114:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d118:	2008      	movs	r0, #8
 800d11a:	f7fc fe49 	bl	8009db0 <LoRaMacChannelAdd>
                LoRaMacChannelAdd( 9, ( ChannelParams_t )LC10 );
 800d11e:	4a5c      	ldr	r2, [pc, #368]	; (800d290 <main+0x2a4>)
 800d120:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d124:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d128:	e883 0003 	stmia.w	r3, {r0, r1}
 800d12c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d130:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d134:	2009      	movs	r0, #9
 800d136:	f7fc fe3b 	bl	8009db0 <LoRaMacChannelAdd>

                mibReq.Type = MIB_RX2_DEFAULT_CHANNEL;
 800d13a:	230b      	movs	r3, #11
 800d13c:	753b      	strb	r3, [r7, #20]
                mibReq.Param.Rx2DefaultChannel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
 800d13e:	4a55      	ldr	r2, [pc, #340]	; (800d294 <main+0x2a8>)
 800d140:	f107 0318 	add.w	r3, r7, #24
 800d144:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d148:	e883 0003 	stmia.w	r3, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d14c:	f107 0314 	add.w	r3, r7, #20
 800d150:	4618      	mov	r0, r3
 800d152:	f7fc fc85 	bl	8009a60 <LoRaMacMibSetRequestConfirm>

                mibReq.Type = MIB_RX2_CHANNEL;
 800d156:	230a      	movs	r3, #10
 800d158:	753b      	strb	r3, [r7, #20]
                mibReq.Param.Rx2Channel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
 800d15a:	4a4e      	ldr	r2, [pc, #312]	; (800d294 <main+0x2a8>)
 800d15c:	f107 0318 	add.w	r3, r7, #24
 800d160:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d164:	e883 0003 	stmia.w	r3, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d168:	f107 0314 	add.w	r3, r7, #20
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fc fc77 	bl	8009a60 <LoRaMacMibSetRequestConfirm>
#endif

#endif
                DeviceState = DEVICE_STATE_JOIN;
 800d172:	4b3a      	ldr	r3, [pc, #232]	; (800d25c <main+0x270>)
 800d174:	2201      	movs	r2, #1
 800d176:	701a      	strb	r2, [r3, #0]
                break;
 800d178:	e06f      	b.n	800d25a <main+0x26e>
            }
            case DEVICE_STATE_JOIN:
            {
							GpioInit( &EN_Vext, Vext, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d17a:	2301      	movs	r3, #1
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	2301      	movs	r3, #1
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	2300      	movs	r3, #0
 800d184:	2201      	movs	r2, #1
 800d186:	2113      	movs	r1, #19
 800d188:	4843      	ldr	r0, [pc, #268]	; (800d298 <main+0x2ac>)
 800d18a:	f7ff fa1f 	bl	800c5cc <GpioInit>
							GpioWrite(&EN_Vext, 0 );// Turn ON RF(SX1278) power	
 800d18e:	2100      	movs	r1, #0
 800d190:	4841      	ldr	r0, [pc, #260]	; (800d298 <main+0x2ac>)
 800d192:	f7ff fa5a 	bl	800c64a <GpioWrite>
							HAL_Delay(500);
 800d196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d19a:	f7f3 fd05 	bl	8000ba8 <HAL_Delay>
#if( OVER_THE_AIR_ACTIVATION != 0 )
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_JOIN;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	703b      	strb	r3, [r7, #0]

                mlmeReq.Req.Join.DevEui = DevEui;
 800d1a2:	4b3e      	ldr	r3, [pc, #248]	; (800d29c <main+0x2b0>)
 800d1a4:	607b      	str	r3, [r7, #4]
                mlmeReq.Req.Join.AppEui = AppEui;
 800d1a6:	4b3e      	ldr	r3, [pc, #248]	; (800d2a0 <main+0x2b4>)
 800d1a8:	60bb      	str	r3, [r7, #8]
                mlmeReq.Req.Join.AppKey = AppKey;
 800d1aa:	4b3e      	ldr	r3, [pc, #248]	; (800d2a4 <main+0x2b8>)
 800d1ac:	60fb      	str	r3, [r7, #12]
                mlmeReq.Req.Join.NbTrials = 3;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	743b      	strb	r3, [r7, #16]

                if( NextTx == true )
 800d1b2:	4b3d      	ldr	r3, [pc, #244]	; (800d2a8 <main+0x2bc>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d006      	beq.n	800d1c8 <main+0x1dc>
                {
                	DebugPrintf("+JOIN:STARTING...\r\n");
 800d1ba:	483c      	ldr	r0, [pc, #240]	; (800d2ac <main+0x2c0>)
 800d1bc:	f004 f866 	bl	801128c <DebugPrintf>
                	LoRaMacMlmeRequest( &mlmeReq );
 800d1c0:	463b      	mov	r3, r7
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fc ff4e 	bl	800a064 <LoRaMacMlmeRequest>
                }
                DeviceState = DEVICE_STATE_SLEEP;
 800d1c8:	4b24      	ldr	r3, [pc, #144]	; (800d25c <main+0x270>)
 800d1ca:	2204      	movs	r2, #4
 800d1cc:	701a      	strb	r2, [r3, #0]
                mibReq.Param.IsNetworkJoined = true;
                LoRaMacMibSetRequestConfirm( &mibReq );

                DeviceState = DEVICE_STATE_SEND;
#endif
                break;
 800d1ce:	bf00      	nop
 800d1d0:	e043      	b.n	800d25a <main+0x26e>
            }
            case DEVICE_STATE_SEND:
            {
#if defined ADC_measurement
            	ADC_measure();
 800d1d2:	f7ff fb01 	bl	800c7d8 <ADC_measure>
#endif
				DebugPrintf("Into send state\r\n");
 800d1d6:	4836      	ldr	r0, [pc, #216]	; (800d2b0 <main+0x2c4>)
 800d1d8:	f004 f858 	bl	801128c <DebugPrintf>
				if( NextTx == true )
 800d1dc:	4b32      	ldr	r3, [pc, #200]	; (800d2a8 <main+0x2bc>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00d      	beq.n	800d200 <main+0x214>
				{
				  DebugPrintf("In sending...\r\n");
 800d1e4:	4833      	ldr	r0, [pc, #204]	; (800d2b4 <main+0x2c8>)
 800d1e6:	f004 f851 	bl	801128c <DebugPrintf>
					PrepareTxFrame( AppPort );
 800d1ea:	4b33      	ldr	r3, [pc, #204]	; (800d2b8 <main+0x2cc>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff fb68 	bl	800c8c4 <PrepareTxFrame>
					NextTx = SendFrame( );
 800d1f4:	f7ff fbb8 	bl	800c968 <SendFrame>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	4b2a      	ldr	r3, [pc, #168]	; (800d2a8 <main+0x2bc>)
 800d1fe:	701a      	strb	r2, [r3, #0]
				}
				if( ComplianceTest.Running == true )
 800d200:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <main+0x2d0>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <main+0x226>
				{
						// Schedule next packet transmission
						TxDutyCycleTime = 1000; // 5000 ms
 800d208:	4b2d      	ldr	r3, [pc, #180]	; (800d2c0 <main+0x2d4>)
 800d20a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	e00b      	b.n	800d22a <main+0x23e>
				}
				else
				{
						// Schedule next packet transmission
						TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
 800d212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d216:	482b      	ldr	r0, [pc, #172]	; (800d2c4 <main+0x2d8>)
 800d218:	f004 fa6e 	bl	80116f8 <randr>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800d222:	3330      	adds	r3, #48	; 0x30
 800d224:	461a      	mov	r2, r3
 800d226:	4b26      	ldr	r3, [pc, #152]	; (800d2c0 <main+0x2d4>)
 800d228:	601a      	str	r2, [r3, #0]
				}
				DeviceState = DEVICE_STATE_CYCLE;
 800d22a:	4b0c      	ldr	r3, [pc, #48]	; (800d25c <main+0x270>)
 800d22c:	2203      	movs	r2, #3
 800d22e:	701a      	strb	r2, [r3, #0]
				break;
 800d230:	e013      	b.n	800d25a <main+0x26e>
            }
            case DEVICE_STATE_CYCLE:
            {
                DeviceState = DEVICE_STATE_SLEEP;
 800d232:	4b0a      	ldr	r3, [pc, #40]	; (800d25c <main+0x270>)
 800d234:	2204      	movs	r2, #4
 800d236:	701a      	strb	r2, [r3, #0]

                // Schedule next packet transmission
                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
 800d238:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <main+0x2d4>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4619      	mov	r1, r3
 800d23e:	480d      	ldr	r0, [pc, #52]	; (800d274 <main+0x288>)
 800d240:	f003 fec2 	bl	8010fc8 <TimerSetValue>
                TimerStart( &TxNextPacketTimer );
 800d244:	480b      	ldr	r0, [pc, #44]	; (800d274 <main+0x288>)
 800d246:	f003 fcbb 	bl	8010bc0 <TimerStart>
                break;
 800d24a:	e006      	b.n	800d25a <main+0x26e>
            }
            case DEVICE_STATE_SLEEP:
            {
                // Wake up through events
//            	DebugPrintf("S");
                TimerLowPowerHandler( );
 800d24c:	f003 ff02 	bl	8011054 <TimerLowPowerHandler>
                break;
 800d250:	e003      	b.n	800d25a <main+0x26e>
            }
            default:
            {
                DeviceState = DEVICE_STATE_INIT;
 800d252:	4b02      	ldr	r3, [pc, #8]	; (800d25c <main+0x270>)
 800d254:	2200      	movs	r2, #0
 800d256:	701a      	strb	r2, [r3, #0]
                break;
 800d258:	bf00      	nop
        switch( DeviceState )
 800d25a:	e6d1      	b.n	800d000 <main+0x14>
 800d25c:	2000081d 	.word	0x2000081d
 800d260:	0800ca55 	.word	0x0800ca55
 800d264:	0800ca99 	.word	0x0800ca99
 800d268:	0800cf71 	.word	0x0800cf71
 800d26c:	0800b5b9 	.word	0x0800b5b9
 800d270:	0800ca05 	.word	0x0800ca05
 800d274:	20000808 	.word	0x20000808
 800d278:	08012444 	.word	0x08012444
 800d27c:	0801244c 	.word	0x0801244c
 800d280:	08012454 	.word	0x08012454
 800d284:	0801245c 	.word	0x0801245c
 800d288:	08012464 	.word	0x08012464
 800d28c:	0801246c 	.word	0x0801246c
 800d290:	08012474 	.word	0x08012474
 800d294:	0801247c 	.word	0x0801247c
 800d298:	20000c20 	.word	0x20000c20
 800d29c:	200000f0 	.word	0x200000f0
 800d2a0:	200000f8 	.word	0x200000f8
 800d2a4:	20000100 	.word	0x20000100
 800d2a8:	20000113 	.word	0x20000113
 800d2ac:	0801240c 	.word	0x0801240c
 800d2b0:	08012420 	.word	0x08012420
 800d2b4:	08012434 	.word	0x08012434
 800d2b8:	20000110 	.word	0x20000110
 800d2bc:	20000e2c 	.word	0x20000e2c
 800d2c0:	20000804 	.word	0x20000804
 800d2c4:	fffffc18 	.word	0xfffffc18

0800d2c8 <Error_Handler>:
            }
        }
    }
}
void Error_Handler(void){
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0



	
}
 800d2cc:	bf00      	nop
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr

0800d2d4 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitialized == false )
 800d2da:	4b29      	ldr	r3, [pc, #164]	; (800d380 <RtcInit+0xac>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f083 0301 	eor.w	r3, r3, #1
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d047      	beq.n	800d378 <RtcInit+0xa4>
    {
        __HAL_RCC_RTC_ENABLE( );
 800d2e8:	4b26      	ldr	r3, [pc, #152]	; (800d384 <RtcInit+0xb0>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance = RTC;
 800d2ee:	4b26      	ldr	r3, [pc, #152]	; (800d388 <RtcInit+0xb4>)
 800d2f0:	4a26      	ldr	r2, [pc, #152]	; (800d38c <RtcInit+0xb8>)
 800d2f2:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2f4:	4b24      	ldr	r3, [pc, #144]	; (800d388 <RtcInit+0xb4>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 3;
 800d2fa:	4b23      	ldr	r3, [pc, #140]	; (800d388 <RtcInit+0xb4>)
 800d2fc:	2203      	movs	r2, #3
 800d2fe:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 3;
 800d300:	4b21      	ldr	r3, [pc, #132]	; (800d388 <RtcInit+0xb4>)
 800d302:	2203      	movs	r2, #3
 800d304:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d306:	4b20      	ldr	r3, [pc, #128]	; (800d388 <RtcInit+0xb4>)
 800d308:	2200      	movs	r2, #0
 800d30a:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d30c:	4b1e      	ldr	r3, [pc, #120]	; (800d388 <RtcInit+0xb4>)
 800d30e:	2200      	movs	r2, #0
 800d310:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <RtcInit+0xb4>)
 800d314:	2200      	movs	r2, #0
 800d316:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 800d318:	481b      	ldr	r0, [pc, #108]	; (800d388 <RtcInit+0xb4>)
 800d31a:	f7f6 f87d 	bl	8003418 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800d322:	2301      	movs	r3, #1
 800d324:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800d326:	2301      	movs	r3, #1
 800d328:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d32a:	2306      	movs	r3, #6
 800d32c:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800d32e:	1d3b      	adds	r3, r7, #4
 800d330:	3302      	adds	r3, #2
 800d332:	2200      	movs	r2, #0
 800d334:	4619      	mov	r1, r3
 800d336:	4814      	ldr	r0, [pc, #80]	; (800d388 <RtcInit+0xb4>)
 800d338:	f7f6 f9fa 	bl	8003730 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800d348:	2300      	movs	r3, #0
 800d34a:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d350:	2300      	movs	r3, #0
 800d352:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800d354:	1d3b      	adds	r3, r7, #4
 800d356:	3308      	adds	r3, #8
 800d358:	2200      	movs	r2, #0
 800d35a:	4619      	mov	r1, r3
 800d35c:	480a      	ldr	r0, [pc, #40]	; (800d388 <RtcInit+0xb4>)
 800d35e:	f7f6 f8d6 	bl	800350e <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 800d362:	2200      	movs	r2, #0
 800d364:	2104      	movs	r1, #4
 800d366:	2029      	movs	r0, #41	; 0x29
 800d368:	f7f4 f989 	bl	800167e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 800d36c:	2029      	movs	r0, #41	; 0x29
 800d36e:	f7f4 f9a2 	bl	80016b6 <HAL_NVIC_EnableIRQ>
        RtcInitialized = true;
 800d372:	4b03      	ldr	r3, [pc, #12]	; (800d380 <RtcInit+0xac>)
 800d374:	2201      	movs	r2, #1
 800d376:	701a      	strb	r2, [r3, #0]
    }
}
 800d378:	bf00      	nop
 800d37a:	3720      	adds	r7, #32
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20000844 	.word	0x20000844
 800d384:	424706d8 	.word	0x424706d8
 800d388:	20000824 	.word	0x20000824
 800d38c:	40002800 	.word	0x40002800

0800d390 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f94b 	bl	800d634 <RtcStartWakeUpAlarm>
}
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800d3b0:	4b15      	ldr	r3, [pc, #84]	; (800d408 <RtcGetAdjustedTimeoutValue+0x60>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d90c      	bls.n	800d3d4 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800d3ba:	4b14      	ldr	r3, [pc, #80]	; (800d40c <RtcGetAdjustedTimeoutValue+0x64>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d007      	beq.n	800d3d4 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800d3c4:	4b11      	ldr	r3, [pc, #68]	; (800d40c <RtcGetAdjustedTimeoutValue+0x64>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800d3ca:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <RtcGetAdjustedTimeoutValue+0x60>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	607b      	str	r3, [r7, #4]
        }
    }

    if( timeout > McuWakeUpTime )
 800d3d4:	4b0c      	ldr	r3, [pc, #48]	; (800d408 <RtcGetAdjustedTimeoutValue+0x60>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d90e      	bls.n	800d3fc <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)
        if( timeout < 50 ) // 50 ms
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b31      	cmp	r3, #49	; 0x31
 800d3e2:	d803      	bhi.n	800d3ec <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800d3e4:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <RtcGetAdjustedTimeoutValue+0x68>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e007      	b.n	800d3fc <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800d3ec:	4b08      	ldr	r3, [pc, #32]	; (800d410 <RtcGetAdjustedTimeoutValue+0x68>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <RtcGetAdjustedTimeoutValue+0x60>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	607b      	str	r3, [r7, #4]
        }
    }
    return  timeout;
 800d3fc:	687b      	ldr	r3, [r7, #4]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	bc80      	pop	{r7}
 800d406:	4770      	bx	lr
 800d408:	20000848 	.word	0x20000848
 800d40c:	20000821 	.word	0x20000821
 800d410:	20000822 	.word	0x20000822

0800d414 <RtcGetTimerValue>:

TimerTime_t RtcGetTimerValue( void )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
 800d418:	2000      	movs	r0, #0
 800d41a:	f000 fb3d 	bl	800da98 <RtcConvertCalendarTickToTimerTime>
 800d41e:	4603      	mov	r3, r0
}
 800d420:	4618      	mov	r0, r3
 800d422:	bd80      	pop	{r7, pc}

0800d424 <RtcGetElapsedAlarmTime>:

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800d432:	2000      	movs	r0, #0
 800d434:	f000 fb30 	bl	800da98 <RtcConvertCalendarTickToTimerTime>
 800d438:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800d43a:	480a      	ldr	r0, [pc, #40]	; (800d464 <RtcGetElapsedAlarmTime+0x40>)
 800d43c:	f000 fb2c 	bl	800da98 <RtcConvertCalendarTickToTimerTime>
 800d440:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	429a      	cmp	r2, r3
 800d448:	d204      	bcs.n	800d454 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	3b01      	subs	r3, #1
 800d452:	e002      	b.n	800d45a <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	1ad3      	subs	r3, r2, r3
    }
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	20000e94 	.word	0x20000e94

0800d468 <RtcComputeElapsedTime>:
{
    return( RtcGetTimerValue( ) + futureEventInTime );
}

TimerTime_t RtcComputeElapsedTime( TimerTime_t eventInTime )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    TimerTime_t elapsedTime = 0;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]

    // Needed at boot, cannot compute with 0 or elapsed time will be equal to current time
    if( eventInTime == 0 )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <RtcComputeElapsedTime+0x16>
    {
        return 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	e00f      	b.n	800d49e <RtcComputeElapsedTime+0x36>
    }

    elapsedTime = RtcConvertCalendarTickToTimerTime( NULL );
 800d47e:	2000      	movs	r0, #0
 800d480:	f000 fb0a 	bl	800da98 <RtcConvertCalendarTickToTimerTime>
 800d484:	60f8      	str	r0, [r7, #12]

    if( elapsedTime < eventInTime )
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d204      	bcs.n	800d498 <RtcComputeElapsedTime+0x30>
    { // roll over of the counter
        return( elapsedTime + ( 0xFFFFFFFF - eventInTime ) );
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	3b01      	subs	r3, #1
 800d496:	e002      	b.n	800d49e <RtcComputeElapsedTime+0x36>
    }
    else
    {
        return( elapsedTime - eventInTime );
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	1ad3      	subs	r3, r2, r3
    }
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <BlockLowPowerDuringTask>:

void BlockLowPowerDuringTask ( bool status )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800d4b8:	f000 f832 	bl	800d520 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800d4bc:	4a03      	ldr	r2, [pc, #12]	; (800d4cc <BlockLowPowerDuringTask+0x24>)
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	7013      	strb	r3, [r2, #0]
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20000823 	.word	0x20000823

0800d4d0 <RtcEnterLowPowerStopMode>:

void RtcEnterLowPowerStopMode( void )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0
    if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <RtcEnterLowPowerStopMode+0x44>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f083 0301 	eor.w	r3, r3, #1
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d015      	beq.n	800d50e <RtcEnterLowPowerStopMode+0x3e>
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	; (800d518 <RtcEnterLowPowerStopMode+0x48>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d011      	beq.n	800d50e <RtcEnterLowPowerStopMode+0x3e>
    {
        BoardDeInitMcu( );
 800d4ea:	f7fe f823 	bl	800b534 <BoardDeInitMcu>

        // Disable the Power Voltage Detector
        HAL_PWR_DisablePVD( );
 800d4ee:	f7f5 f929 	bl	8002744 <HAL_PWR_DisablePVD>
//#warning "Commented for debug!"

        SET_BIT( PWR->CR, PWR_CR_CWUF );
 800d4f2:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <RtcEnterLowPowerStopMode+0x4c>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a09      	ldr	r2, [pc, #36]	; (800d51c <RtcEnterLowPowerStopMode+0x4c>)
 800d4f8:	f043 0304 	orr.w	r3, r3, #4
 800d4fc:	6013      	str	r3, [r2, #0]

        // Enable Ultra low power mode
        HAL_PWREx_EnableUltraLowPower( );
 800d4fe:	f7f5 f982 	bl	8002806 <HAL_PWREx_EnableUltraLowPower>

        // Enable the fast wake up from Ultra low power mode
        HAL_PWREx_EnableFastWakeUp( );
 800d502:	f7f5 f965 	bl	80027d0 <HAL_PWREx_EnableFastWakeUp>

        // Enter Stop Mode
//        DebugPrintf("enterLowPOWER\r\n");
        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800d506:	2101      	movs	r1, #1
 800d508:	2001      	movs	r0, #1
 800d50a:	f7f5 f935 	bl	8002778 <HAL_PWR_EnterSTOPMode>
    }
}
 800d50e:	bf00      	nop
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20000823 	.word	0x20000823
 800d518:	20000822 	.word	0x20000822
 800d51c:	40007000 	.word	0x40007000

0800d520 <RtcRecoverMcuStatus>:

void RtcRecoverMcuStatus( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
    // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
    if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET )
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <RtcRecoverMcuStatus+0x44>)
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d106      	bne.n	800d53e <RtcRecoverMcuStatus+0x1e>
    {
        __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 800d530:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <RtcRecoverMcuStatus+0x44>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a0b      	ldr	r2, [pc, #44]	; (800d564 <RtcRecoverMcuStatus+0x44>)
 800d536:	f043 0304 	orr.w	r3, r3, #4
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	e002      	b.n	800d544 <RtcRecoverMcuStatus+0x24>
    }
    else
    {
        NonScheduledWakeUp = true;
 800d53e:	4b0a      	ldr	r3, [pc, #40]	; (800d568 <RtcRecoverMcuStatus+0x48>)
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
    }
    // check the clk source and set to full speed if we are coming from sleep mode
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800d544:	4b09      	ldr	r3, [pc, #36]	; (800d56c <RtcRecoverMcuStatus+0x4c>)
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	f003 030c 	and.w	r3, r3, #12
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d005      	beq.n	800d55c <RtcRecoverMcuStatus+0x3c>
        ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 800d550:	4b06      	ldr	r3, [pc, #24]	; (800d56c <RtcRecoverMcuStatus+0x4c>)
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	f003 030c 	and.w	r3, r3, #12
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <RtcRecoverMcuStatus+0x40>
    {
        BoardInitMcu( );
 800d55c:	f7fd ffaa 	bl	800b4b4 <BoardInitMcu>
    }
}
 800d560:	bf00      	nop
 800d562:	bd80      	pop	{r7, pc}
 800d564:	40007000 	.word	0x40007000
 800d568:	20000821 	.word	0x20000821
 800d56c:	40023800 	.word	0x40023800

0800d570 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800d570:	b590      	push	{r4, r7, lr}
 800d572:	b095      	sub	sp, #84	; 0x54
 800d574:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t stop = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	64bb      	str	r3, [r7, #72]	; 0x48
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800d57e:	4b29      	ldr	r3, [pc, #164]	; (800d624 <RtcComputeWakeUpTime+0xb4>)
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	f083 0301 	eor.w	r3, r3, #1
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d047      	beq.n	800d61c <RtcComputeWakeUpTime+0xac>
    {
        now = RtcGetCalendar( );
 800d58c:	1d3b      	adds	r3, r7, #4
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fbaa 	bl	800dce8 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800d594:	f107 0120 	add.w	r1, r7, #32
 800d598:	2300      	movs	r3, #0
 800d59a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d59e:	4822      	ldr	r0, [pc, #136]	; (800d628 <RtcComputeWakeUpTime+0xb8>)
 800d5a0:	f7f6 fb75 	bl	8003c8e <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800d5a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	233c      	movs	r3, #60	; 0x3c
 800d5ac:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800d5b0:	fb01 f303 	mul.w	r3, r1, r3
 800d5b4:	441a      	add	r2, r3
 800d5b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d5ba:	f897 1020 	ldrb.w	r1, [r7, #32]
 800d5be:	fb01 f303 	mul.w	r3, r1, r3
 800d5c2:	4413      	add	r3, r2
 800d5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	233c      	movs	r3, #60	; 0x3c
 800d5cc:	7b79      	ldrb	r1, [r7, #13]
 800d5ce:	fb01 f303 	mul.w	r3, r1, r3
 800d5d2:	441a      	add	r2, r3
 800d5d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d5d8:	7b39      	ldrb	r1, [r7, #12]
 800d5da:	fb01 f303 	mul.w	r3, r1, r3
 800d5de:	4413      	add	r3, r2
 800d5e0:	64bb      	str	r3, [r7, #72]	; 0x48

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800d5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f2 ff13 	bl	8000414 <__aeabi_ui2d>
 800d5ee:	f04f 0200 	mov.w	r2, #0
 800d5f2:	4b0e      	ldr	r3, [pc, #56]	; (800d62c <RtcComputeWakeUpTime+0xbc>)
 800d5f4:	f7f2 ff88 	bl	8000508 <__aeabi_dmul>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	4621      	mov	r1, r4
 800d600:	f004 fd6e 	bl	80120e0 <ceil>
 800d604:	4603      	mov	r3, r0
 800d606:	460c      	mov	r4, r1
 800d608:	4618      	mov	r0, r3
 800d60a:	4621      	mov	r1, r4
 800d60c:	f7f3 fa3e 	bl	8000a8c <__aeabi_d2uiz>
 800d610:	4602      	mov	r2, r0
 800d612:	4b07      	ldr	r3, [pc, #28]	; (800d630 <RtcComputeWakeUpTime+0xc0>)
 800d614:	601a      	str	r2, [r3, #0]

        WakeUpTimeInitialized = true;
 800d616:	4b03      	ldr	r3, [pc, #12]	; (800d624 <RtcComputeWakeUpTime+0xb4>)
 800d618:	2201      	movs	r2, #1
 800d61a:	701a      	strb	r2, [r3, #0]
    }
}
 800d61c:	bf00      	nop
 800d61e:	3754      	adds	r7, #84	; 0x54
 800d620:	46bd      	mov	sp, r7
 800d622:	bd90      	pop	{r4, r7, pc}
 800d624:	20000845 	.word	0x20000845
 800d628:	20000824 	.word	0x20000824
 800d62c:	3fdf4000 	.word	0x3fdf4000
 800d630:	20000848 	.word	0x20000848

0800d634 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d636:	b0a1      	sub	sp, #132	; 0x84
 800d638:	af06      	add	r7, sp, #24
 800d63a:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800d63c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d640:	4826      	ldr	r0, [pc, #152]	; (800d6dc <RtcStartWakeUpAlarm+0xa8>)
 800d642:	f7f6 fa99 	bl	8003b78 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800d646:	4825      	ldr	r0, [pc, #148]	; (800d6dc <RtcStartWakeUpAlarm+0xa8>)
 800d648:	f7f6 fc8c 	bl	8003f64 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800d64c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d650:	4618      	mov	r0, r3
 800d652:	f000 fb49 	bl	800dce8 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800d656:	4b22      	ldr	r3, [pc, #136]	; (800d6e0 <RtcStartWakeUpAlarm+0xac>)
 800d658:	461d      	mov	r5, r3
 800d65a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d65e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d662:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d666:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800d66a:	f107 0630 	add.w	r6, r7, #48	; 0x30
 800d66e:	466d      	mov	r5, sp
 800d670:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800d674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	602b      	str	r3, [r5, #0]
 800d67c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d680:	cb0c      	ldmia	r3, {r2, r3}
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	4630      	mov	r0, r6
 800d686:	f000 f82f 	bl	800d6e8 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800d68a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d68e:	62fb      	str	r3, [r7, #44]	; 0x2c
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800d690:	2300      	movs	r3, #0
 800d692:	627b      	str	r3, [r7, #36]	; 0x24
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800d694:	2300      	movs	r3, #0
 800d696:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800d698:	2300      	movs	r3, #0
 800d69a:	72fb      	strb	r3, [r7, #11]

    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800d69c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d6a0:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800d6a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d6a6:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800d6a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6ac:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800d6ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d6b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    //SubSeconds must be added manual, this part can't config by CubeMX
	alarmStructure.AlarmTime.SubSeconds = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60fb      	str	r3, [r7, #12]
	alarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
    alarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61bb      	str	r3, [r7, #24]
    alarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	623b      	str	r3, [r7, #32]

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800d6c6:	f107 0308 	add.w	r3, r7, #8
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4803      	ldr	r0, [pc, #12]	; (800d6dc <RtcStartWakeUpAlarm+0xa8>)
 800d6d0:	f7f6 f91a 	bl	8003908 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800d6d4:	bf00      	nop
 800d6d6:	376c      	adds	r7, #108	; 0x6c
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6dc:	20000824 	.word	0x20000824
 800d6e0:	20000e94 	.word	0x20000e94
 800d6e4:	00000000 	.word	0x00000000

0800d6e8 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	b5b0      	push	{r4, r5, r7, lr}
 800d6ec:	b092      	sub	sp, #72	; 0x48
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
 800d6f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d6f8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800d6fc:	f107 040c 	add.w	r4, r7, #12
 800d700:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800d704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d70c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800d710:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800d714:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800d718:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800d71c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800d720:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t days = now.CalendarDate.Date;
 800d728:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d72c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    double timeoutValueTemp = 0.0;
 800d730:	f04f 0300 	mov.w	r3, #0
 800d734:	f04f 0400 	mov.w	r4, #0
 800d738:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    double timeoutValue = 0.0;
 800d73c:	f04f 0300 	mov.w	r3, #0
 800d740:	f04f 0400 	mov.w	r4, #0
 800d744:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double error = 0.0;
 800d748:	f04f 0300 	mov.w	r3, #0
 800d74c:	f04f 0400 	mov.w	r4, #0
 800d750:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800d754:	4ac8      	ldr	r2, [pc, #800]	; (800da78 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d756:	4613      	mov	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	1a9b      	subs	r3, r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7f2 fe58 	bl	8000414 <__aeabi_ui2d>
 800d764:	f04f 0200 	mov.w	r2, #0
 800d768:	4bc4      	ldr	r3, [pc, #784]	; (800da7c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800d76a:	f7f2 fecd 	bl	8000508 <__aeabi_dmul>
 800d76e:	4603      	mov	r3, r0
 800d770:	460c      	mov	r4, r1
 800d772:	4618      	mov	r0, r3
 800d774:	4621      	mov	r1, r4
 800d776:	f7f3 f989 	bl	8000a8c <__aeabi_d2uiz>
 800d77a:	4602      	mov	r2, r0
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	4293      	cmp	r3, r2
 800d780:	bf28      	it	cs
 800d782:	4613      	movcs	r3, r2
 800d784:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800d78c:	2301      	movs	r3, #1
 800d78e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800d790:	6838      	ldr	r0, [r7, #0]
 800d792:	f7f2 fe3f 	bl	8000414 <__aeabi_ui2d>
 800d796:	a3b6      	add	r3, pc, #728	; (adr r3, 800da70 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f7f2 feb4 	bl	8000508 <__aeabi_dmul>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f004 fd9e 	bl	80122e8 <round>
 800d7ac:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800d7b0:	6838      	ldr	r0, [r7, #0]
 800d7b2:	f7f2 fe2f 	bl	8000414 <__aeabi_ui2d>
 800d7b6:	a3ae      	add	r3, pc, #696	; (adr r3, 800da70 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 fea4 	bl	8000508 <__aeabi_dmul>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800d7c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d7cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d7d0:	f7f2 fce2 	bl	8000198 <__aeabi_dsub>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800d7dc:	4ba8      	ldr	r3, [pc, #672]	; (800da80 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7f2 fe27 	bl	8000434 <__aeabi_i2d>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	460d      	mov	r5, r1
 800d7ea:	f04f 0200 	mov.w	r2, #0
 800d7ee:	4ba5      	ldr	r3, [pc, #660]	; (800da84 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 800d7f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d7f4:	f7f2 fe88 	bl	8000508 <__aeabi_dmul>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7f2 fccc 	bl	800019c <__adddf3>
 800d804:	4603      	mov	r3, r0
 800d806:	460c      	mov	r4, r1
 800d808:	4618      	mov	r0, r3
 800d80a:	4621      	mov	r1, r4
 800d80c:	f7f3 f916 	bl	8000a3c <__aeabi_d2iz>
 800d810:	4602      	mov	r2, r0
 800d812:	4b9b      	ldr	r3, [pc, #620]	; (800da80 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d814:	601a      	str	r2, [r3, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800d816:	4b9a      	ldr	r3, [pc, #616]	; (800da80 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800d81e:	db27      	blt.n	800d870 <RtcComputeTimerTimeToAlarmTick+0x188>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800d820:	4b97      	ldr	r3, [pc, #604]	; (800da80 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d828:	461a      	mov	r2, r3
 800d82a:	4b95      	ldr	r3, [pc, #596]	; (800da80 <RtcComputeTimerTimeToAlarmTick+0x398>)
 800d82c:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800d82e:	f04f 0200 	mov.w	r2, #0
 800d832:	4b95      	ldr	r3, [pc, #596]	; (800da88 <RtcComputeTimerTimeToAlarmTick+0x3a0>)
 800d834:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d838:	f7f2 fcb0 	bl	800019c <__adddf3>
 800d83c:	4603      	mov	r3, r0
 800d83e:	460c      	mov	r4, r1
 800d840:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800d844:	e014      	b.n	800d870 <RtcComputeTimerTimeToAlarmTick+0x188>
    {
        timeoutValue -= SecondsInDay;
 800d846:	4b8c      	ldr	r3, [pc, #560]	; (800da78 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f2 fde3 	bl	8000414 <__aeabi_ui2d>
 800d84e:	4603      	mov	r3, r0
 800d850:	460c      	mov	r4, r1
 800d852:	461a      	mov	r2, r3
 800d854:	4623      	mov	r3, r4
 800d856:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d85a:	f7f2 fc9d 	bl	8000198 <__aeabi_dsub>
 800d85e:	4603      	mov	r3, r0
 800d860:	460c      	mov	r4, r1
 800d862:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        days++;
 800d866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d86a:	3301      	adds	r3, #1
 800d86c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( timeoutValue >= SecondsInDay )
 800d870:	4b81      	ldr	r3, [pc, #516]	; (800da78 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d872:	4618      	mov	r0, r3
 800d874:	f7f2 fdce 	bl	8000414 <__aeabi_ui2d>
 800d878:	4603      	mov	r3, r0
 800d87a:	460c      	mov	r4, r1
 800d87c:	461a      	mov	r2, r3
 800d87e:	4623      	mov	r3, r4
 800d880:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d884:	f7f3 f8c6 	bl	8000a14 <__aeabi_dcmpge>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1db      	bne.n	800d846 <RtcComputeTimerTimeToAlarmTick+0x15e>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800d88e:	e015      	b.n	800d8bc <RtcComputeTimerTimeToAlarmTick+0x1d4>
    {
        timeoutValue -= SecondsInHour;
 800d890:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d894:	4618      	mov	r0, r3
 800d896:	f7f2 fdcd 	bl	8000434 <__aeabi_i2d>
 800d89a:	4603      	mov	r3, r0
 800d89c:	460c      	mov	r4, r1
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4623      	mov	r3, r4
 800d8a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8a6:	f7f2 fc77 	bl	8000198 <__aeabi_dsub>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        hours++;
 800d8b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( timeoutValue >= SecondsInHour )
 800d8bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7f2 fdb7 	bl	8000434 <__aeabi_i2d>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8d2:	f7f3 f89f 	bl	8000a14 <__aeabi_dcmpge>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1d9      	bne.n	800d890 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800d8dc:	e014      	b.n	800d908 <RtcComputeTimerTimeToAlarmTick+0x220>
    {
        timeoutValue -= SecondsInMinute;
 800d8de:	233c      	movs	r3, #60	; 0x3c
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7f2 fda7 	bl	8000434 <__aeabi_i2d>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8f2:	f7f2 fc51 	bl	8000198 <__aeabi_dsub>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        minutes++;
 800d8fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d902:	3301      	adds	r3, #1
 800d904:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( timeoutValue >= SecondsInMinute )
 800d908:	233c      	movs	r3, #60	; 0x3c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f2 fd92 	bl	8000434 <__aeabi_i2d>
 800d910:	4603      	mov	r3, r0
 800d912:	460c      	mov	r4, r1
 800d914:	461a      	mov	r2, r3
 800d916:	4623      	mov	r3, r4
 800d918:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d91c:	f7f3 f87a 	bl	8000a14 <__aeabi_dcmpge>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1db      	bne.n	800d8de <RtcComputeTimerTimeToAlarmTick+0x1f6>
    }

    // Calculate seconds
    seconds += timeoutValue;
 800d926:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f2 fd82 	bl	8000434 <__aeabi_i2d>
 800d930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d934:	f7f2 fc32 	bl	800019c <__adddf3>
 800d938:	4603      	mov	r3, r0
 800d93a:	460c      	mov	r4, r1
 800d93c:	4618      	mov	r0, r3
 800d93e:	4621      	mov	r1, r4
 800d940:	f7f3 f8a4 	bl	8000a8c <__aeabi_d2uiz>
 800d944:	4603      	mov	r3, r0
 800d946:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800d94a:	e009      	b.n	800d960 <RtcComputeTimerTimeToAlarmTick+0x278>
    {
        seconds -= 60;
 800d94c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d950:	3b3c      	subs	r3, #60	; 0x3c
 800d952:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        minutes++;
 800d956:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d95a:	3301      	adds	r3, #1
 800d95c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( seconds >= 60 )
 800d960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d964:	2b3b      	cmp	r3, #59	; 0x3b
 800d966:	d8f1      	bhi.n	800d94c <RtcComputeTimerTimeToAlarmTick+0x264>
    }

    while( minutes >= 60 )
 800d968:	e009      	b.n	800d97e <RtcComputeTimerTimeToAlarmTick+0x296>
    {
        minutes -= 60;
 800d96a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d96e:	3b3c      	subs	r3, #60	; 0x3c
 800d970:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        hours++;
 800d974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d978:	3301      	adds	r3, #1
 800d97a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( minutes >= 60 )
 800d97e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d982:	2b3b      	cmp	r3, #59	; 0x3b
 800d984:	d8f1      	bhi.n	800d96a <RtcComputeTimerTimeToAlarmTick+0x282>
    }

    while( hours >= HoursInDay )
 800d986:	e00b      	b.n	800d9a0 <RtcComputeTimerTimeToAlarmTick+0x2b8>
    {
        hours -= HoursInDay;
 800d988:	2318      	movs	r3, #24
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        days++;
 800d996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d99a:	3301      	adds	r3, #1
 800d99c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( hours >= HoursInDay )
 800d9a0:	2318      	movs	r3, #24
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d2ed      	bcs.n	800d988 <RtcComputeTimerTimeToAlarmTick+0x2a0>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800d9ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d009      	beq.n	800d9c8 <RtcComputeTimerTimeToAlarmTick+0x2e0>
 800d9b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4b34      	ldr	r3, [pc, #208]	; (800da8c <RtcComputeTimerTimeToAlarmTick+0x3a4>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f003 0303 	and.w	r3, r3, #3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d118      	bne.n	800d9fa <RtcComputeTimerTimeToAlarmTick+0x312>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d9c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	4a30      	ldr	r2, [pc, #192]	; (800da90 <RtcComputeTimerTimeToAlarmTick+0x3a8>)
 800d9d0:	5cd3      	ldrb	r3, [r2, r3]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d926      	bls.n	800da2a <RtcComputeTimerTimeToAlarmTick+0x342>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800d9dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d9e0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800d9e4:	3a01      	subs	r2, #1
 800d9e6:	492a      	ldr	r1, [pc, #168]	; (800da90 <RtcComputeTimerTimeToAlarmTick+0x3a8>)
 800d9e8:	5c8a      	ldrb	r2, [r1, r2]
 800d9ea:	fb93 f1f2 	sdiv	r1, r3, r2
 800d9ee:	fb02 f201 	mul.w	r2, r2, r1
 800d9f2:	1a9b      	subs	r3, r3, r2
 800d9f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d9f8:	e017      	b.n	800da2a <RtcComputeTimerTimeToAlarmTick+0x342>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800d9fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d9fe:	3b01      	subs	r3, #1
 800da00:	4a24      	ldr	r2, [pc, #144]	; (800da94 <RtcComputeTimerTimeToAlarmTick+0x3ac>)
 800da02:	5cd3      	ldrb	r3, [r2, r3]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d90d      	bls.n	800da2a <RtcComputeTimerTimeToAlarmTick+0x342>
        {
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800da0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da12:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800da16:	3a01      	subs	r2, #1
 800da18:	491e      	ldr	r1, [pc, #120]	; (800da94 <RtcComputeTimerTimeToAlarmTick+0x3ac>)
 800da1a:	5c8a      	ldrb	r2, [r1, r2]
 800da1c:	fb93 f1f2 	sdiv	r1, r3, r2
 800da20:	fb02 f201 	mul.w	r2, r2, r1
 800da24:	1a9b      	subs	r3, r3, r2
 800da26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800da2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800da32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800da36:	b2db      	uxtb	r3, r3
 800da38:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800da3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800da42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da46:	b2db      	uxtb	r3, r3
 800da48:	743b      	strb	r3, [r7, #16]

    return calendar;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	461d      	mov	r5, r3
 800da4e:	f107 040c 	add.w	r4, r7, #12
 800da52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800da5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	3748      	adds	r7, #72	; 0x48
 800da62:	46bd      	mov	sp, r7
 800da64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800da68:	b002      	add	sp, #8
 800da6a:	4770      	bx	lr
 800da6c:	f3af 8000 	nop.w
 800da70:	d2f1a9fc 	.word	0xd2f1a9fc
 800da74:	4000624d 	.word	0x4000624d
 800da78:	00015180 	.word	0x00015180
 800da7c:	3fdf4000 	.word	0x3fdf4000
 800da80:	2000084c 	.word	0x2000084c
 800da84:	408f4000 	.word	0x408f4000
 800da88:	3ff00000 	.word	0x3ff00000
 800da8c:	2000081e 	.word	0x2000081e
 800da90:	080127d8 	.word	0x080127d8
 800da94:	080127cc 	.word	0x080127cc

0800da98 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800da98:	b5b0      	push	{r4, r5, r7, lr}
 800da9a:	b08e      	sub	sp, #56	; 0x38
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	62bb      	str	r3, [r7, #40]	; 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800daa4:	f04f 0300 	mov.w	r3, #0
 800daa8:	f04f 0400 	mov.w	r4, #0
 800daac:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800dab6:	f107 030c 	add.w	r3, r7, #12
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f914 	bl	800dce8 <RtcGetCalendar>
 800dac0:	e009      	b.n	800dad6 <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f107 040c 	add.w	r4, r7, #12
 800dac8:	461d      	mov	r5, r3
 800daca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dacc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800dad6:	2300      	movs	r3, #0
 800dad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dada:	e030      	b.n	800db3e <RtcConvertCalendarTickToTimerTime+0xa6>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800dadc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <RtcConvertCalendarTickToTimerTime+0x58>
 800dae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	b29b      	uxth	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	d110      	bne.n	800db12 <RtcConvertCalendarTickToTimerTime+0x7a>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800daf0:	4b62      	ldr	r3, [pc, #392]	; (800dc7c <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f2 fc8e 	bl	8000414 <__aeabi_ui2d>
 800daf8:	4603      	mov	r3, r0
 800dafa:	460c      	mov	r4, r1
 800dafc:	461a      	mov	r2, r3
 800dafe:	4623      	mov	r3, r4
 800db00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800db04:	f7f2 fb4a 	bl	800019c <__adddf3>
 800db08:	4603      	mov	r3, r0
 800db0a:	460c      	mov	r4, r1
 800db0c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800db10:	e00f      	b.n	800db32 <RtcConvertCalendarTickToTimerTime+0x9a>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800db12:	4b5b      	ldr	r3, [pc, #364]	; (800dc80 <RtcConvertCalendarTickToTimerTime+0x1e8>)
 800db14:	4618      	mov	r0, r3
 800db16:	f7f2 fc7d 	bl	8000414 <__aeabi_ui2d>
 800db1a:	4603      	mov	r3, r0
 800db1c:	460c      	mov	r4, r1
 800db1e:	461a      	mov	r2, r3
 800db20:	4623      	mov	r3, r4
 800db22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800db26:	f7f2 fb39 	bl	800019c <__adddf3>
 800db2a:	4603      	mov	r3, r0
 800db2c:	460c      	mov	r4, r1
 800db2e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800db32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800db36:	b29b      	uxth	r3, r3
 800db38:	3301      	adds	r3, #1
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db3e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800db42:	7c7b      	ldrb	r3, [r7, #17]
 800db44:	4619      	mov	r1, r3
 800db46:	89bb      	ldrh	r3, [r7, #12]
 800db48:	440b      	add	r3, r1
 800db4a:	429a      	cmp	r2, r3
 800db4c:	dbc6      	blt.n	800dadc <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800db4e:	7c7b      	ldrb	r3, [r7, #17]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d007      	beq.n	800db64 <RtcConvertCalendarTickToTimerTime+0xcc>
 800db54:	7c7b      	ldrb	r3, [r7, #17]
 800db56:	461a      	mov	r2, r3
 800db58:	89bb      	ldrh	r3, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d126      	bne.n	800dbb2 <RtcConvertCalendarTickToTimerTime+0x11a>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800db64:	2300      	movs	r3, #0
 800db66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800db6a:	e01b      	b.n	800dba4 <RtcConvertCalendarTickToTimerTime+0x10c>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800db6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800db70:	4a44      	ldr	r2, [pc, #272]	; (800dc84 <RtcConvertCalendarTickToTimerTime+0x1ec>)
 800db72:	5cd3      	ldrb	r3, [r2, r3]
 800db74:	461a      	mov	r2, r3
 800db76:	4b44      	ldr	r3, [pc, #272]	; (800dc88 <RtcConvertCalendarTickToTimerTime+0x1f0>)
 800db78:	fb03 f302 	mul.w	r3, r3, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f2 fc49 	bl	8000414 <__aeabi_ui2d>
 800db82:	4603      	mov	r3, r0
 800db84:	460c      	mov	r4, r1
 800db86:	461a      	mov	r2, r3
 800db88:	4623      	mov	r3, r4
 800db8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800db8e:	f7f2 fb05 	bl	800019c <__adddf3>
 800db92:	4603      	mov	r3, r0
 800db94:	460c      	mov	r4, r1
 800db96:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800db9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800db9e:	3301      	adds	r3, #1
 800dba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800dba4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	429a      	cmp	r2, r3
 800dbae:	dbdd      	blt.n	800db6c <RtcConvertCalendarTickToTimerTime+0xd4>
 800dbb0:	e025      	b.n	800dbfe <RtcConvertCalendarTickToTimerTime+0x166>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800dbb8:	e01b      	b.n	800dbf2 <RtcConvertCalendarTickToTimerTime+0x15a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800dbba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbbe:	4a33      	ldr	r2, [pc, #204]	; (800dc8c <RtcConvertCalendarTickToTimerTime+0x1f4>)
 800dbc0:	5cd3      	ldrb	r3, [r2, r3]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	4b30      	ldr	r3, [pc, #192]	; (800dc88 <RtcConvertCalendarTickToTimerTime+0x1f0>)
 800dbc6:	fb03 f302 	mul.w	r3, r3, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f2 fc22 	bl	8000414 <__aeabi_ui2d>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	4623      	mov	r3, r4
 800dbd8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dbdc:	f7f2 fade 	bl	800019c <__adddf3>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800dbe8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbec:	3301      	adds	r3, #1
 800dbee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800dbf2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	dbdd      	blt.n	800dbba <RtcConvertCalendarTickToTimerTime+0x122>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800dbfe:	7dbb      	ldrb	r3, [r7, #22]
 800dc00:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800dc02:	7d3b      	ldrb	r3, [r7, #20]
 800dc04:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dc08:	fb02 f203 	mul.w	r2, r2, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800dc0c:	7d7b      	ldrb	r3, [r7, #21]
 800dc0e:	203c      	movs	r0, #60	; 0x3c
 800dc10:	fb00 f303 	mul.w	r3, r0, r3
 800dc14:	4413      	add	r3, r2
 800dc16:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800dc18:	7c3b      	ldrb	r3, [r7, #16]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <RtcConvertCalendarTickToTimerTime+0x1f0>)
 800dc1e:	fb03 f301 	mul.w	r3, r3, r1
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800dc22:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f2 fbf5 	bl	8000414 <__aeabi_ui2d>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	461a      	mov	r2, r3
 800dc30:	4623      	mov	r3, r4
 800dc32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dc36:	f7f2 fab1 	bl	800019c <__adddf3>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800dc42:	f04f 0200 	mov.w	r2, #0
 800dc46:	4b12      	ldr	r3, [pc, #72]	; (800dc90 <RtcConvertCalendarTickToTimerTime+0x1f8>)
 800dc48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dc4c:	f7f2 fc5c 	bl	8000508 <__aeabi_dmul>
 800dc50:	4603      	mov	r3, r0
 800dc52:	460c      	mov	r4, r1
 800dc54:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    timeCounter = round( timeCounterTemp );
 800dc58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dc5c:	f004 fb44 	bl	80122e8 <round>
 800dc60:	4603      	mov	r3, r0
 800dc62:	460c      	mov	r4, r1
 800dc64:	4618      	mov	r0, r3
 800dc66:	4621      	mov	r1, r4
 800dc68:	f7f2 ff10 	bl	8000a8c <__aeabi_d2uiz>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	62bb      	str	r3, [r7, #40]	; 0x28
    return ( timeCounter );
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3738      	adds	r7, #56	; 0x38
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bdb0      	pop	{r4, r5, r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	01e28500 	.word	0x01e28500
 800dc80:	01e13380 	.word	0x01e13380
 800dc84:	080127d8 	.word	0x080127d8
 800dc88:	00015180 	.word	0x00015180
 800dc8c:	080127cc 	.word	0x080127cc
 800dc90:	3fdf4000 	.word	0x3fdf4000

0800dc94 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	2b63      	cmp	r3, #99	; 0x63
 800dca2:	d102      	bne.n	800dcaa <RtcCheckCalendarRollOver+0x16>
    {
        CalendarRollOverReady = true;
 800dca4:	4b0e      	ldr	r3, [pc, #56]	; (800dce0 <RtcCheckCalendarRollOver+0x4c>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	701a      	strb	r2, [r3, #0]
    }

    if( ( CalendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800dcaa:	4b0d      	ldr	r3, [pc, #52]	; (800dce0 <RtcCheckCalendarRollOver+0x4c>)
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d010      	beq.n	800dcd4 <RtcCheckCalendarRollOver+0x40>
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <RtcCheckCalendarRollOver+0x50>)
 800dcb6:	8812      	ldrh	r2, [r2, #0]
 800dcb8:	4413      	add	r3, r2
 800dcba:	4a0a      	ldr	r2, [pc, #40]	; (800dce4 <RtcCheckCalendarRollOver+0x50>)
 800dcbc:	8812      	ldrh	r2, [r2, #0]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d108      	bne.n	800dcd4 <RtcCheckCalendarRollOver+0x40>
    {   // Indicate a roll-over of the calendar
        CalendarRollOverReady = false;
 800dcc2:	4b07      	ldr	r3, [pc, #28]	; (800dce0 <RtcCheckCalendarRollOver+0x4c>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800dcc8:	4b06      	ldr	r3, [pc, #24]	; (800dce4 <RtcCheckCalendarRollOver+0x50>)
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	3364      	adds	r3, #100	; 0x64
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <RtcCheckCalendarRollOver+0x50>)
 800dcd2:	801a      	strh	r2, [r3, #0]
    }
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bc80      	pop	{r7}
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20000820 	.word	0x20000820
 800dce4:	2000081e 	.word	0x2000081e

0800dce8 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800dce8:	b5b0      	push	{r4, r5, r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800dcf0:	f107 030c 	add.w	r3, r7, #12
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4810      	ldr	r0, [pc, #64]	; (800dd3c <RtcGetCalendar+0x54>)
 800dcfc:	f7f5 fcbb 	bl	8003676 <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800dd00:	f107 030c 	add.w	r3, r7, #12
 800dd04:	3302      	adds	r3, #2
 800dd06:	2200      	movs	r2, #0
 800dd08:	4619      	mov	r1, r3
 800dd0a:	480c      	ldr	r0, [pc, #48]	; (800dd3c <RtcGetCalendar+0x54>)
 800dd0c:	f7f5 fdae 	bl	800386c <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <RtcGetCalendar+0x58>)
 800dd12:	881b      	ldrh	r3, [r3, #0]
 800dd14:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800dd16:	7c7b      	ldrb	r3, [r7, #17]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff ffbb 	bl	800dc94 <RtcCheckCalendarRollOver>
    return calendar;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	461d      	mov	r5, r3
 800dd22:	f107 040c 	add.w	r4, r7, #12
 800dd26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800dd2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	3728      	adds	r7, #40	; 0x28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bdb0      	pop	{r4, r5, r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	20000824 	.word	0x20000824
 800dd40:	2000081e 	.word	0x2000081e

0800dd44 <RTC_Alarm_IRQHandler>:

/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
void RTC_Alarm_IRQHandler( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800dd48:	4809      	ldr	r0, [pc, #36]	; (800dd70 <RTC_Alarm_IRQHandler+0x2c>)
 800dd4a:	f7f6 f82b 	bl	8003da4 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800dd4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd52:	4807      	ldr	r0, [pc, #28]	; (800dd70 <RTC_Alarm_IRQHandler+0x2c>)
 800dd54:	f7f5 ff10 	bl	8003b78 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800dd58:	f7ff fbe2 	bl	800d520 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800dd5c:	f7ff fc08 	bl	800d570 <RtcComputeWakeUpTime>
    BlockLowPowerDuringTask( false );
 800dd60:	2000      	movs	r0, #0
 800dd62:	f7ff fba1 	bl	800d4a8 <BlockLowPowerDuringTask>
    TimerIrqHandler( );
 800dd66:	f003 f81b 	bl	8010da0 <TimerIrqHandler>
}
 800dd6a:	bf00      	nop
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000824 	.word	0x20000824

0800dd74 <SpiInit>:
    SPI_1 = ( uint32_t )SPI1_BASE,
    SPI_2 = ( uint32_t )SPI2_BASE,
}SPIName;

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af02      	add	r7, sp, #8
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	4611      	mov	r1, r2
 800dd80:	461a      	mov	r2, r3
 800dd82:	4603      	mov	r3, r0
 800dd84:	70fb      	strb	r3, [r7, #3]
 800dd86:	460b      	mov	r3, r1
 800dd88:	70bb      	strb	r3, [r7, #2]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	707b      	strb	r3, [r7, #1]
    BoardDisableIrq( );
 800dd8e:	f7fd fb4f 	bl	800b430 <BoardDisableIrq>

    // Choose SPI interface according to the given pins
    if( mosi == PA_7 )
 800dd92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	d169      	bne.n	800de6e <SpiInit+0xfa>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 800dd9a:	4b72      	ldr	r3, [pc, #456]	; (800df64 <SpiInit+0x1f0>)
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	4a71      	ldr	r2, [pc, #452]	; (800df64 <SpiInit+0x1f0>)
 800dda0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dda4:	6153      	str	r3, [r2, #20]
        __HAL_RCC_SPI1_RELEASE_RESET( );
 800dda6:	4b6f      	ldr	r3, [pc, #444]	; (800df64 <SpiInit+0x1f0>)
 800dda8:	695b      	ldr	r3, [r3, #20]
 800ddaa:	4a6e      	ldr	r2, [pc, #440]	; (800df64 <SpiInit+0x1f0>)
 800ddac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddb0:	6153      	str	r3, [r2, #20]

        __HAL_RCC_SPI1_CLK_ENABLE( );
 800ddb2:	4b6c      	ldr	r3, [pc, #432]	; (800df64 <SpiInit+0x1f0>)
 800ddb4:	6a1b      	ldr	r3, [r3, #32]
 800ddb6:	4a6b      	ldr	r2, [pc, #428]	; (800df64 <SpiInit+0x1f0>)
 800ddb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ddbc:	6213      	str	r3, [r2, #32]
 800ddbe:	4b69      	ldr	r3, [pc, #420]	; (800df64 <SpiInit+0x1f0>)
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	68fb      	ldr	r3, [r7, #12]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI1_BASE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a66      	ldr	r2, [pc, #408]	; (800df68 <SpiInit+0x1f4>)
 800ddce:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800ddd6:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800ddda:	2305      	movs	r3, #5
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	2302      	movs	r3, #2
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	2202      	movs	r2, #2
 800dde6:	f7fe fbf1 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800ddf0:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800ddf4:	2305      	movs	r3, #5
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	9300      	str	r3, [sp, #0]
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	2202      	movs	r2, #2
 800de00:	f7fe fbe4 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800de0a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800de0e:	2305      	movs	r3, #5
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	2302      	movs	r3, #2
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	2300      	movs	r3, #0
 800de18:	2202      	movs	r2, #2
 800de1a:	f7fe fbd7 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800de24:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800de28:	2305      	movs	r3, #5
 800de2a:	9301      	str	r3, [sp, #4]
 800de2c:	2301      	movs	r3, #1
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	2300      	movs	r3, #0
 800de32:	2202      	movs	r2, #2
 800de34:	f7fe fbca 	bl	800c5cc <GpioInit>

        if( nss == NC )
 800de38:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800de3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de40:	d10c      	bne.n	800de5c <SpiInit+0xe8>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de48:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800de4a:	2300      	movs	r3, #0
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	2300      	movs	r3, #0
 800de50:	2200      	movs	r2, #0
 800de52:	2100      	movs	r1, #0
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 f8d1 	bl	800dffc <SpiFormat>
 800de5a:	e075      	b.n	800df48 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800de5c:	2301      	movs	r3, #1
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2300      	movs	r3, #0
 800de62:	2200      	movs	r2, #0
 800de64:	2100      	movs	r1, #0
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f8c8 	bl	800dffc <SpiFormat>
 800de6c:	e06c      	b.n	800df48 <SpiInit+0x1d4>
        }
    }
    else if( mosi == PB_15 )
 800de6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de72:	2b1f      	cmp	r3, #31
 800de74:	d168      	bne.n	800df48 <SpiInit+0x1d4>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 800de76:	4b3b      	ldr	r3, [pc, #236]	; (800df64 <SpiInit+0x1f0>)
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	4a3a      	ldr	r2, [pc, #232]	; (800df64 <SpiInit+0x1f0>)
 800de7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de80:	6193      	str	r3, [r2, #24]
        __HAL_RCC_SPI2_RELEASE_RESET( );
 800de82:	4b38      	ldr	r3, [pc, #224]	; (800df64 <SpiInit+0x1f0>)
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	4a37      	ldr	r2, [pc, #220]	; (800df64 <SpiInit+0x1f0>)
 800de88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de8c:	6193      	str	r3, [r2, #24]

        __HAL_RCC_SPI2_CLK_ENABLE( );
 800de8e:	4b35      	ldr	r3, [pc, #212]	; (800df64 <SpiInit+0x1f0>)
 800de90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de92:	4a34      	ldr	r2, [pc, #208]	; (800df64 <SpiInit+0x1f0>)
 800de94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de98:	6253      	str	r3, [r2, #36]	; 0x24
 800de9a:	4b32      	ldr	r3, [pc, #200]	; (800df64 <SpiInit+0x1f0>)
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dea2:	60bb      	str	r3, [r7, #8]
 800dea4:	68bb      	ldr	r3, [r7, #8]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI2_BASE;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a30      	ldr	r2, [pc, #192]	; (800df6c <SpiInit+0x1f8>)
 800deaa:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800deb2:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800deb6:	2305      	movs	r3, #5
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	2302      	movs	r3, #2
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2300      	movs	r3, #0
 800dec0:	2202      	movs	r2, #2
 800dec2:	f7fe fb83 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800decc:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800ded0:	2305      	movs	r3, #5
 800ded2:	9301      	str	r3, [sp, #4]
 800ded4:	2302      	movs	r3, #2
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	2300      	movs	r3, #0
 800deda:	2202      	movs	r2, #2
 800dedc:	f7fe fb76 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800dee6:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800deea:	2305      	movs	r3, #5
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	2302      	movs	r3, #2
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	2300      	movs	r3, #0
 800def4:	2202      	movs	r2, #2
 800def6:	f7fe fb69 	bl	800c5cc <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800df00:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800df04:	2305      	movs	r3, #5
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	2301      	movs	r3, #1
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	2300      	movs	r3, #0
 800df0e:	2202      	movs	r2, #2
 800df10:	f7fe fb5c 	bl	800c5cc <GpioInit>

        if( nss == NC )
 800df14:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800df18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1c:	d10c      	bne.n	800df38 <SpiInit+0x1c4>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df24:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800df26:	2300      	movs	r3, #0
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	2300      	movs	r3, #0
 800df2c:	2200      	movs	r2, #0
 800df2e:	2100      	movs	r1, #0
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f863 	bl	800dffc <SpiFormat>
 800df36:	e007      	b.n	800df48 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800df38:	2301      	movs	r3, #1
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	2300      	movs	r3, #0
 800df3e:	2200      	movs	r2, #0
 800df40:	2100      	movs	r1, #0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f85a 	bl	800dffc <SpiFormat>
        }
    }
    SpiFrequency( obj, 10000000 );
 800df48:	4909      	ldr	r1, [pc, #36]	; (800df70 <SpiInit+0x1fc>)
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f898 	bl	800e080 <SpiFrequency>

    HAL_SPI_Init( &obj->Spi );
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4618      	mov	r0, r3
 800df54:	f7f6 f865 	bl	8004022 <HAL_SPI_Init>
		//DebugPrintf("abc");

    BoardEnableIrq( );
 800df58:	f7fd fa7a 	bl	800b450 <BoardEnableIrq>
}
 800df5c:	bf00      	nop
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	40023800 	.word	0x40023800
 800df68:	40013000 	.word	0x40013000
 800df6c:	40003800 	.word	0x40003800
 800df70:	00989680 	.word	0x00989680

0800df74 <SpiDeInit>:

void SpiDeInit( Spi_t *obj )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af02      	add	r7, sp, #8
 800df7a:	6078      	str	r0, [r7, #4]
    HAL_SPI_DeInit( &obj->Spi );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f6 f8b3 	bl	80040ea <HAL_SPI_DeInit>

    GpioInit( &obj->Mosi, obj->Mosi.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f993 1058 	ldrsb.w	r1, [r3, #88]	; 0x58
 800df90:	2300      	movs	r3, #0
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	2300      	movs	r3, #0
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	2300      	movs	r3, #0
 800df9a:	2201      	movs	r2, #1
 800df9c:	f7fe fb16 	bl	800c5cc <GpioInit>
    GpioInit( &obj->Miso, obj->Miso.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_DOWN, 0 );
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f993 1064 	ldrsb.w	r1, [r3, #100]	; 0x64
 800dfac:	2300      	movs	r3, #0
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f7fe fb08 	bl	800c5cc <GpioInit>
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f993 1070 	ldrsb.w	r1, [r3, #112]	; 0x70
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9301      	str	r3, [sp, #4]
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f7fe fafa 	bl	800c5cc <GpioInit>
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f993 107c 	ldrsb.w	r1, [r3, #124]	; 0x7c
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	9301      	str	r3, [sp, #4]
 800dfe8:	2301      	movs	r3, #1
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	2300      	movs	r3, #0
 800dfee:	2201      	movs	r2, #1
 800dff0:	f7fe faec 	bl	800c5cc <GpioInit>
}
 800dff4:	bf00      	nop
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <SpiFormat>:

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	4608      	mov	r0, r1
 800e006:	4611      	mov	r1, r2
 800e008:	461a      	mov	r2, r3
 800e00a:	4603      	mov	r3, r0
 800e00c:	70fb      	strb	r3, [r7, #3]
 800e00e:	460b      	mov	r3, r1
 800e010:	70bb      	strb	r3, [r7, #2]
 800e012:	4613      	mov	r3, r2
 800e014:	707b      	strb	r3, [r7, #1]
    obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	609a      	str	r2, [r3, #8]
    if( bits == SPI_DATASIZE_8BIT )
 800e01c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d103      	bne.n	800e02c <SpiFormat+0x30>
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	60da      	str	r2, [r3, #12]
 800e02a:	e003      	b.n	800e034 <SpiFormat+0x38>
    }
    else
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e032:	60da      	str	r2, [r3, #12]
    }
    obj->Spi.Init.CLKPolarity = cpol;
 800e034:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	611a      	str	r2, [r3, #16]
    obj->Spi.Init.CLKPhase = cpha;
 800e03c:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	615a      	str	r2, [r3, #20]
    obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	621a      	str	r2, [r3, #32]
    obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	625a      	str	r2, [r3, #36]	; 0x24
    obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	629a      	str	r2, [r3, #40]	; 0x28
    obj->Spi.Init.CRCPolynomial = 7;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2207      	movs	r2, #7
 800e05a:	62da      	str	r2, [r3, #44]	; 0x2c

    if( slave == 0 )
 800e05c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <SpiFormat+0x72>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e06a:	605a      	str	r2, [r3, #4]
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
    }
}
 800e06c:	e002      	b.n	800e074 <SpiFormat+0x78>
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	605a      	str	r2, [r3, #4]
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	bc80      	pop	{r7}
 800e07c:	4770      	bx	lr
	...

0800e080 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 800e080:	b480      	push	{r7}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 800e08e:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <SpiFrequency+0x7c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 800e094:	e008      	b.n	800e0a8 <SpiFrequency+0x28>
    {
        divisor++;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	3301      	adds	r3, #1
 800e09a:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	085b      	lsrs	r3, r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	2b06      	cmp	r3, #6
 800e0a6:	d804      	bhi.n	800e0b2 <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d8f2      	bhi.n	800e096 <SpiFrequency+0x16>
 800e0b0:	e000      	b.n	800e0b4 <SpiFrequency+0x34>
        {
            break;
 800e0b2:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f003 0304 	and.w	r3, r3, #4
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <SpiFrequency+0x42>
 800e0be:	2200      	movs	r2, #0
 800e0c0:	e000      	b.n	800e0c4 <SpiFrequency+0x44>
 800e0c2:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <SpiFrequency+0x52>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e000      	b.n	800e0d4 <SpiFrequency+0x54>
 800e0d2:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800e0d4:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	f002 0201 	and.w	r2, r2, #1
 800e0dc:	2a00      	cmp	r2, #0
 800e0de:	d101      	bne.n	800e0e4 <SpiFrequency+0x64>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	e000      	b.n	800e0e6 <SpiFrequency+0x66>
 800e0e4:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	60fb      	str	r3, [r7, #12]

    obj->Spi.Init.BaudRatePrescaler = baudRate;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	61da      	str	r2, [r3, #28]
}
 800e0f0:	bf00      	nop
 800e0f2:	371c      	adds	r7, #28
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bc80      	pop	{r7}
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	2000012c 	.word	0x2000012c

0800e100 <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( obj->Spi.Instance ) == NULL )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &obj->Spi );
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e122:	601a      	str	r2, [r3, #0]

    BoardDisableIrq( );
 800e124:	f7fd f984 	bl	800b430 <BoardDisableIrq>

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_TXE ) == RESET );
 800e128:	bf00      	nop
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	2b02      	cmp	r3, #2
 800e136:	d1f8      	bne.n	800e12a <SpiInOut+0x2a>
    obj->Spi.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 800e138:	887a      	ldrh	r2, [r7, #2]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	b2d2      	uxtb	r2, r2
 800e140:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_RXNE ) == RESET );
 800e142:	bf00      	nop
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d1f8      	bne.n	800e144 <SpiInOut+0x44>
    rxData = ( uint16_t ) obj->Spi.Instance->DR;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	73fb      	strb	r3, [r7, #15]

    BoardEnableIrq( );
 800e15a:	f7fd f979 	bl	800b450 <BoardEnableIrq>

    return( rxData );
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	b29b      	uxth	r3, r3
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800e172:	4b14      	ldr	r3, [pc, #80]	; (800e1c4 <HAL_MspInit+0x58>)
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	4a13      	ldr	r2, [pc, #76]	; (800e1c4 <HAL_MspInit+0x58>)
 800e178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e17c:	6253      	str	r3, [r2, #36]	; 0x24
 800e17e:	4b11      	ldr	r3, [pc, #68]	; (800e1c4 <HAL_MspInit+0x58>)
 800e180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e18a:	4b0e      	ldr	r3, [pc, #56]	; (800e1c4 <HAL_MspInit+0x58>)
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	4a0d      	ldr	r2, [pc, #52]	; (800e1c4 <HAL_MspInit+0x58>)
 800e190:	f043 0301 	orr.w	r3, r3, #1
 800e194:	6213      	str	r3, [r2, #32]
 800e196:	4b0b      	ldr	r3, [pc, #44]	; (800e1c4 <HAL_MspInit+0x58>)
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	60bb      	str	r3, [r7, #8]
 800e1a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1a2:	4b08      	ldr	r3, [pc, #32]	; (800e1c4 <HAL_MspInit+0x58>)
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	4a07      	ldr	r2, [pc, #28]	; (800e1c4 <HAL_MspInit+0x58>)
 800e1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1ac:	6253      	str	r3, [r2, #36]	; 0x24
 800e1ae:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <HAL_MspInit+0x58>)
 800e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1b6:	607b      	str	r3, [r7, #4]
 800e1b8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bc80      	pop	{r7}
 800e1c2:	4770      	bx	lr
 800e1c4:	40023800 	.word	0x40023800

0800e1c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1d0:	f107 0314 	add.w	r3, r7, #20
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	605a      	str	r2, [r3, #4]
 800e1da:	609a      	str	r2, [r3, #8]
 800e1dc:	60da      	str	r2, [r3, #12]
 800e1de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a15      	ldr	r2, [pc, #84]	; (800e23c <HAL_ADC_MspInit+0x74>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d123      	bne.n	800e232 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e1ea:	4b15      	ldr	r3, [pc, #84]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	4a14      	ldr	r2, [pc, #80]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e1f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1f4:	6213      	str	r3, [r2, #32]
 800e1f6:	4b12      	ldr	r3, [pc, #72]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1fe:	613b      	str	r3, [r7, #16]
 800e200:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e202:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	4a0e      	ldr	r2, [pc, #56]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e208:	f043 0301 	orr.w	r3, r3, #1
 800e20c:	61d3      	str	r3, [r2, #28]
 800e20e:	4b0c      	ldr	r3, [pc, #48]	; (800e240 <HAL_ADC_MspInit+0x78>)
 800e210:	69db      	ldr	r3, [r3, #28]
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	60fb      	str	r3, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA2     ------> ADC_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e21a:	2304      	movs	r3, #4
 800e21c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e21e:	2303      	movs	r3, #3
 800e220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e222:	2300      	movs	r3, #0
 800e224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e226:	f107 0314 	add.w	r3, r7, #20
 800e22a:	4619      	mov	r1, r3
 800e22c:	4805      	ldr	r0, [pc, #20]	; (800e244 <HAL_ADC_MspInit+0x7c>)
 800e22e:	f7f3 fac7 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e232:	bf00      	nop
 800e234:	3728      	adds	r7, #40	; 0x28
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	40012400 	.word	0x40012400
 800e240:	40023800 	.word	0x40023800
 800e244:	40020000 	.word	0x40020000

0800e248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a05      	ldr	r2, [pc, #20]	; (800e26c <HAL_RTC_MspInit+0x24>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d102      	bne.n	800e260 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e25a:	4b05      	ldr	r3, [pc, #20]	; (800e270 <HAL_RTC_MspInit+0x28>)
 800e25c:	2201      	movs	r2, #1
 800e25e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	bc80      	pop	{r7}
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	40002800 	.word	0x40002800
 800e270:	424706d8 	.word	0x424706d8

0800e274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08a      	sub	sp, #40	; 0x28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e27c:	f107 0314 	add.w	r3, r7, #20
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]
 800e284:	605a      	str	r2, [r3, #4]
 800e286:	609a      	str	r2, [r3, #8]
 800e288:	60da      	str	r2, [r3, #12]
 800e28a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a17      	ldr	r2, [pc, #92]	; (800e2f0 <HAL_SPI_MspInit+0x7c>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d127      	bne.n	800e2e6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e296:	4b17      	ldr	r3, [pc, #92]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	4a16      	ldr	r2, [pc, #88]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e29c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e2a0:	6213      	str	r3, [r2, #32]
 800e2a2:	4b14      	ldr	r3, [pc, #80]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2ae:	4b11      	ldr	r3, [pc, #68]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	4a10      	ldr	r2, [pc, #64]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e2b4:	f043 0301 	orr.w	r3, r3, #1
 800e2b8:	61d3      	str	r3, [r2, #28]
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	; (800e2f4 <HAL_SPI_MspInit+0x80>)
 800e2bc:	69db      	ldr	r3, [r3, #28]
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e2c6:	23e0      	movs	r3, #224	; 0xe0
 800e2c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e2d6:	2305      	movs	r3, #5
 800e2d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2da:	f107 0314 	add.w	r3, r7, #20
 800e2de:	4619      	mov	r1, r3
 800e2e0:	4805      	ldr	r0, [pc, #20]	; (800e2f8 <HAL_SPI_MspInit+0x84>)
 800e2e2:	f7f3 fa6d 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e2e6:	bf00      	nop
 800e2e8:	3728      	adds	r7, #40	; 0x28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	40013000 	.word	0x40013000
 800e2f4:	40023800 	.word	0x40023800
 800e2f8:	40020000 	.word	0x40020000

0800e2fc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a08      	ldr	r2, [pc, #32]	; (800e32c <HAL_SPI_MspDeInit+0x30>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d109      	bne.n	800e322 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800e30e:	4b08      	ldr	r3, [pc, #32]	; (800e330 <HAL_SPI_MspDeInit+0x34>)
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	4a07      	ldr	r2, [pc, #28]	; (800e330 <HAL_SPI_MspDeInit+0x34>)
 800e314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e318:	6213      	str	r3, [r2, #32]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800e31a:	21e0      	movs	r1, #224	; 0xe0
 800e31c:	4805      	ldr	r0, [pc, #20]	; (800e334 <HAL_SPI_MspDeInit+0x38>)
 800e31e:	f7f3 fbcd 	bl	8001abc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800e322:	bf00      	nop
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	40013000 	.word	0x40013000
 800e330:	40023800 	.word	0x40023800
 800e334:	40020000 	.word	0x40020000

0800e338 <SystemClock_Config>:
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* External functions --------------------------------------------------------*/
void SystemClock_Config(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b094      	sub	sp, #80	; 0x50
 800e33c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e33e:	f107 031c 	add.w	r3, r7, #28
 800e342:	2234      	movs	r2, #52	; 0x34
 800e344:	2100      	movs	r1, #0
 800e346:	4618      	mov	r0, r3
 800e348:	f003 fa8e 	bl	8011868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e34c:	f107 0308 	add.w	r3, r7, #8
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	605a      	str	r2, [r3, #4]
 800e356:	609a      	str	r2, [r3, #8]
 800e358:	60da      	str	r2, [r3, #12]
 800e35a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e35c:	463b      	mov	r3, r7
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e364:	4b26      	ldr	r3, [pc, #152]	; (800e400 <SystemClock_Config+0xc8>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800e36c:	4a24      	ldr	r2, [pc, #144]	; (800e400 <SystemClock_Config+0xc8>)
 800e36e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e372:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800e374:	2307      	movs	r3, #7
 800e376:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e378:	2301      	movs	r3, #1
 800e37a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800e37c:	2301      	movs	r3, #1
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e380:	2301      	movs	r3, #1
 800e382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e384:	2310      	movs	r3, #16
 800e386:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e388:	2302      	movs	r3, #2
 800e38a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e38c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800e392:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800e398:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e39c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e39e:	f107 031c 	add.w	r3, r7, #28
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f4 fa4a 	bl	800283c <HAL_RCC_OscConfig>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800e3ae:	f7fe ff8b 	bl	800d2c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e3b2:	230f      	movs	r3, #15
 800e3b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f4 fd65 	bl	8002e9c <HAL_RCC_ClockConfig>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800e3d8:	f7fe ff76 	bl	800d2c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800e3e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e3e4:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e3e6:	463b      	mov	r3, r7
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7f4 ff4d 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800e3f4:	f7fe ff68 	bl	800d2c8 <Error_Handler>
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	3750      	adds	r7, #80	; 0x50
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	40007000 	.word	0x40007000

0800e404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e404:	b480      	push	{r7}
 800e406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e408:	bf00      	nop
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bc80      	pop	{r7}
 800e40e:	4770      	bx	lr

0800e410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e410:	b480      	push	{r7}
 800e412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e414:	e7fe      	b.n	800e414 <HardFault_Handler+0x4>

0800e416 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e416:	b480      	push	{r7}
 800e418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e41a:	e7fe      	b.n	800e41a <MemManage_Handler+0x4>

0800e41c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e420:	e7fe      	b.n	800e420 <BusFault_Handler+0x4>

0800e422 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e422:	b480      	push	{r7}
 800e424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e426:	e7fe      	b.n	800e426 <UsageFault_Handler+0x4>

0800e428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e428:	b480      	push	{r7}
 800e42a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800e42c:	bf00      	nop
 800e42e:	46bd      	mov	sp, r7
 800e430:	bc80      	pop	{r7}
 800e432:	4770      	bx	lr

0800e434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e438:	bf00      	nop
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bc80      	pop	{r7}
 800e43e:	4770      	bx	lr

0800e440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e440:	b480      	push	{r7}
 800e442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e444:	bf00      	nop
 800e446:	46bd      	mov	sp, r7
 800e448:	bc80      	pop	{r7}
 800e44a:	4770      	bx	lr

0800e44c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e450:	4802      	ldr	r0, [pc, #8]	; (800e45c <USB_LP_IRQHandler+0x10>)
 800e452:	f7f3 fc43 	bl	8001cdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800e456:	bf00      	nop
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	20001308 	.word	0x20001308

0800e460 <USB_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB FS wake-up interrupt through EXTI line 18.
  */
void USB_FS_WKUP_IRQHandler(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_WKUP_IRQn 0 */

  /* USER CODE END USB_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_FS)->Init.low_power_enable) {
 800e464:	4b08      	ldr	r3, [pc, #32]	; (800e488 <USB_FS_WKUP_IRQHandler+0x28>)
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <USB_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e46c:	4b07      	ldr	r3, [pc, #28]	; (800e48c <USB_FS_WKUP_IRQHandler+0x2c>)
 800e46e:	691b      	ldr	r3, [r3, #16]
 800e470:	4a06      	ldr	r2, [pc, #24]	; (800e48c <USB_FS_WKUP_IRQHandler+0x2c>)
 800e472:	f023 0306 	bic.w	r3, r3, #6
 800e476:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 800e478:	f7ff ff5e 	bl	800e338 <SystemClock_Config>
  }
  /* Clear EXTI pending bit */
  __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 800e47c:	4b04      	ldr	r3, [pc, #16]	; (800e490 <USB_FS_WKUP_IRQHandler+0x30>)
 800e47e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e482:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN USB_FS_WKUP_IRQn 1 */

  /* USER CODE END USB_FS_WKUP_IRQn 1 */
}
 800e484:	bf00      	nop
 800e486:	bd80      	pop	{r7, pc}
 800e488:	20001308 	.word	0x20001308
 800e48c:	e000ed00 	.word	0xe000ed00
 800e490:	40010400 	.word	0x40010400

0800e494 <SX1276IoInit>:
  SX1276SetMaxPayloadLength,
  SX1276SetPublicNetwork
};

void SX1276IoInit( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af02      	add	r7, sp, #8
//	GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
//	GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
  
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800e49a:	2301      	movs	r3, #1
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	2104      	movs	r1, #4
 800e4a8:	480c      	ldr	r0, [pc, #48]	; (800e4dc <SX1276IoInit+0x48>)
 800e4aa:	f7fe f88f 	bl	800c5cc <GpioInit>

	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	211b      	movs	r1, #27
 800e4bc:	4808      	ldr	r0, [pc, #32]	; (800e4e0 <SX1276IoInit+0x4c>)
 800e4be:	f7fe f885 	bl	800c5cc <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	211a      	movs	r1, #26
 800e4d0:	4804      	ldr	r0, [pc, #16]	; (800e4e4 <SX1276IoInit+0x50>)
 800e4d2:	f7fe f87b 	bl	800c5cc <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800e4d6:	bf00      	nop
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	20000fa8 	.word	0x20000fa8
 800e4e0:	20000ee4 	.word	0x20000ee4
 800e4e4:	20000ef0 	.word	0x20000ef0

0800e4e8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
	GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4807      	ldr	r0, [pc, #28]	; (800e518 <SX1276IoIrqInit+0x30>)
 800e4fa:	f7fe f88b 	bl	800c614 <GpioSetInterrupt>
	GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	3304      	adds	r3, #4
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2203      	movs	r2, #3
 800e506:	2101      	movs	r1, #1
 800e508:	4804      	ldr	r0, [pc, #16]	; (800e51c <SX1276IoIrqInit+0x34>)
 800e50a:	f7fe f883 	bl	800c614 <GpioSetInterrupt>
//	GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
//	GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
//	GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
//	GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
}
 800e50e:	bf00      	nop
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	20000ee4 	.word	0x20000ee4
 800e51c:	20000ef0 	.word	0x20000ef0

0800e520 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af02      	add	r7, sp, #8
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800e526:	2301      	movs	r3, #1
 800e528:	9301      	str	r3, [sp, #4]
 800e52a:	2300      	movs	r3, #0
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	2300      	movs	r3, #0
 800e530:	2201      	movs	r2, #1
 800e532:	2104      	movs	r1, #4
 800e534:	480c      	ldr	r0, [pc, #48]	; (800e568 <SX1276IoDeInit+0x48>)
 800e536:	f7fe f849 	bl	800c5cc <GpioInit>
	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800e53a:	2300      	movs	r3, #0
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	2300      	movs	r3, #0
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	2300      	movs	r3, #0
 800e544:	2200      	movs	r2, #0
 800e546:	211b      	movs	r1, #27
 800e548:	4808      	ldr	r0, [pc, #32]	; (800e56c <SX1276IoDeInit+0x4c>)
 800e54a:	f7fe f83f 	bl	800c5cc <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800e54e:	2300      	movs	r3, #0
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	2300      	movs	r3, #0
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	2300      	movs	r3, #0
 800e558:	2200      	movs	r2, #0
 800e55a:	211a      	movs	r1, #26
 800e55c:	4804      	ldr	r0, [pc, #16]	; (800e570 <SX1276IoDeInit+0x50>)
 800e55e:	f7fe f835 	bl	800c5cc <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 800e562:	bf00      	nop
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	20000fa8 	.word	0x20000fa8
 800e56c:	20000ee4 	.word	0x20000ee4
 800e570:	20000ef0 	.word	0x20000ef0

0800e574 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800e574:	b590      	push	{r4, r7, lr}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
  uint8_t paConfig = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	73fb      	strb	r3, [r7, #15]
  uint8_t paDac = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	73bb      	strb	r3, [r7, #14]
  
  paConfig = SX1276Read( REG_PACONFIG );
 800e586:	2009      	movs	r0, #9
 800e588:	f001 fcca 	bl	800ff20 <SX1276Read>
 800e58c:	4603      	mov	r3, r0
 800e58e:	73fb      	strb	r3, [r7, #15]
  paDac = SX1276Read( REG_PADAC );
 800e590:	204d      	movs	r0, #77	; 0x4d
 800e592:	f001 fcc5 	bl	800ff20 <SX1276Read>
 800e596:	4603      	mov	r3, r0
 800e598:	73bb      	strb	r3, [r7, #14]
  
  paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800e59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5a2:	b25c      	sxtb	r4, r3
 800e5a4:	4b45      	ldr	r3, [pc, #276]	; (800e6bc <SX1276SetRfTxPower+0x148>)
 800e5a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 f888 	bl	800e6c0 <SX1276GetPaSelect>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b25b      	sxtb	r3, r3
 800e5b4:	4323      	orrs	r3, r4
 800e5b6:	b25b      	sxtb	r3, r3
 800e5b8:	73fb      	strb	r3, [r7, #15]
  paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
 800e5bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e5c0:	73fb      	strb	r3, [r7, #15]
  
  if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800e5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	da4e      	bge.n	800e668 <SX1276SetRfTxPower+0xf4>
  {
    if( power > 17 )
 800e5ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5ce:	2b11      	cmp	r3, #17
 800e5d0:	dd04      	ble.n	800e5dc <SX1276SetRfTxPower+0x68>
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800e5d2:	7bbb      	ldrb	r3, [r7, #14]
 800e5d4:	f043 0307 	orr.w	r3, r3, #7
 800e5d8:	73bb      	strb	r3, [r7, #14]
 800e5da:	e008      	b.n	800e5ee <SX1276SetRfTxPower+0x7a>
    }
    else
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800e5dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5e0:	f023 0307 	bic.w	r3, r3, #7
 800e5e4:	b25b      	sxtb	r3, r3
 800e5e6:	f043 0304 	orr.w	r3, r3, #4
 800e5ea:	b25b      	sxtb	r3, r3
 800e5ec:	73bb      	strb	r3, [r7, #14]
    }
    if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800e5ee:	7bbb      	ldrb	r3, [r7, #14]
 800e5f0:	f003 0307 	and.w	r3, r3, #7
 800e5f4:	2b07      	cmp	r3, #7
 800e5f6:	d11b      	bne.n	800e630 <SX1276SetRfTxPower+0xbc>
    {
      if( power < 5 )
 800e5f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5fc:	2b04      	cmp	r3, #4
 800e5fe:	dc01      	bgt.n	800e604 <SX1276SetRfTxPower+0x90>
      {
        power = 5;
 800e600:	2305      	movs	r3, #5
 800e602:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 20 )
 800e604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e608:	2b14      	cmp	r3, #20
 800e60a:	dd01      	ble.n	800e610 <SX1276SetRfTxPower+0x9c>
      {
        power = 20;
 800e60c:	2314      	movs	r3, #20
 800e60e:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800e610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e614:	f023 030f 	bic.w	r3, r3, #15
 800e618:	b25a      	sxtb	r2, r3
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	3b05      	subs	r3, #5
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	b25b      	sxtb	r3, r3
 800e622:	f003 030f 	and.w	r3, r3, #15
 800e626:	b25b      	sxtb	r3, r3
 800e628:	4313      	orrs	r3, r2
 800e62a:	b25b      	sxtb	r3, r3
 800e62c:	73fb      	strb	r3, [r7, #15]
 800e62e:	e037      	b.n	800e6a0 <SX1276SetRfTxPower+0x12c>
    }
    else
    {
      if( power < 2 )
 800e630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e634:	2b01      	cmp	r3, #1
 800e636:	dc01      	bgt.n	800e63c <SX1276SetRfTxPower+0xc8>
      {
        power = 2;
 800e638:	2302      	movs	r3, #2
 800e63a:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 17 )
 800e63c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e640:	2b11      	cmp	r3, #17
 800e642:	dd01      	ble.n	800e648 <SX1276SetRfTxPower+0xd4>
      {
        power = 17;
 800e644:	2311      	movs	r3, #17
 800e646:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800e648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e64c:	f023 030f 	bic.w	r3, r3, #15
 800e650:	b25a      	sxtb	r2, r3
 800e652:	79fb      	ldrb	r3, [r7, #7]
 800e654:	3b02      	subs	r3, #2
 800e656:	b2db      	uxtb	r3, r3
 800e658:	b25b      	sxtb	r3, r3
 800e65a:	f003 030f 	and.w	r3, r3, #15
 800e65e:	b25b      	sxtb	r3, r3
 800e660:	4313      	orrs	r3, r2
 800e662:	b25b      	sxtb	r3, r3
 800e664:	73fb      	strb	r3, [r7, #15]
 800e666:	e01b      	b.n	800e6a0 <SX1276SetRfTxPower+0x12c>
    }
  }
  else
  {
    if( power < -1 )
 800e668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e670:	da01      	bge.n	800e676 <SX1276SetRfTxPower+0x102>
    {
      power = -1;
 800e672:	23ff      	movs	r3, #255	; 0xff
 800e674:	71fb      	strb	r3, [r7, #7]
    }
    if( power > 14 )
 800e676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e67a:	2b0e      	cmp	r3, #14
 800e67c:	dd01      	ble.n	800e682 <SX1276SetRfTxPower+0x10e>
    {
      power = 14;
 800e67e:	230e      	movs	r3, #14
 800e680:	71fb      	strb	r3, [r7, #7]
    }
    paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800e682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e686:	f023 030f 	bic.w	r3, r3, #15
 800e68a:	b25a      	sxtb	r2, r3
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	3301      	adds	r3, #1
 800e690:	b2db      	uxtb	r3, r3
 800e692:	b25b      	sxtb	r3, r3
 800e694:	f003 030f 	and.w	r3, r3, #15
 800e698:	b25b      	sxtb	r3, r3
 800e69a:	4313      	orrs	r3, r2
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	73fb      	strb	r3, [r7, #15]
  }
  SX1276Write( REG_PACONFIG, paConfig );
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	2009      	movs	r0, #9
 800e6a6:	f001 fc29 	bl	800fefc <SX1276Write>
  SX1276Write( REG_PADAC, paDac );
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	204d      	movs	r0, #77	; 0x4d
 800e6b0:	f001 fc24 	bl	800fefc <SX1276Write>
}
 800e6b4:	bf00      	nop
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd90      	pop	{r4, r7, pc}
 800e6bc:	20000ed8 	.word	0x20000ed8

0800e6c0 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]

    return RF_PACONFIG_PASELECT_PABOOST;
 800e6c8:	2380      	movs	r3, #128	; 0x80

}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bc80      	pop	{r7}
 800e6d2:	4770      	bx	lr

0800e6d4 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	4603      	mov	r3, r0
 800e6dc:	71fb      	strb	r3, [r7, #7]
  if( RadioIsActive != status )
 800e6de:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <SX1276SetAntSwLowPower+0x38>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	79fa      	ldrb	r2, [r7, #7]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d00d      	beq.n	800e704 <SX1276SetAntSwLowPower+0x30>
  {
    RadioIsActive = status;
 800e6e8:	4a08      	ldr	r2, [pc, #32]	; (800e70c <SX1276SetAntSwLowPower+0x38>)
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	7013      	strb	r3, [r2, #0]
    
    if( status == false )
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	f083 0301 	eor.w	r3, r3, #1
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d002      	beq.n	800e700 <SX1276SetAntSwLowPower+0x2c>
    {
      SX1276AntSwInit( );
 800e6fa:	f000 f809 	bl	800e710 <SX1276AntSwInit>
    else
    {
      SX1276AntSwDeInit( );
    }
  }
}
 800e6fe:	e001      	b.n	800e704 <SX1276SetAntSwLowPower+0x30>
      SX1276AntSwDeInit( );
 800e700:	f000 f80c 	bl	800e71c <SX1276AntSwDeInit>
}
 800e704:	bf00      	nop
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20000850 	.word	0x20000850

0800e710 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800e710:	b480      	push	{r7}
 800e712:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800e714:	bf00      	nop
 800e716:	46bd      	mov	sp, r7
 800e718:	bc80      	pop	{r7}
 800e71a:	4770      	bx	lr

0800e71c <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); 
}
 800e720:	bf00      	nop
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr

0800e728 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	71fb      	strb	r3, [r7, #7]
  switch( opMode )
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d000      	beq.n	800e73a <SX1276SetAntSw+0x12>
  case RFLR_OPMODE_RECEIVER_SINGLE:
  case RFLR_OPMODE_CAD:
  default:
//    GpioWrite( &rftrx1, 0 );
//    GpioWrite( &rftrx2, 1 );
    break;
 800e738:	e000      	b.n	800e73c <SX1276SetAntSw+0x14>
    break;
 800e73a:	bf00      	nop
  }
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	bc80      	pop	{r7}
 800e744:	4770      	bx	lr

0800e746 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800e746:	b480      	push	{r7}
 800e748:	b083      	sub	sp, #12
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 800e74e:	2301      	movs	r3, #1
}
 800e750:	4618      	mov	r0, r3
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	bc80      	pop	{r7}
 800e758:	4770      	bx	lr
	...

0800e75c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800e764:	4a24      	ldr	r2, [pc, #144]	; (800e7f8 <SX1276Init+0x9c>)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800e76a:	4924      	ldr	r1, [pc, #144]	; (800e7fc <SX1276Init+0xa0>)
 800e76c:	4824      	ldr	r0, [pc, #144]	; (800e800 <SX1276Init+0xa4>)
 800e76e:	f002 fa0d 	bl	8010b8c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800e772:	4922      	ldr	r1, [pc, #136]	; (800e7fc <SX1276Init+0xa0>)
 800e774:	4823      	ldr	r0, [pc, #140]	; (800e804 <SX1276Init+0xa8>)
 800e776:	f002 fa09 	bl	8010b8c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800e77a:	4920      	ldr	r1, [pc, #128]	; (800e7fc <SX1276Init+0xa0>)
 800e77c:	4822      	ldr	r0, [pc, #136]	; (800e808 <SX1276Init+0xac>)
 800e77e:	f002 fa05 	bl	8010b8c <TimerInit>

    SX1276Reset( );
 800e782:	f001 fb19 	bl	800fdb8 <SX1276Reset>

    RxChainCalibration( );
 800e786:	f000 f8e3 	bl	800e950 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e78a:	2000      	movs	r0, #0
 800e78c:	f001 fb36 	bl	800fdfc <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800e790:	481e      	ldr	r0, [pc, #120]	; (800e80c <SX1276Init+0xb0>)
 800e792:	f7ff fea9 	bl	800e4e8 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]
 800e79a:	e01f      	b.n	800e7dc <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800e79c:	7bfa      	ldrb	r2, [r7, #15]
 800e79e:	491c      	ldr	r1, [pc, #112]	; (800e810 <SX1276Init+0xb4>)
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	440b      	add	r3, r1
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f001 fb4e 	bl	800fe4c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e7b0:	7bfa      	ldrb	r2, [r7, #15]
 800e7b2:	4917      	ldr	r1, [pc, #92]	; (800e810 <SX1276Init+0xb4>)
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	440b      	add	r3, r1
 800e7bc:	3301      	adds	r3, #1
 800e7be:	7818      	ldrb	r0, [r3, #0]
 800e7c0:	7bfa      	ldrb	r2, [r7, #15]
 800e7c2:	4913      	ldr	r1, [pc, #76]	; (800e810 <SX1276Init+0xb4>)
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	005b      	lsls	r3, r3, #1
 800e7c8:	4413      	add	r3, r2
 800e7ca:	440b      	add	r3, r1
 800e7cc:	3302      	adds	r3, #2
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	f001 fb93 	bl	800fefc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e7d6:	7bfb      	ldrb	r3, [r7, #15]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	73fb      	strb	r3, [r7, #15]
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	2b0f      	cmp	r3, #15
 800e7e0:	d9dc      	bls.n	800e79c <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	f001 fb32 	bl	800fe4c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800e7e8:	4b0a      	ldr	r3, [pc, #40]	; (800e814 <SX1276Init+0xb8>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800e7f0:	bf00      	nop
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	20000854 	.word	0x20000854
 800e7fc:	080100f1 	.word	0x080100f1
 800e800:	20000eb0 	.word	0x20000eb0
 800e804:	20001018 	.word	0x20001018
 800e808:	20000ec4 	.word	0x20000ec4
 800e80c:	20000114 	.word	0x20000114
 800e810:	08012840 	.word	0x08012840
 800e814:	20000ed8 	.word	0x20000ed8

0800e818 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800e81c:	4b03      	ldr	r3, [pc, #12]	; (800e82c <SX1276GetStatus+0x14>)
 800e81e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
}
 800e822:	4618      	mov	r0, r3
 800e824:	46bd      	mov	sp, r7
 800e826:	bc80      	pop	{r7}
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	20000ed8 	.word	0x20000ed8

0800e830 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800e830:	b590      	push	{r4, r7, lr}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800e838:	4a17      	ldr	r2, [pc, #92]	; (800e898 <SX1276SetChannel+0x68>)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7f1 fde7 	bl	8000414 <__aeabi_ui2d>
 800e846:	a312      	add	r3, pc, #72	; (adr r3, 800e890 <SX1276SetChannel+0x60>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f7f1 ff86 	bl	800075c <__aeabi_ddiv>
 800e850:	4603      	mov	r3, r0
 800e852:	460c      	mov	r4, r1
 800e854:	4618      	mov	r0, r3
 800e856:	4621      	mov	r1, r4
 800e858:	f7f2 f918 	bl	8000a8c <__aeabi_d2uiz>
 800e85c:	4603      	mov	r3, r0
 800e85e:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	0c1b      	lsrs	r3, r3, #16
 800e864:	b2db      	uxtb	r3, r3
 800e866:	4619      	mov	r1, r3
 800e868:	2006      	movs	r0, #6
 800e86a:	f001 fb47 	bl	800fefc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	b2db      	uxtb	r3, r3
 800e874:	4619      	mov	r1, r3
 800e876:	2007      	movs	r0, #7
 800e878:	f001 fb40 	bl	800fefc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	4619      	mov	r1, r3
 800e882:	2008      	movs	r0, #8
 800e884:	f001 fb3a 	bl	800fefc <SX1276Write>
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd90      	pop	{r4, r7, pc}
 800e890:	00000000 	.word	0x00000000
 800e894:	404e8480 	.word	0x404e8480
 800e898:	20000ed8 	.word	0x20000ed8

0800e89c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	6039      	str	r1, [r7, #0]
 800e8a6:	71fb      	strb	r3, [r7, #7]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f001 faca 	bl	800fe4c <SX1276SetModem>

    SX1276SetChannel( freq );
 800e8b8:	6838      	ldr	r0, [r7, #0]
 800e8ba:	f7ff ffb9 	bl	800e830 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e8be:	2005      	movs	r0, #5
 800e8c0:	f001 fa9c 	bl	800fdfc <SX1276SetOpMode>

    DelayMs( 1 );
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	f7fd fbbc 	bl	800c042 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f001 fa35 	bl	800fd3c <SX1276ReadRssi>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800e8d6:	f000 ff13 	bl	800f700 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800e8da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e8de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	dd01      	ble.n	800e8ea <SX1276IsChannelFree+0x4e>
    {
        return false;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	e000      	b.n	800e8ec <SX1276IsChannelFree+0x50>
    }
    return true;
 800e8ea:	2301      	movs	r3, #1
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800e8fe:	2001      	movs	r0, #1
 800e900:	f001 faa4 	bl	800fe4c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e904:	21ff      	movs	r1, #255	; 0xff
 800e906:	2011      	movs	r0, #17
 800e908:	f001 faf8 	bl	800fefc <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e90c:	2005      	movs	r0, #5
 800e90e:	f001 fa75 	bl	800fdfc <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800e912:	2300      	movs	r3, #0
 800e914:	71fb      	strb	r3, [r7, #7]
 800e916:	e011      	b.n	800e93c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800e918:	2001      	movs	r0, #1
 800e91a:	f7fd fb92 	bl	800c042 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800e91e:	202c      	movs	r0, #44	; 0x2c
 800e920:	f001 fafe 	bl	800ff20 <SX1276Read>
 800e924:	4603      	mov	r3, r0
 800e926:	f003 0201 	and.w	r2, r3, #1
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	fa02 f303 	lsl.w	r3, r2, r3
 800e930:	683a      	ldr	r2, [r7, #0]
 800e932:	4313      	orrs	r3, r2
 800e934:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	3301      	adds	r3, #1
 800e93a:	71fb      	strb	r3, [r7, #7]
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	2b1f      	cmp	r3, #31
 800e940:	d9ea      	bls.n	800e918 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800e942:	f000 fedd 	bl	800f700 <SX1276SetSleep>

    return rnd;
 800e946:	683b      	ldr	r3, [r7, #0]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800e950:	b590      	push	{r4, r7, lr}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800e956:	2009      	movs	r0, #9
 800e958:	f001 fae2 	bl	800ff20 <SX1276Read>
 800e95c:	4603      	mov	r3, r0
 800e95e:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e960:	2006      	movs	r0, #6
 800e962:	f001 fadd 	bl	800ff20 <SX1276Read>
 800e966:	4603      	mov	r3, r0
 800e968:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e96a:	2007      	movs	r0, #7
 800e96c:	f001 fad8 	bl	800ff20 <SX1276Read>
 800e970:	4603      	mov	r3, r0
 800e972:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e974:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e976:	2008      	movs	r0, #8
 800e978:	f001 fad2 	bl	800ff20 <SX1276Read>
 800e97c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e97e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e980:	4618      	mov	r0, r3
 800e982:	f7f1 fd47 	bl	8000414 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e986:	a324      	add	r3, pc, #144	; (adr r3, 800ea18 <RxChainCalibration+0xc8>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fdbc 	bl	8000508 <__aeabi_dmul>
 800e990:	4603      	mov	r3, r0
 800e992:	460c      	mov	r4, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e994:	4618      	mov	r0, r3
 800e996:	4621      	mov	r1, r4
 800e998:	f7f2 f878 	bl	8000a8c <__aeabi_d2uiz>
 800e99c:	4603      	mov	r3, r0
 800e99e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	2009      	movs	r0, #9
 800e9a4:	f001 faaa 	bl	800fefc <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e9a8:	203b      	movs	r0, #59	; 0x3b
 800e9aa:	f001 fab9 	bl	800ff20 <SX1276Read>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	203b      	movs	r0, #59	; 0x3b
 800e9ba:	f001 fa9f 	bl	800fefc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e9be:	bf00      	nop
 800e9c0:	203b      	movs	r0, #59	; 0x3b
 800e9c2:	f001 faad 	bl	800ff20 <SX1276Read>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	f003 0320 	and.w	r3, r3, #32
 800e9cc:	2b20      	cmp	r3, #32
 800e9ce:	d0f7      	beq.n	800e9c0 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800e9d0:	4813      	ldr	r0, [pc, #76]	; (800ea20 <RxChainCalibration+0xd0>)
 800e9d2:	f7ff ff2d 	bl	800e830 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e9d6:	203b      	movs	r0, #59	; 0x3b
 800e9d8:	f001 faa2 	bl	800ff20 <SX1276Read>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	203b      	movs	r0, #59	; 0x3b
 800e9e8:	f001 fa88 	bl	800fefc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e9ec:	bf00      	nop
 800e9ee:	203b      	movs	r0, #59	; 0x3b
 800e9f0:	f001 fa96 	bl	800ff20 <SX1276Read>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	f003 0320 	and.w	r3, r3, #32
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	d0f7      	beq.n	800e9ee <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800e9fe:	79fb      	ldrb	r3, [r7, #7]
 800ea00:	4619      	mov	r1, r3
 800ea02:	2009      	movs	r0, #9
 800ea04:	f001 fa7a 	bl	800fefc <SX1276Write>
    SX1276SetChannel( initialFreq );
 800ea08:	6838      	ldr	r0, [r7, #0]
 800ea0a:	f7ff ff11 	bl	800e830 <SX1276SetChannel>
}
 800ea0e:	bf00      	nop
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd90      	pop	{r4, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	00000000 	.word	0x00000000
 800ea1c:	404e8480 	.word	0x404e8480
 800ea20:	33bca100 	.word	0x33bca100

0800ea24 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73fb      	strb	r3, [r7, #15]
 800ea30:	e017      	b.n	800ea62 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	4a0f      	ldr	r2, [pc, #60]	; (800ea74 <GetFskBandwidthRegValue+0x50>)
 800ea36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d30d      	bcc.n	800ea5c <GetFskBandwidthRegValue+0x38>
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
 800ea42:	3301      	adds	r3, #1
 800ea44:	4a0b      	ldr	r2, [pc, #44]	; (800ea74 <GetFskBandwidthRegValue+0x50>)
 800ea46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d205      	bcs.n	800ea5c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800ea50:	7bfb      	ldrb	r3, [r7, #15]
 800ea52:	4a08      	ldr	r2, [pc, #32]	; (800ea74 <GetFskBandwidthRegValue+0x50>)
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	4413      	add	r3, r2
 800ea58:	791b      	ldrb	r3, [r3, #4]
 800ea5a:	e006      	b.n	800ea6a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	73fb      	strb	r3, [r7, #15]
 800ea62:	7bfb      	ldrb	r3, [r7, #15]
 800ea64:	2b14      	cmp	r3, #20
 800ea66:	d9e4      	bls.n	800ea32 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ea68:	e7fe      	b.n	800ea68 <GetFskBandwidthRegValue+0x44>
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bc80      	pop	{r7}
 800ea72:	4770      	bx	lr
 800ea74:	08012870 	.word	0x08012870

0800ea78 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800ea78:	b5b0      	push	{r4, r5, r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60b9      	str	r1, [r7, #8]
 800ea80:	607a      	str	r2, [r7, #4]
 800ea82:	461a      	mov	r2, r3
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f001 f9dc 	bl	800fe4c <SX1276SetModem>

    switch( modem )
 800ea94:	7bfb      	ldrb	r3, [r7, #15]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d003      	beq.n	800eaa2 <SX1276SetRxConfig+0x2a>
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	f000 80d4 	beq.w	800ec48 <SX1276SetRxConfig+0x1d0>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800eaa0:	e20a      	b.n	800eeb8 <SX1276SetRxConfig+0x440>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800eaa2:	4a99      	ldr	r2, [pc, #612]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800eaaa:	4a97      	ldr	r2, [pc, #604]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800eab2:	4a95      	ldr	r2, [pc, #596]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
 800eaba:	4a93      	ldr	r2, [pc, #588]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eabc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eac0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800eac4:	4a90      	ldr	r2, [pc, #576]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eac6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800eaca:	f882 30fb 	strb.w	r3, [r2, #251]	; 0xfb
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800eace:	4a8e      	ldr	r2, [pc, #568]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ead0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ead4:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800ead8:	4a8b      	ldr	r2, [pc, #556]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eada:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800eade:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800eae2:	4a89      	ldr	r2, [pc, #548]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eae4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800eae8:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800eaec:	4a86      	ldr	r2, [pc, #536]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eaee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf0:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.RxSingleTimeout = symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3;
 800eaf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7f1 fc9c 	bl	8000434 <__aeabi_i2d>
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7f1 fc87 	bl	8000414 <__aeabi_ui2d>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	f04f 0000 	mov.w	r0, #0
 800eb0e:	497f      	ldr	r1, [pc, #508]	; (800ed0c <SX1276SetRxConfig+0x294>)
 800eb10:	f7f1 fe24 	bl	800075c <__aeabi_ddiv>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	4610      	mov	r0, r2
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	f04f 0200 	mov.w	r2, #0
 800eb20:	4b7b      	ldr	r3, [pc, #492]	; (800ed10 <SX1276SetRxConfig+0x298>)
 800eb22:	f7f1 fcf1 	bl	8000508 <__aeabi_dmul>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f1 fceb 	bl	8000508 <__aeabi_dmul>
 800eb32:	4603      	mov	r3, r0
 800eb34:	460c      	mov	r4, r1
 800eb36:	4618      	mov	r0, r3
 800eb38:	4621      	mov	r1, r4
 800eb3a:	f04f 0200 	mov.w	r2, #0
 800eb3e:	4b75      	ldr	r3, [pc, #468]	; (800ed14 <SX1276SetRxConfig+0x29c>)
 800eb40:	f7f1 fce2 	bl	8000508 <__aeabi_dmul>
 800eb44:	4603      	mov	r3, r0
 800eb46:	460c      	mov	r4, r1
 800eb48:	4618      	mov	r0, r3
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	f7f1 ff9e 	bl	8000a8c <__aeabi_d2uiz>
 800eb50:	4602      	mov	r2, r0
 800eb52:	4b6d      	ldr	r3, [pc, #436]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eb54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7f1 fc5b 	bl	8000414 <__aeabi_ui2d>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	460c      	mov	r4, r1
 800eb62:	461a      	mov	r2, r3
 800eb64:	4623      	mov	r3, r4
 800eb66:	a166      	add	r1, pc, #408	; (adr r1, 800ed00 <SX1276SetRxConfig+0x288>)
 800eb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb6c:	f7f1 fdf6 	bl	800075c <__aeabi_ddiv>
 800eb70:	4603      	mov	r3, r0
 800eb72:	460c      	mov	r4, r1
 800eb74:	4618      	mov	r0, r3
 800eb76:	4621      	mov	r1, r4
 800eb78:	f7f1 ff88 	bl	8000a8c <__aeabi_d2uiz>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	0a1b      	lsrs	r3, r3, #8
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	4619      	mov	r1, r3
 800eb8a:	2002      	movs	r0, #2
 800eb8c:	f001 f9b6 	bl	800fefc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	4619      	mov	r1, r3
 800eb96:	2003      	movs	r0, #3
 800eb98:	f001 f9b0 	bl	800fefc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800eb9c:	68b8      	ldr	r0, [r7, #8]
 800eb9e:	f7ff ff41 	bl	800ea24 <GetFskBandwidthRegValue>
 800eba2:	4603      	mov	r3, r0
 800eba4:	4619      	mov	r1, r3
 800eba6:	2012      	movs	r0, #18
 800eba8:	f001 f9a8 	bl	800fefc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800ebac:	6a38      	ldr	r0, [r7, #32]
 800ebae:	f7ff ff39 	bl	800ea24 <GetFskBandwidthRegValue>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	2013      	movs	r0, #19
 800ebb8:	f001 f9a0 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800ebbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebbe:	0a1b      	lsrs	r3, r3, #8
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	2025      	movs	r0, #37	; 0x25
 800ebc8:	f001 f998 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800ebcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	2026      	movs	r0, #38	; 0x26
 800ebd4:	f001 f992 	bl	800fefc <SX1276Write>
            if( fixLen == 1 )
 800ebd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <SX1276SetRxConfig+0x176>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800ebe0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	2032      	movs	r0, #50	; 0x32
 800ebe8:	f001 f988 	bl	800fefc <SX1276Write>
 800ebec:	e003      	b.n	800ebf6 <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800ebee:	21ff      	movs	r1, #255	; 0xff
 800ebf0:	2032      	movs	r0, #50	; 0x32
 800ebf2:	f001 f983 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800ebf6:	2030      	movs	r0, #48	; 0x30
 800ebf8:	f001 f992 	bl	800ff20 <SX1276Read>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800ec00:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800ec04:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800ec06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ec0a:	2a00      	cmp	r2, #0
 800ec0c:	d001      	beq.n	800ec12 <SX1276SetRxConfig+0x19a>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	e001      	b.n	800ec16 <SX1276SetRxConfig+0x19e>
 800ec12:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800ec16:	4313      	orrs	r3, r2
 800ec18:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800ec1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ec1e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800ec20:	b25b      	sxtb	r3, r3
 800ec22:	4313      	orrs	r3, r2
 800ec24:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	4619      	mov	r1, r3
 800ec2a:	2030      	movs	r0, #48	; 0x30
 800ec2c:	f001 f966 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800ec30:	2031      	movs	r0, #49	; 0x31
 800ec32:	f001 f975 	bl	800ff20 <SX1276Read>
 800ec36:	4603      	mov	r3, r0
 800ec38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	4619      	mov	r1, r3
 800ec40:	2031      	movs	r0, #49	; 0x31
 800ec42:	f001 f95b 	bl	800fefc <SX1276Write>
        break;
 800ec46:	e137      	b.n	800eeb8 <SX1276SetRxConfig+0x440>
            if( bandwidth > 2 )
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d900      	bls.n	800ec50 <SX1276SetRxConfig+0x1d8>
                while( 1 );
 800ec4e:	e7fe      	b.n	800ec4e <SX1276SetRxConfig+0x1d6>
            bandwidth += 7;
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	3307      	adds	r3, #7
 800ec54:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800ec56:	4a2c      	ldr	r2, [pc, #176]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800ec5e:	4a2a      	ldr	r2, [pc, #168]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800ec66:	4a28      	ldr	r2, [pc, #160]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec68:	7bbb      	ldrb	r3, [r7, #14]
 800ec6a:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800ec6e:	4a26      	ldr	r2, [pc, #152]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec72:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800ec76:	4a24      	ldr	r2, [pc, #144]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec7c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800ec80:	4a21      	ldr	r2, [pc, #132]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ec86:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800ec8a:	4a1f      	ldr	r2, [pc, #124]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ec90:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800ec94:	4a1c      	ldr	r2, [pc, #112]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ec96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ec9a:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800ec9e:	4a1a      	ldr	r2, [pc, #104]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800eca0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800eca4:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800eca8:	4a17      	ldr	r2, [pc, #92]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ecaa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ecae:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800ecb2:	4a15      	ldr	r2, [pc, #84]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ecb4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ecb8:	f882 312e 	strb.w	r3, [r2, #302]	; 0x12e
            if( datarate > 12 )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b0c      	cmp	r3, #12
 800ecc0:	d902      	bls.n	800ecc8 <SX1276SetRxConfig+0x250>
                datarate = 12;
 800ecc2:	230c      	movs	r3, #12
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	e004      	b.n	800ecd2 <SX1276SetRxConfig+0x25a>
            else if( datarate < 6 )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b05      	cmp	r3, #5
 800eccc:	d801      	bhi.n	800ecd2 <SX1276SetRxConfig+0x25a>
                datarate = 6;
 800ecce:	2306      	movs	r3, #6
 800ecd0:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b07      	cmp	r3, #7
 800ecd6:	d105      	bne.n	800ece4 <SX1276SetRxConfig+0x26c>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b0b      	cmp	r3, #11
 800ecdc:	d008      	beq.n	800ecf0 <SX1276SetRxConfig+0x278>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b0c      	cmp	r3, #12
 800ece2:	d005      	beq.n	800ecf0 <SX1276SetRxConfig+0x278>
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	2b08      	cmp	r3, #8
 800ece8:	d116      	bne.n	800ed18 <SX1276SetRxConfig+0x2a0>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b0c      	cmp	r3, #12
 800ecee:	d113      	bne.n	800ed18 <SX1276SetRxConfig+0x2a0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800ecf0:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <SX1276SetRxConfig+0x290>)
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800ecf8:	e012      	b.n	800ed20 <SX1276SetRxConfig+0x2a8>
 800ecfa:	bf00      	nop
 800ecfc:	f3af 8000 	nop.w
 800ed00:	00000000 	.word	0x00000000
 800ed04:	417e8480 	.word	0x417e8480
 800ed08:	20000ed8 	.word	0x20000ed8
 800ed0c:	3ff00000 	.word	0x3ff00000
 800ed10:	40200000 	.word	0x40200000
 800ed14:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800ed18:	4b69      	ldr	r3, [pc, #420]	; (800eec0 <SX1276SetRxConfig+0x448>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800ed20:	201d      	movs	r0, #29
 800ed22:	f001 f8fd 	bl	800ff20 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
 800ed30:	005b      	lsls	r3, r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	4313      	orrs	r3, r2
 800ed36:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ed38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ed40:	4619      	mov	r1, r3
 800ed42:	201d      	movs	r0, #29
 800ed44:	f001 f8da 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800ed48:	201e      	movs	r0, #30
 800ed4a:	f001 f8e9 	bl	800ff20 <SX1276Read>
 800ed4e:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	011b      	lsls	r3, r3, #4
 800ed5c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800ed62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800ed6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed70:	0a1b      	lsrs	r3, r3, #8
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	f003 0303 	and.w	r3, r3, #3
 800ed7a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	4619      	mov	r1, r3
 800ed82:	201e      	movs	r0, #30
 800ed84:	f001 f8ba 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800ed88:	2026      	movs	r0, #38	; 0x26
 800ed8a:	f001 f8c9 	bl	800ff20 <SX1276Read>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	b25b      	sxtb	r3, r3
 800ed92:	f023 0308 	bic.w	r3, r3, #8
 800ed96:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800ed98:	4b49      	ldr	r3, [pc, #292]	; (800eec0 <SX1276SetRxConfig+0x448>)
 800ed9a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ed9e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800eda0:	b25b      	sxtb	r3, r3
 800eda2:	4313      	orrs	r3, r2
 800eda4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	4619      	mov	r1, r3
 800edaa:	2026      	movs	r0, #38	; 0x26
 800edac:	f001 f8a6 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800edb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	4619      	mov	r1, r3
 800edb6:	201f      	movs	r0, #31
 800edb8:	f001 f8a0 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800edbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edbe:	0a1b      	lsrs	r3, r3, #8
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	4619      	mov	r1, r3
 800edc6:	2020      	movs	r0, #32
 800edc8:	f001 f898 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800edcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	4619      	mov	r1, r3
 800edd2:	2021      	movs	r0, #33	; 0x21
 800edd4:	f001 f892 	bl	800fefc <SX1276Write>
            if( fixLen == 1 )
 800edd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <SX1276SetRxConfig+0x374>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800ede0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ede4:	4619      	mov	r1, r3
 800ede6:	2022      	movs	r0, #34	; 0x22
 800ede8:	f001 f888 	bl	800fefc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800edec:	4b34      	ldr	r3, [pc, #208]	; (800eec0 <SX1276SetRxConfig+0x448>)
 800edee:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d011      	beq.n	800ee1a <SX1276SetRxConfig+0x3a2>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800edf6:	2044      	movs	r0, #68	; 0x44
 800edf8:	f001 f892 	bl	800ff20 <SX1276Read>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	4619      	mov	r1, r3
 800ee06:	2044      	movs	r0, #68	; 0x44
 800ee08:	f001 f878 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800ee0c:	4b2c      	ldr	r3, [pc, #176]	; (800eec0 <SX1276SetRxConfig+0x448>)
 800ee0e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800ee12:	4619      	mov	r1, r3
 800ee14:	2024      	movs	r0, #36	; 0x24
 800ee16:	f001 f871 	bl	800fefc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2b09      	cmp	r3, #9
 800ee1e:	d10e      	bne.n	800ee3e <SX1276SetRxConfig+0x3c6>
 800ee20:	4b27      	ldr	r3, [pc, #156]	; (800eec0 <SX1276SetRxConfig+0x448>)
 800ee22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee26:	4a27      	ldr	r2, [pc, #156]	; (800eec4 <SX1276SetRxConfig+0x44c>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d908      	bls.n	800ee3e <SX1276SetRxConfig+0x3c6>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800ee2c:	2102      	movs	r1, #2
 800ee2e:	2036      	movs	r0, #54	; 0x36
 800ee30:	f001 f864 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800ee34:	2164      	movs	r1, #100	; 0x64
 800ee36:	203a      	movs	r0, #58	; 0x3a
 800ee38:	f001 f860 	bl	800fefc <SX1276Write>
 800ee3c:	e00f      	b.n	800ee5e <SX1276SetRxConfig+0x3e6>
            else if( bandwidth == 9 )
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2b09      	cmp	r3, #9
 800ee42:	d108      	bne.n	800ee56 <SX1276SetRxConfig+0x3de>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800ee44:	2102      	movs	r1, #2
 800ee46:	2036      	movs	r0, #54	; 0x36
 800ee48:	f001 f858 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800ee4c:	217f      	movs	r1, #127	; 0x7f
 800ee4e:	203a      	movs	r0, #58	; 0x3a
 800ee50:	f001 f854 	bl	800fefc <SX1276Write>
 800ee54:	e003      	b.n	800ee5e <SX1276SetRxConfig+0x3e6>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800ee56:	2103      	movs	r1, #3
 800ee58:	2036      	movs	r0, #54	; 0x36
 800ee5a:	f001 f84f 	bl	800fefc <SX1276Write>
            if( datarate == 6 )
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2b06      	cmp	r3, #6
 800ee62:	d114      	bne.n	800ee8e <SX1276SetRxConfig+0x416>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ee64:	2031      	movs	r0, #49	; 0x31
 800ee66:	f001 f85b 	bl	800ff20 <SX1276Read>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	b25b      	sxtb	r3, r3
 800ee6e:	f023 0307 	bic.w	r3, r3, #7
 800ee72:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ee74:	f043 0305 	orr.w	r3, r3, #5
 800ee78:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	2031      	movs	r0, #49	; 0x31
 800ee80:	f001 f83c 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ee84:	210c      	movs	r1, #12
 800ee86:	2037      	movs	r0, #55	; 0x37
 800ee88:	f001 f838 	bl	800fefc <SX1276Write>
        break;
 800ee8c:	e013      	b.n	800eeb6 <SX1276SetRxConfig+0x43e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ee8e:	2031      	movs	r0, #49	; 0x31
 800ee90:	f001 f846 	bl	800ff20 <SX1276Read>
 800ee94:	4603      	mov	r3, r0
 800ee96:	b25b      	sxtb	r3, r3
 800ee98:	f023 0307 	bic.w	r3, r3, #7
 800ee9c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ee9e:	f043 0303 	orr.w	r3, r3, #3
 800eea2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	4619      	mov	r1, r3
 800eea8:	2031      	movs	r0, #49	; 0x31
 800eeaa:	f001 f827 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800eeae:	210a      	movs	r1, #10
 800eeb0:	2037      	movs	r0, #55	; 0x37
 800eeb2:	f001 f823 	bl	800fefc <SX1276Write>
        break;
 800eeb6:	bf00      	nop
}
 800eeb8:	bf00      	nop
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bdb0      	pop	{r4, r5, r7, pc}
 800eec0:	20000ed8 	.word	0x20000ed8
 800eec4:	1f4add40 	.word	0x1f4add40

0800eec8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800eec8:	b590      	push	{r4, r7, lr}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60ba      	str	r2, [r7, #8]
 800eed0:	607b      	str	r3, [r7, #4]
 800eed2:	4603      	mov	r3, r0
 800eed4:	73fb      	strb	r3, [r7, #15]
 800eed6:	460b      	mov	r3, r1
 800eed8:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 ffb5 	bl	800fe4c <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800eee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fb44 	bl	800e574 <SX1276SetRfTxPower>

    switch( modem )
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <SX1276SetTxConfig+0x32>
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	f000 809f 	beq.w	800f036 <SX1276SetTxConfig+0x16e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800eef8:	e195      	b.n	800f226 <SX1276SetTxConfig+0x35e>
            SX1276.Settings.Fsk.Power = power;
 800eefa:	4abf      	ldr	r2, [pc, #764]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
 800eefe:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
            SX1276.Settings.Fsk.Fdev = fdev;
 800ef02:	4abd      	ldr	r2, [pc, #756]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800ef0a:	4abb      	ldr	r2, [pc, #748]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800ef12:	4ab9      	ldr	r2, [pc, #740]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ef1a:	4ab7      	ldr	r2, [pc, #732]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef1e:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.FixLen = fixLen;
 800ef22:	4ab5      	ldr	r2, [pc, #724]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef28:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800ef2c:	4ab2      	ldr	r2, [pc, #712]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ef32:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800ef36:	4ab0      	ldr	r2, [pc, #704]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ef3c:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800ef40:	4aad      	ldr	r2, [pc, #692]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800ef42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800ef48:	68b8      	ldr	r0, [r7, #8]
 800ef4a:	f7f1 fa63 	bl	8000414 <__aeabi_ui2d>
 800ef4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f1e8 <SX1276SetTxConfig+0x320>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	f7f1 fc02 	bl	800075c <__aeabi_ddiv>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	4621      	mov	r1, r4
 800ef60:	f7f1 fd94 	bl	8000a8c <__aeabi_d2uiz>
 800ef64:	4603      	mov	r3, r0
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	0a1b      	lsrs	r3, r3, #8
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	4619      	mov	r1, r3
 800ef72:	2004      	movs	r0, #4
 800ef74:	f000 ffc2 	bl	800fefc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	2005      	movs	r0, #5
 800ef80:	f000 ffbc 	bl	800fefc <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800ef84:	6a38      	ldr	r0, [r7, #32]
 800ef86:	f7f1 fa45 	bl	8000414 <__aeabi_ui2d>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	461a      	mov	r2, r3
 800ef90:	4623      	mov	r3, r4
 800ef92:	a197      	add	r1, pc, #604	; (adr r1, 800f1f0 <SX1276SetTxConfig+0x328>)
 800ef94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef98:	f7f1 fbe0 	bl	800075c <__aeabi_ddiv>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	460c      	mov	r4, r1
 800efa0:	4618      	mov	r0, r3
 800efa2:	4621      	mov	r1, r4
 800efa4:	f7f1 fd72 	bl	8000a8c <__aeabi_d2uiz>
 800efa8:	4603      	mov	r3, r0
 800efaa:	b29b      	uxth	r3, r3
 800efac:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	0a1b      	lsrs	r3, r3, #8
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	4619      	mov	r1, r3
 800efb6:	2002      	movs	r0, #2
 800efb8:	f000 ffa0 	bl	800fefc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	4619      	mov	r1, r3
 800efc2:	2003      	movs	r0, #3
 800efc4:	f000 ff9a 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800efc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efca:	0a1b      	lsrs	r3, r3, #8
 800efcc:	b29b      	uxth	r3, r3
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	4619      	mov	r1, r3
 800efd2:	2025      	movs	r0, #37	; 0x25
 800efd4:	f000 ff92 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800efd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	4619      	mov	r1, r3
 800efde:	2026      	movs	r0, #38	; 0x26
 800efe0:	f000 ff8c 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800efe4:	2030      	movs	r0, #48	; 0x30
 800efe6:	f000 ff9b 	bl	800ff20 <SX1276Read>
 800efea:	4603      	mov	r3, r0
 800efec:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800efee:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800eff2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800eff4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eff8:	2a00      	cmp	r2, #0
 800effa:	d001      	beq.n	800f000 <SX1276SetTxConfig+0x138>
 800effc:	2200      	movs	r2, #0
 800effe:	e001      	b.n	800f004 <SX1276SetTxConfig+0x13c>
 800f000:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f004:	4313      	orrs	r3, r2
 800f006:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800f008:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f00c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800f00e:	b25b      	sxtb	r3, r3
 800f010:	4313      	orrs	r3, r2
 800f012:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800f014:	b2db      	uxtb	r3, r3
 800f016:	4619      	mov	r1, r3
 800f018:	2030      	movs	r0, #48	; 0x30
 800f01a:	f000 ff6f 	bl	800fefc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800f01e:	2031      	movs	r0, #49	; 0x31
 800f020:	f000 ff7e 	bl	800ff20 <SX1276Read>
 800f024:	4603      	mov	r3, r0
 800f026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	4619      	mov	r1, r3
 800f02e:	2031      	movs	r0, #49	; 0x31
 800f030:	f000 ff64 	bl	800fefc <SX1276Write>
        break;
 800f034:	e0f7      	b.n	800f226 <SX1276SetTxConfig+0x35e>
            SX1276.Settings.LoRa.Power = power;
 800f036:	4a70      	ldr	r2, [pc, #448]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f038:	7bbb      	ldrb	r3, [r7, #14]
 800f03a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            if( bandwidth > 2 )
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d900      	bls.n	800f046 <SX1276SetTxConfig+0x17e>
                while( 1 );
 800f044:	e7fe      	b.n	800f044 <SX1276SetTxConfig+0x17c>
            bandwidth += 7;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3307      	adds	r3, #7
 800f04a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800f04c:	4a6a      	ldr	r2, [pc, #424]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800f054:	4a68      	ldr	r2, [pc, #416]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f056:	6a3b      	ldr	r3, [r7, #32]
 800f058:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800f05c:	4a66      	ldr	r2, [pc, #408]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f05e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f062:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800f066:	4a64      	ldr	r2, [pc, #400]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f068:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f06a:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800f06e:	4a62      	ldr	r2, [pc, #392]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f070:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f074:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800f078:	4a5f      	ldr	r2, [pc, #380]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f07a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f07e:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800f082:	4a5d      	ldr	r2, [pc, #372]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f084:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f088:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800f08c:	4a5a      	ldr	r2, [pc, #360]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f08e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f092:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800f096:	4a58      	ldr	r2, [pc, #352]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f098:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f09c:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800f0a0:	4a55      	ldr	r2, [pc, #340]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
            if( datarate > 12 )
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	2b0c      	cmp	r3, #12
 800f0ac:	d902      	bls.n	800f0b4 <SX1276SetTxConfig+0x1ec>
                datarate = 12;
 800f0ae:	230c      	movs	r3, #12
 800f0b0:	623b      	str	r3, [r7, #32]
 800f0b2:	e004      	b.n	800f0be <SX1276SetTxConfig+0x1f6>
            else if( datarate < 6 )
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	2b05      	cmp	r3, #5
 800f0b8:	d801      	bhi.n	800f0be <SX1276SetTxConfig+0x1f6>
                datarate = 6;
 800f0ba:	2306      	movs	r3, #6
 800f0bc:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b07      	cmp	r3, #7
 800f0c2:	d105      	bne.n	800f0d0 <SX1276SetTxConfig+0x208>
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	2b0b      	cmp	r3, #11
 800f0c8:	d008      	beq.n	800f0dc <SX1276SetTxConfig+0x214>
 800f0ca:	6a3b      	ldr	r3, [r7, #32]
 800f0cc:	2b0c      	cmp	r3, #12
 800f0ce:	d005      	beq.n	800f0dc <SX1276SetTxConfig+0x214>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b08      	cmp	r3, #8
 800f0d4:	d107      	bne.n	800f0e6 <SX1276SetTxConfig+0x21e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	2b0c      	cmp	r3, #12
 800f0da:	d104      	bne.n	800f0e6 <SX1276SetTxConfig+0x21e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800f0dc:	4b46      	ldr	r3, [pc, #280]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800f0e4:	e003      	b.n	800f0ee <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800f0e6:	4b44      	ldr	r3, [pc, #272]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f0ee:	4b42      	ldr	r3, [pc, #264]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f0f0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d011      	beq.n	800f11c <SX1276SetTxConfig+0x254>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800f0f8:	2044      	movs	r0, #68	; 0x44
 800f0fa:	f000 ff11 	bl	800ff20 <SX1276Read>
 800f0fe:	4603      	mov	r3, r0
 800f100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f104:	b2db      	uxtb	r3, r3
 800f106:	4619      	mov	r1, r3
 800f108:	2044      	movs	r0, #68	; 0x44
 800f10a:	f000 fef7 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800f10e:	4b3a      	ldr	r3, [pc, #232]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f110:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800f114:	4619      	mov	r1, r3
 800f116:	2024      	movs	r0, #36	; 0x24
 800f118:	f000 fef0 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800f11c:	201d      	movs	r0, #29
 800f11e:	f000 feff 	bl	800ff20 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	011b      	lsls	r3, r3, #4
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	b2db      	uxtb	r3, r3
 800f132:	4313      	orrs	r3, r2
 800f134:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800f136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800f13a:	4313      	orrs	r3, r2
 800f13c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800f13e:	4619      	mov	r1, r3
 800f140:	201d      	movs	r0, #29
 800f142:	f000 fedb 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800f146:	201e      	movs	r0, #30
 800f148:	f000 feea 	bl	800ff20 <SX1276Read>
 800f14c:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800f14e:	f003 030b 	and.w	r3, r3, #11
 800f152:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	b2db      	uxtb	r3, r3
 800f158:	011b      	lsls	r3, r3, #4
 800f15a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800f15c:	4313      	orrs	r3, r2
 800f15e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800f160:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800f168:	4313      	orrs	r3, r2
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	4619      	mov	r1, r3
 800f16e:	201e      	movs	r0, #30
 800f170:	f000 fec4 	bl	800fefc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800f174:	2026      	movs	r0, #38	; 0x26
 800f176:	f000 fed3 	bl	800ff20 <SX1276Read>
 800f17a:	4603      	mov	r3, r0
 800f17c:	b25b      	sxtb	r3, r3
 800f17e:	f023 0308 	bic.w	r3, r3, #8
 800f182:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800f184:	4b1c      	ldr	r3, [pc, #112]	; (800f1f8 <SX1276SetTxConfig+0x330>)
 800f186:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800f18a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800f18c:	b25b      	sxtb	r3, r3
 800f18e:	4313      	orrs	r3, r2
 800f190:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800f192:	b2db      	uxtb	r3, r3
 800f194:	4619      	mov	r1, r3
 800f196:	2026      	movs	r0, #38	; 0x26
 800f198:	f000 feb0 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800f19c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f19e:	0a1b      	lsrs	r3, r3, #8
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	2020      	movs	r0, #32
 800f1a8:	f000 fea8 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800f1ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	2021      	movs	r0, #33	; 0x21
 800f1b4:	f000 fea2 	bl	800fefc <SX1276Write>
            if( datarate == 6 )
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	2b06      	cmp	r3, #6
 800f1bc:	d11e      	bne.n	800f1fc <SX1276SetTxConfig+0x334>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800f1be:	2031      	movs	r0, #49	; 0x31
 800f1c0:	f000 feae 	bl	800ff20 <SX1276Read>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	b25b      	sxtb	r3, r3
 800f1c8:	f023 0307 	bic.w	r3, r3, #7
 800f1cc:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800f1ce:	f043 0305 	orr.w	r3, r3, #5
 800f1d2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	2031      	movs	r0, #49	; 0x31
 800f1da:	f000 fe8f 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800f1de:	210c      	movs	r1, #12
 800f1e0:	2037      	movs	r0, #55	; 0x37
 800f1e2:	f000 fe8b 	bl	800fefc <SX1276Write>
        break;
 800f1e6:	e01d      	b.n	800f224 <SX1276SetTxConfig+0x35c>
 800f1e8:	00000000 	.word	0x00000000
 800f1ec:	404e8480 	.word	0x404e8480
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	417e8480 	.word	0x417e8480
 800f1f8:	20000ed8 	.word	0x20000ed8
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800f1fc:	2031      	movs	r0, #49	; 0x31
 800f1fe:	f000 fe8f 	bl	800ff20 <SX1276Read>
 800f202:	4603      	mov	r3, r0
 800f204:	b25b      	sxtb	r3, r3
 800f206:	f023 0307 	bic.w	r3, r3, #7
 800f20a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800f20c:	f043 0303 	orr.w	r3, r3, #3
 800f210:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800f212:	b2db      	uxtb	r3, r3
 800f214:	4619      	mov	r1, r3
 800f216:	2031      	movs	r0, #49	; 0x31
 800f218:	f000 fe70 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800f21c:	210a      	movs	r1, #10
 800f21e:	2037      	movs	r0, #55	; 0x37
 800f220:	f000 fe6c 	bl	800fefc <SX1276Write>
        break;
 800f224:	bf00      	nop
}
 800f226:	bf00      	nop
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd90      	pop	{r4, r7, pc}
 800f22e:	bf00      	nop

0800f230 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800f230:	b5b0      	push	{r4, r5, r7, lr}
 800f232:	b094      	sub	sp, #80	; 0x50
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	460a      	mov	r2, r1
 800f23a:	71fb      	strb	r3, [r7, #7]
 800f23c:	4613      	mov	r3, r2
 800f23e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800f240:	2300      	movs	r3, #0
 800f242:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <SX1276GetTimeOnAir+0x22>
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	f000 8090 	beq.w	800f370 <SX1276GetTimeOnAir+0x140>
 800f250:	e17e      	b.n	800f550 <SX1276GetTimeOnAir+0x320>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800f252:	4bcb      	ldr	r3, [pc, #812]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f254:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800f258:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800f25a:	2027      	movs	r0, #39	; 0x27
 800f25c:	f000 fe60 	bl	800ff20 <SX1276Read>
 800f260:	4603      	mov	r3, r0
 800f262:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f266:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800f268:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f1 f8e2 	bl	8000434 <__aeabi_i2d>
 800f270:	4604      	mov	r4, r0
 800f272:	460d      	mov	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800f274:	4bc2      	ldr	r3, [pc, #776]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f276:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <SX1276GetTimeOnAir+0x58>
 800f27e:	f04f 0000 	mov.w	r0, #0
 800f282:	f04f 0100 	mov.w	r1, #0
 800f286:	e002      	b.n	800f28e <SX1276GetTimeOnAir+0x5e>
 800f288:	f04f 0000 	mov.w	r0, #0
 800f28c:	49bd      	ldr	r1, [pc, #756]	; (800f584 <SX1276GetTimeOnAir+0x354>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800f28e:	4622      	mov	r2, r4
 800f290:	462b      	mov	r3, r5
 800f292:	f7f0 ff83 	bl	800019c <__adddf3>
 800f296:	4603      	mov	r3, r0
 800f298:	460c      	mov	r4, r1
 800f29a:	4625      	mov	r5, r4
 800f29c:	461c      	mov	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800f29e:	2030      	movs	r0, #48	; 0x30
 800f2a0:	f000 fe3e 	bl	800ff20 <SX1276Read>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <SX1276GetTimeOnAir+0x86>
 800f2ae:	f04f 0000 	mov.w	r0, #0
 800f2b2:	49b4      	ldr	r1, [pc, #720]	; (800f584 <SX1276GetTimeOnAir+0x354>)
 800f2b4:	e003      	b.n	800f2be <SX1276GetTimeOnAir+0x8e>
 800f2b6:	f04f 0000 	mov.w	r0, #0
 800f2ba:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800f2be:	4622      	mov	r2, r4
 800f2c0:	462b      	mov	r3, r5
 800f2c2:	f7f0 ff6b 	bl	800019c <__adddf3>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	4625      	mov	r5, r4
 800f2cc:	461c      	mov	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800f2ce:	79bb      	ldrb	r3, [r7, #6]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7f1 f8af 	bl	8000434 <__aeabi_i2d>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	4620      	mov	r0, r4
 800f2dc:	4629      	mov	r1, r5
 800f2de:	f7f0 ff5d 	bl	800019c <__adddf3>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	4625      	mov	r5, r4
 800f2e8:	461c      	mov	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800f2ea:	4ba5      	ldr	r3, [pc, #660]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f2ec:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d004      	beq.n	800f2fe <SX1276GetTimeOnAir+0xce>
 800f2f4:	f04f 0000 	mov.w	r0, #0
 800f2f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f2fc:	e003      	b.n	800f306 <SX1276GetTimeOnAir+0xd6>
 800f2fe:	f04f 0000 	mov.w	r0, #0
 800f302:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800f306:	4622      	mov	r2, r4
 800f308:	462b      	mov	r3, r5
 800f30a:	f7f0 ff47 	bl	800019c <__adddf3>
 800f30e:	4603      	mov	r3, r0
 800f310:	460c      	mov	r4, r1
 800f312:	4618      	mov	r0, r3
 800f314:	4621      	mov	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800f316:	f04f 0200 	mov.w	r2, #0
 800f31a:	4b9b      	ldr	r3, [pc, #620]	; (800f588 <SX1276GetTimeOnAir+0x358>)
 800f31c:	f7f1 f8f4 	bl	8000508 <__aeabi_dmul>
 800f320:	4603      	mov	r3, r0
 800f322:	460c      	mov	r4, r1
 800f324:	4625      	mov	r5, r4
 800f326:	461c      	mov	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 800f328:	4b95      	ldr	r3, [pc, #596]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f32a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f1 f870 	bl	8000414 <__aeabi_ui2d>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4620      	mov	r0, r4
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f1 fa0e 	bl	800075c <__aeabi_ddiv>
 800f340:	4603      	mov	r3, r0
 800f342:	460c      	mov	r4, r1
 800f344:	4618      	mov	r0, r3
 800f346:	4621      	mov	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800f348:	f04f 0200 	mov.w	r2, #0
 800f34c:	4b8f      	ldr	r3, [pc, #572]	; (800f58c <SX1276GetTimeOnAir+0x35c>)
 800f34e:	f7f1 f8db 	bl	8000508 <__aeabi_dmul>
 800f352:	4603      	mov	r3, r0
 800f354:	460c      	mov	r4, r1
 800f356:	4618      	mov	r0, r3
 800f358:	4621      	mov	r1, r4
 800f35a:	f002 ffc5 	bl	80122e8 <round>
 800f35e:	4603      	mov	r3, r0
 800f360:	460c      	mov	r4, r1
 800f362:	4618      	mov	r0, r3
 800f364:	4621      	mov	r1, r4
 800f366:	f7f1 fb91 	bl	8000a8c <__aeabi_d2uiz>
 800f36a:	4603      	mov	r3, r0
 800f36c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800f36e:	e0ef      	b.n	800f550 <SX1276GetTimeOnAir+0x320>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800f370:	f04f 0300 	mov.w	r3, #0
 800f374:	f04f 0400 	mov.w	r4, #0
 800f378:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800f37c:	4b80      	ldr	r3, [pc, #512]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f37e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f382:	2b08      	cmp	r3, #8
 800f384:	d009      	beq.n	800f39a <SX1276GetTimeOnAir+0x16a>
 800f386:	2b09      	cmp	r3, #9
 800f388:	d00d      	beq.n	800f3a6 <SX1276GetTimeOnAir+0x176>
 800f38a:	2b07      	cmp	r3, #7
 800f38c:	d111      	bne.n	800f3b2 <SX1276GetTimeOnAir+0x182>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800f38e:	a474      	add	r4, pc, #464	; (adr r4, 800f560 <SX1276GetTimeOnAir+0x330>)
 800f390:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f394:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 800f398:	e00b      	b.n	800f3b2 <SX1276GetTimeOnAir+0x182>
            case 8: // 250 kHz
                bw = 250e3;
 800f39a:	a473      	add	r4, pc, #460	; (adr r4, 800f568 <SX1276GetTimeOnAir+0x338>)
 800f39c:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f3a0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 800f3a4:	e005      	b.n	800f3b2 <SX1276GetTimeOnAir+0x182>
            case 9: // 500 kHz
                bw = 500e3;
 800f3a6:	a472      	add	r4, pc, #456	; (adr r4, 800f570 <SX1276GetTimeOnAir+0x340>)
 800f3a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 800f3ac:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 800f3b0:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800f3b2:	4b73      	ldr	r3, [pc, #460]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f3b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7f1 f838 	bl	8000434 <__aeabi_i2d>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f3d0:	f7f1 f9c4 	bl	800075c <__aeabi_ddiv>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
            double ts = 1 / rs;
 800f3dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f3e0:	f04f 0000 	mov.w	r0, #0
 800f3e4:	4967      	ldr	r1, [pc, #412]	; (800f584 <SX1276GetTimeOnAir+0x354>)
 800f3e6:	f7f1 f9b9 	bl	800075c <__aeabi_ddiv>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800f3f2:	4b63      	ldr	r3, [pc, #396]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f3f4:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7f1 f81b 	bl	8000434 <__aeabi_i2d>
 800f3fe:	f04f 0200 	mov.w	r2, #0
 800f402:	4b63      	ldr	r3, [pc, #396]	; (800f590 <SX1276GetTimeOnAir+0x360>)
 800f404:	f7f0 feca 	bl	800019c <__adddf3>
 800f408:	4603      	mov	r3, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	461a      	mov	r2, r3
 800f40e:	4623      	mov	r3, r4
 800f410:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f414:	f7f1 f878 	bl	8000508 <__aeabi_dmul>
 800f418:	4603      	mov	r3, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800f420:	79bb      	ldrb	r3, [r7, #6]
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	461a      	mov	r2, r3
 800f426:	4b56      	ldr	r3, [pc, #344]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f428:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800f430:	4a53      	ldr	r2, [pc, #332]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f432:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800f436:	0112      	lsls	r2, r2, #4
 800f438:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800f43a:	4b51      	ldr	r3, [pc, #324]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f43c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <SX1276GetTimeOnAir+0x218>
 800f444:	2314      	movs	r3, #20
 800f446:	e000      	b.n	800f44a <SX1276GetTimeOnAir+0x21a>
 800f448:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f0 ffe0 	bl	8000414 <__aeabi_ui2d>
 800f454:	4604      	mov	r4, r0
 800f456:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800f458:	4b49      	ldr	r3, [pc, #292]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f45a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800f45e:	4b48      	ldr	r3, [pc, #288]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f460:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <SX1276GetTimeOnAir+0x23c>
 800f468:	2302      	movs	r3, #2
 800f46a:	e000      	b.n	800f46e <SX1276GetTimeOnAir+0x23e>
 800f46c:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4618      	mov	r0, r3
 800f474:	f7f0 ffce 	bl	8000414 <__aeabi_ui2d>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800f47c:	4620      	mov	r0, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	f7f1 f96c 	bl	800075c <__aeabi_ddiv>
 800f484:	4603      	mov	r3, r0
 800f486:	460c      	mov	r4, r1
 800f488:	4618      	mov	r0, r3
 800f48a:	4621      	mov	r1, r4
 800f48c:	f002 fe28 	bl	80120e0 <ceil>
 800f490:	4604      	mov	r4, r0
 800f492:	460d      	mov	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800f494:	4b3a      	ldr	r3, [pc, #232]	; (800f580 <SX1276GetTimeOnAir+0x350>)
 800f496:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800f49a:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f0 ffc9 	bl	8000434 <__aeabi_i2d>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	f7f1 f82d 	bl	8000508 <__aeabi_dmul>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	e9c7 3408 	strd	r3, r4, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	f04f 0300 	mov.w	r3, #0
 800f4be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f4c2:	f7f1 fab1 	bl	8000a28 <__aeabi_dcmpgt>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d009      	beq.n	800f4e0 <SX1276GetTimeOnAir+0x2b0>
 800f4cc:	f04f 0200 	mov.w	r2, #0
 800f4d0:	4b2d      	ldr	r3, [pc, #180]	; (800f588 <SX1276GetTimeOnAir+0x358>)
 800f4d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f4d6:	f7f0 fe61 	bl	800019c <__adddf3>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	460c      	mov	r4, r1
 800f4de:	e002      	b.n	800f4e6 <SX1276GetTimeOnAir+0x2b6>
 800f4e0:	f04f 0300 	mov.w	r3, #0
 800f4e4:	4c28      	ldr	r4, [pc, #160]	; (800f588 <SX1276GetTimeOnAir+0x358>)
 800f4e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
            double tPayload = nPayload * ts;
 800f4ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f4ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f4f2:	f7f1 f809 	bl	8000508 <__aeabi_dmul>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800f4fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f506:	f7f0 fe49 	bl	800019c <__adddf3>
 800f50a:	4603      	mov	r3, r0
 800f50c:	460c      	mov	r4, r1
 800f50e:	e9c7 3402 	strd	r3, r4, [r7, #8]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800f512:	f04f 0200 	mov.w	r2, #0
 800f516:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <SX1276GetTimeOnAir+0x35c>)
 800f518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f51c:	f7f0 fff4 	bl	8000508 <__aeabi_dmul>
 800f520:	4603      	mov	r3, r0
 800f522:	460c      	mov	r4, r1
 800f524:	4618      	mov	r0, r3
 800f526:	4621      	mov	r1, r4
 800f528:	a313      	add	r3, pc, #76	; (adr r3, 800f578 <SX1276GetTimeOnAir+0x348>)
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	f7f0 fe35 	bl	800019c <__adddf3>
 800f532:	4603      	mov	r3, r0
 800f534:	460c      	mov	r4, r1
 800f536:	4618      	mov	r0, r3
 800f538:	4621      	mov	r1, r4
 800f53a:	f002 fe51 	bl	80121e0 <floor>
 800f53e:	4603      	mov	r3, r0
 800f540:	460c      	mov	r4, r1
 800f542:	4618      	mov	r0, r3
 800f544:	4621      	mov	r1, r4
 800f546:	f7f1 faa1 	bl	8000a8c <__aeabi_d2uiz>
 800f54a:	4603      	mov	r3, r0
 800f54c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800f54e:	bf00      	nop
    }
    return airTime;
 800f550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f552:	4618      	mov	r0, r3
 800f554:	3750      	adds	r7, #80	; 0x50
 800f556:	46bd      	mov	sp, r7
 800f558:	bdb0      	pop	{r4, r5, r7, pc}
 800f55a:	bf00      	nop
 800f55c:	f3af 8000 	nop.w
 800f560:	00000000 	.word	0x00000000
 800f564:	40fe8480 	.word	0x40fe8480
 800f568:	00000000 	.word	0x00000000
 800f56c:	410e8480 	.word	0x410e8480
 800f570:	00000000 	.word	0x00000000
 800f574:	411e8480 	.word	0x411e8480
 800f578:	d916872b 	.word	0xd916872b
 800f57c:	3feff7ce 	.word	0x3feff7ce
 800f580:	20000ed8 	.word	0x20000ed8
 800f584:	3ff00000 	.word	0x3ff00000
 800f588:	40200000 	.word	0x40200000
 800f58c:	408f4000 	.word	0x408f4000
 800f590:	40110000 	.word	0x40110000

0800f594 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800f5a4:	4b54      	ldr	r3, [pc, #336]	; (800f6f8 <SX1276Send+0x164>)
 800f5a6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d002      	beq.n	800f5b4 <SX1276Send+0x20>
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d04a      	beq.n	800f648 <SX1276Send+0xb4>
 800f5b2:	e09a      	b.n	800f6ea <SX1276Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f5b4:	4b50      	ldr	r3, [pc, #320]	; (800f6f8 <SX1276Send+0x164>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = size;
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	4b4d      	ldr	r3, [pc, #308]	; (800f6f8 <SX1276Send+0x164>)
 800f5c2:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

            if( SX1276.Settings.Fsk.FixLen == false )
 800f5c6:	4b4c      	ldr	r3, [pc, #304]	; (800f6f8 <SX1276Send+0x164>)
 800f5c8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f5cc:	f083 0301 	eor.w	r3, r3, #1
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800f5d6:	1cfb      	adds	r3, r7, #3
 800f5d8:	2101      	movs	r1, #1
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fd1c 	bl	8010018 <SX1276WriteFifo>
 800f5e0:	e004      	b.n	800f5ec <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800f5e2:	78fb      	ldrb	r3, [r7, #3]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	2032      	movs	r0, #50	; 0x32
 800f5e8:	f000 fc88 	bl	800fefc <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800f5ec:	78fb      	ldrb	r3, [r7, #3]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d007      	beq.n	800f602 <SX1276Send+0x6e>
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	2b40      	cmp	r3, #64	; 0x40
 800f5f6:	d804      	bhi.n	800f602 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800f5f8:	78fa      	ldrb	r2, [r7, #3]
 800f5fa:	4b3f      	ldr	r3, [pc, #252]	; (800f6f8 <SX1276Send+0x164>)
 800f5fc:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 800f600:	e00a      	b.n	800f618 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800f602:	78fb      	ldrb	r3, [r7, #3]
 800f604:	b29b      	uxth	r3, r3
 800f606:	461a      	mov	r2, r3
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	483c      	ldr	r0, [pc, #240]	; (800f6fc <SX1276Send+0x168>)
 800f60c:	f002 f88b 	bl	8011726 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800f610:	4b39      	ldr	r3, [pc, #228]	; (800f6f8 <SX1276Send+0x164>)
 800f612:	2220      	movs	r2, #32
 800f614:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800f618:	4b37      	ldr	r3, [pc, #220]	; (800f6f8 <SX1276Send+0x164>)
 800f61a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fcf9 	bl	8010018 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800f626:	4b34      	ldr	r3, [pc, #208]	; (800f6f8 <SX1276Send+0x164>)
 800f628:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800f62c:	4b32      	ldr	r3, [pc, #200]	; (800f6f8 <SX1276Send+0x164>)
 800f62e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800f632:	b29b      	uxth	r3, r3
 800f634:	4413      	add	r3, r2
 800f636:	b29a      	uxth	r2, r3
 800f638:	4b2f      	ldr	r3, [pc, #188]	; (800f6f8 <SX1276Send+0x164>)
 800f63a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800f63e:	4b2e      	ldr	r3, [pc, #184]	; (800f6f8 <SX1276Send+0x164>)
 800f640:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f644:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f646:	e050      	b.n	800f6ea <SX1276Send+0x156>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f648:	4b2b      	ldr	r3, [pc, #172]	; (800f6f8 <SX1276Send+0x164>)
 800f64a:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00f      	beq.n	800f672 <SX1276Send+0xde>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800f652:	2033      	movs	r0, #51	; 0x33
 800f654:	f000 fc64 	bl	800ff20 <SX1276Read>
 800f658:	4603      	mov	r3, r0
 800f65a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	4619      	mov	r1, r3
 800f662:	2033      	movs	r0, #51	; 0x33
 800f664:	f000 fc4a 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800f668:	2119      	movs	r1, #25
 800f66a:	203b      	movs	r0, #59	; 0x3b
 800f66c:	f000 fc46 	bl	800fefc <SX1276Write>
 800f670:	e013      	b.n	800f69a <SX1276Send+0x106>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800f672:	2033      	movs	r0, #51	; 0x33
 800f674:	f000 fc54 	bl	800ff20 <SX1276Read>
 800f678:	4603      	mov	r3, r0
 800f67a:	b25b      	sxtb	r3, r3
 800f67c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800f680:	b25b      	sxtb	r3, r3
 800f682:	f043 0301 	orr.w	r3, r3, #1
 800f686:	b25b      	sxtb	r3, r3
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	4619      	mov	r1, r3
 800f68c:	2033      	movs	r0, #51	; 0x33
 800f68e:	f000 fc35 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f692:	211d      	movs	r1, #29
 800f694:	203b      	movs	r0, #59	; 0x3b
 800f696:	f000 fc31 	bl	800fefc <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800f69a:	78fa      	ldrb	r2, [r7, #3]
 800f69c:	4b16      	ldr	r3, [pc, #88]	; (800f6f8 <SX1276Send+0x164>)
 800f69e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800f6a2:	78fb      	ldrb	r3, [r7, #3]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	2022      	movs	r0, #34	; 0x22
 800f6a8:	f000 fc28 	bl	800fefc <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	200e      	movs	r0, #14
 800f6b0:	f000 fc24 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	200d      	movs	r0, #13
 800f6b8:	f000 fc20 	bl	800fefc <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800f6bc:	2001      	movs	r0, #1
 800f6be:	f000 fc2f 	bl	800ff20 <SX1276Read>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d104      	bne.n	800f6d6 <SX1276Send+0x142>
            {
                SX1276SetStby( );
 800f6cc:	f000 f830 	bl	800f730 <SX1276SetStby>
                DelayMs( 1 );
 800f6d0:	2001      	movs	r0, #1
 800f6d2:	f7fc fcb6 	bl	800c042 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800f6d6:	78fb      	ldrb	r3, [r7, #3]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fc9c 	bl	8010018 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800f6e0:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <SX1276Send+0x164>)
 800f6e2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800f6e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f6e8:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f000 fa26 	bl	800fb3c <SX1276SetTx>
}
 800f6f0:	bf00      	nop
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	20000ed8 	.word	0x20000ed8
 800f6fc:	20000858 	.word	0x20000858

0800f700 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800f704:	4807      	ldr	r0, [pc, #28]	; (800f724 <SX1276SetSleep+0x24>)
 800f706:	f001 fba3 	bl	8010e50 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800f70a:	4807      	ldr	r0, [pc, #28]	; (800f728 <SX1276SetSleep+0x28>)
 800f70c:	f001 fba0 	bl	8010e50 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f710:	2000      	movs	r0, #0
 800f712:	f000 fb73 	bl	800fdfc <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800f716:	4b05      	ldr	r3, [pc, #20]	; (800f72c <SX1276SetSleep+0x2c>)
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800f71e:	bf00      	nop
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	20001018 	.word	0x20001018
 800f728:	20000eb0 	.word	0x20000eb0
 800f72c:	20000ed8 	.word	0x20000ed8

0800f730 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800f734:	4807      	ldr	r0, [pc, #28]	; (800f754 <SX1276SetStby+0x24>)
 800f736:	f001 fb8b 	bl	8010e50 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800f73a:	4807      	ldr	r0, [pc, #28]	; (800f758 <SX1276SetStby+0x28>)
 800f73c:	f001 fb88 	bl	8010e50 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800f740:	2001      	movs	r0, #1
 800f742:	f000 fb5b 	bl	800fdfc <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800f746:	4b05      	ldr	r3, [pc, #20]	; (800f75c <SX1276SetStby+0x2c>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800f74e:	bf00      	nop
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20001018 	.word	0x20001018
 800f758:	20000eb0 	.word	0x20000eb0
 800f75c:	20000ed8 	.word	0x20000ed8

0800f760 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800f768:	2300      	movs	r3, #0
 800f76a:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800f76c:	4bc4      	ldr	r3, [pc, #784]	; (800fa80 <SX1276SetRx+0x320>)
 800f76e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <SX1276SetRx+0x1c>
 800f776:	2b01      	cmp	r3, #1
 800f778:	d03e      	beq.n	800f7f8 <SX1276SetRx+0x98>
 800f77a:	e19b      	b.n	800fab4 <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800f77c:	4bc0      	ldr	r3, [pc, #768]	; (800fa80 <SX1276SetRx+0x320>)
 800f77e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f782:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f784:	2040      	movs	r0, #64	; 0x40
 800f786:	f000 fbcb 	bl	800ff20 <SX1276Read>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800f78e:	f003 0303 	and.w	r3, r3, #3
 800f792:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800f794:	f043 030c 	orr.w	r3, r3, #12
 800f798:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	4619      	mov	r1, r3
 800f79e:	2040      	movs	r0, #64	; 0x40
 800f7a0:	f000 fbac 	bl	800fefc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f7a4:	2041      	movs	r0, #65	; 0x41
 800f7a6:	f000 fbbb 	bl	800ff20 <SX1276Read>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	2041      	movs	r0, #65	; 0x41
 800f7b6:	f000 fba1 	bl	800fefc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f7ba:	2035      	movs	r0, #53	; 0x35
 800f7bc:	f000 fbb0 	bl	800ff20 <SX1276Read>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	4bad      	ldr	r3, [pc, #692]	; (800fa80 <SX1276SetRx+0x320>)
 800f7ca:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800f7ce:	211e      	movs	r1, #30
 800f7d0:	200d      	movs	r0, #13
 800f7d2:	f000 fb93 	bl	800fefc <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f7d6:	4baa      	ldr	r3, [pc, #680]	; (800fa80 <SX1276SetRx+0x320>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f7de:	4ba8      	ldr	r3, [pc, #672]	; (800fa80 <SX1276SetRx+0x320>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f7e6:	4ba6      	ldr	r3, [pc, #664]	; (800fa80 <SX1276SetRx+0x320>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f7ee:	4ba4      	ldr	r3, [pc, #656]	; (800fa80 <SX1276SetRx+0x320>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
        }
        break;
 800f7f6:	e15d      	b.n	800fab4 <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f7f8:	4ba1      	ldr	r3, [pc, #644]	; (800fa80 <SX1276SetRx+0x320>)
 800f7fa:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00f      	beq.n	800f822 <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800f802:	2033      	movs	r0, #51	; 0x33
 800f804:	f000 fb8c 	bl	800ff20 <SX1276Read>
 800f808:	4603      	mov	r3, r0
 800f80a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	4619      	mov	r1, r3
 800f812:	2033      	movs	r0, #51	; 0x33
 800f814:	f000 fb72 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800f818:	2119      	movs	r1, #25
 800f81a:	203b      	movs	r0, #59	; 0x3b
 800f81c:	f000 fb6e 	bl	800fefc <SX1276Write>
 800f820:	e013      	b.n	800f84a <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800f822:	2033      	movs	r0, #51	; 0x33
 800f824:	f000 fb7c 	bl	800ff20 <SX1276Read>
 800f828:	4603      	mov	r3, r0
 800f82a:	b25b      	sxtb	r3, r3
 800f82c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800f830:	b25b      	sxtb	r3, r3
 800f832:	f043 0301 	orr.w	r3, r3, #1
 800f836:	b25b      	sxtb	r3, r3
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	4619      	mov	r1, r3
 800f83c:	2033      	movs	r0, #51	; 0x33
 800f83e:	f000 fb5d 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f842:	211d      	movs	r1, #29
 800f844:	203b      	movs	r0, #59	; 0x3b
 800f846:	f000 fb59 	bl	800fefc <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800f84a:	4b8d      	ldr	r3, [pc, #564]	; (800fa80 <SX1276SetRx+0x320>)
 800f84c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f850:	2b08      	cmp	r3, #8
 800f852:	f200 80d7 	bhi.w	800fa04 <SX1276SetRx+0x2a4>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800f856:	2031      	movs	r0, #49	; 0x31
 800f858:	f000 fb62 	bl	800ff20 <SX1276Read>
 800f85c:	4603      	mov	r3, r0
 800f85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f862:	b2db      	uxtb	r3, r3
 800f864:	4619      	mov	r1, r3
 800f866:	2031      	movs	r0, #49	; 0x31
 800f868:	f000 fb48 	bl	800fefc <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800f86c:	2100      	movs	r1, #0
 800f86e:	2030      	movs	r0, #48	; 0x30
 800f870:	f000 fb44 	bl	800fefc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800f874:	4b82      	ldr	r3, [pc, #520]	; (800fa80 <SX1276SetRx+0x320>)
 800f876:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f87a:	2b08      	cmp	r3, #8
 800f87c:	f200 80cd 	bhi.w	800fa1a <SX1276SetRx+0x2ba>
 800f880:	a201      	add	r2, pc, #4	; (adr r2, 800f888 <SX1276SetRx+0x128>)
 800f882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f886:	bf00      	nop
 800f888:	0800f8ad 	.word	0x0800f8ad
 800f88c:	0800f8e1 	.word	0x0800f8e1
 800f890:	0800f915 	.word	0x0800f915
 800f894:	0800f949 	.word	0x0800f949
 800f898:	0800f97d 	.word	0x0800f97d
 800f89c:	0800f9b1 	.word	0x0800f9b1
 800f8a0:	0800f9e5 	.word	0x0800f9e5
 800f8a4:	0800f9ef 	.word	0x0800f9ef
 800f8a8:	0800f9f9 	.word	0x0800f9f9
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800f8ac:	2148      	movs	r1, #72	; 0x48
 800f8ae:	202f      	movs	r0, #47	; 0x2f
 800f8b0:	f000 fb24 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800f8b4:	4b72      	ldr	r3, [pc, #456]	; (800fa80 <SX1276SetRx+0x320>)
 800f8b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7f0 fdaa 	bl	8000414 <__aeabi_ui2d>
 800f8c0:	a363      	add	r3, pc, #396	; (adr r3, 800fa50 <SX1276SetRx+0x2f0>)
 800f8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c6:	f7f0 fc69 	bl	800019c <__adddf3>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	f7f1 f8db 	bl	8000a8c <__aeabi_d2uiz>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe ffa9 	bl	800e830 <SX1276SetChannel>
                    break;
 800f8de:	e09c      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f8e0:	2144      	movs	r1, #68	; 0x44
 800f8e2:	202f      	movs	r0, #47	; 0x2f
 800f8e4:	f000 fb0a 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800f8e8:	4b65      	ldr	r3, [pc, #404]	; (800fa80 <SX1276SetRx+0x320>)
 800f8ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7f0 fd90 	bl	8000414 <__aeabi_ui2d>
 800f8f4:	a358      	add	r3, pc, #352	; (adr r3, 800fa58 <SX1276SetRx+0x2f8>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fc4f 	bl	800019c <__adddf3>
 800f8fe:	4603      	mov	r3, r0
 800f900:	460c      	mov	r4, r1
 800f902:	4618      	mov	r0, r3
 800f904:	4621      	mov	r1, r4
 800f906:	f7f1 f8c1 	bl	8000a8c <__aeabi_d2uiz>
 800f90a:	4603      	mov	r3, r0
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe ff8f 	bl	800e830 <SX1276SetChannel>
                    break;
 800f912:	e082      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f914:	2144      	movs	r1, #68	; 0x44
 800f916:	202f      	movs	r0, #47	; 0x2f
 800f918:	f000 faf0 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800f91c:	4b58      	ldr	r3, [pc, #352]	; (800fa80 <SX1276SetRx+0x320>)
 800f91e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f922:	4618      	mov	r0, r3
 800f924:	f7f0 fd76 	bl	8000414 <__aeabi_ui2d>
 800f928:	a34d      	add	r3, pc, #308	; (adr r3, 800fa60 <SX1276SetRx+0x300>)
 800f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92e:	f7f0 fc35 	bl	800019c <__adddf3>
 800f932:	4603      	mov	r3, r0
 800f934:	460c      	mov	r4, r1
 800f936:	4618      	mov	r0, r3
 800f938:	4621      	mov	r1, r4
 800f93a:	f7f1 f8a7 	bl	8000a8c <__aeabi_d2uiz>
 800f93e:	4603      	mov	r3, r0
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe ff75 	bl	800e830 <SX1276SetChannel>
                    break;
 800f946:	e068      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f948:	2144      	movs	r1, #68	; 0x44
 800f94a:	202f      	movs	r0, #47	; 0x2f
 800f94c:	f000 fad6 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800f950:	4b4b      	ldr	r3, [pc, #300]	; (800fa80 <SX1276SetRx+0x320>)
 800f952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f956:	4618      	mov	r0, r3
 800f958:	f7f0 fd5c 	bl	8000414 <__aeabi_ui2d>
 800f95c:	a342      	add	r3, pc, #264	; (adr r3, 800fa68 <SX1276SetRx+0x308>)
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	f7f0 fc1b 	bl	800019c <__adddf3>
 800f966:	4603      	mov	r3, r0
 800f968:	460c      	mov	r4, r1
 800f96a:	4618      	mov	r0, r3
 800f96c:	4621      	mov	r1, r4
 800f96e:	f7f1 f88d 	bl	8000a8c <__aeabi_d2uiz>
 800f972:	4603      	mov	r3, r0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe ff5b 	bl	800e830 <SX1276SetChannel>
                    break;
 800f97a:	e04e      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f97c:	2144      	movs	r1, #68	; 0x44
 800f97e:	202f      	movs	r0, #47	; 0x2f
 800f980:	f000 fabc 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800f984:	4b3e      	ldr	r3, [pc, #248]	; (800fa80 <SX1276SetRx+0x320>)
 800f986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7f0 fd42 	bl	8000414 <__aeabi_ui2d>
 800f990:	a337      	add	r3, pc, #220	; (adr r3, 800fa70 <SX1276SetRx+0x310>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f0 fc01 	bl	800019c <__adddf3>
 800f99a:	4603      	mov	r3, r0
 800f99c:	460c      	mov	r4, r1
 800f99e:	4618      	mov	r0, r3
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	f7f1 f873 	bl	8000a8c <__aeabi_d2uiz>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe ff41 	bl	800e830 <SX1276SetChannel>
                    break;
 800f9ae:	e034      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f9b0:	2144      	movs	r1, #68	; 0x44
 800f9b2:	202f      	movs	r0, #47	; 0x2f
 800f9b4:	f000 faa2 	bl	800fefc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800f9b8:	4b31      	ldr	r3, [pc, #196]	; (800fa80 <SX1276SetRx+0x320>)
 800f9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7f0 fd28 	bl	8000414 <__aeabi_ui2d>
 800f9c4:	a32c      	add	r3, pc, #176	; (adr r3, 800fa78 <SX1276SetRx+0x318>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fbe7 	bl	800019c <__adddf3>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	f7f1 f859 	bl	8000a8c <__aeabi_d2uiz>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe ff27 	bl	800e830 <SX1276SetChannel>
                    break;
 800f9e2:	e01a      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f9e4:	2140      	movs	r1, #64	; 0x40
 800f9e6:	202f      	movs	r0, #47	; 0x2f
 800f9e8:	f000 fa88 	bl	800fefc <SX1276Write>
                    break;
 800f9ec:	e015      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f9ee:	2140      	movs	r1, #64	; 0x40
 800f9f0:	202f      	movs	r0, #47	; 0x2f
 800f9f2:	f000 fa83 	bl	800fefc <SX1276Write>
                    break;
 800f9f6:	e010      	b.n	800fa1a <SX1276SetRx+0x2ba>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f9f8:	2140      	movs	r1, #64	; 0x40
 800f9fa:	202f      	movs	r0, #47	; 0x2f
 800f9fc:	f000 fa7e 	bl	800fefc <SX1276Write>
                    break;
 800fa00:	bf00      	nop
 800fa02:	e00a      	b.n	800fa1a <SX1276SetRx+0x2ba>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800fa04:	2031      	movs	r0, #49	; 0x31
 800fa06:	f000 fa8b 	bl	800ff20 <SX1276Read>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	4619      	mov	r1, r3
 800fa14:	2031      	movs	r0, #49	; 0x31
 800fa16:	f000 fa71 	bl	800fefc <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800fa1a:	4b19      	ldr	r3, [pc, #100]	; (800fa80 <SX1276SetRx+0x320>)
 800fa1c:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800fa20:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fa22:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <SX1276SetRx+0x320>)
 800fa24:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d02b      	beq.n	800fa84 <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800fa2c:	211d      	movs	r1, #29
 800fa2e:	2011      	movs	r0, #17
 800fa30:	f000 fa64 	bl	800fefc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800fa34:	2040      	movs	r0, #64	; 0x40
 800fa36:	f000 fa73 	bl	800ff20 <SX1276Read>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	4619      	mov	r1, r3
 800fa44:	2040      	movs	r0, #64	; 0x40
 800fa46:	f000 fa59 	bl	800fefc <SX1276Write>
 800fa4a:	e02a      	b.n	800faa2 <SX1276SetRx+0x342>
 800fa4c:	f3af 8000 	nop.w
 800fa50:	00000000 	.word	0x00000000
 800fa54:	40be8200 	.word	0x40be8200
 800fa58:	00000000 	.word	0x00000000
 800fa5c:	40c45a00 	.word	0x40c45a00
 800fa60:	00000000 	.word	0x00000000
 800fa64:	40ce8200 	.word	0x40ce8200
 800fa68:	00000000 	.word	0x00000000
 800fa6c:	40d45780 	.word	0x40d45780
 800fa70:	00000000 	.word	0x00000000
 800fa74:	40de8480 	.word	0x40de8480
 800fa78:	00000000 	.word	0x00000000
 800fa7c:	40e458c0 	.word	0x40e458c0
 800fa80:	20000ed8 	.word	0x20000ed8
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800fa84:	211f      	movs	r1, #31
 800fa86:	2011      	movs	r0, #17
 800fa88:	f000 fa38 	bl	800fefc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800fa8c:	2040      	movs	r0, #64	; 0x40
 800fa8e:	f000 fa47 	bl	800ff20 <SX1276Read>
 800fa92:	4603      	mov	r3, r0
 800fa94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	2040      	movs	r0, #64	; 0x40
 800fa9e:	f000 fa2d 	bl	800fefc <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800faa2:	2100      	movs	r1, #0
 800faa4:	200f      	movs	r0, #15
 800faa6:	f000 fa29 	bl	800fefc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800faaa:	2100      	movs	r1, #0
 800faac:	200d      	movs	r0, #13
 800faae:	f000 fa25 	bl	800fefc <SX1276Write>
        }
        break;
 800fab2:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800fab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fab8:	2100      	movs	r1, #0
 800faba:	481c      	ldr	r0, [pc, #112]	; (800fb2c <SX1276SetRx+0x3cc>)
 800fabc:	f001 fed4 	bl	8011868 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800fac0:	4b1b      	ldr	r3, [pc, #108]	; (800fb30 <SX1276SetRx+0x3d0>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    if( timeout != 0 )
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d006      	beq.n	800fadc <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	4818      	ldr	r0, [pc, #96]	; (800fb34 <SX1276SetRx+0x3d4>)
 800fad2:	f001 fa79 	bl	8010fc8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800fad6:	4817      	ldr	r0, [pc, #92]	; (800fb34 <SX1276SetRx+0x3d4>)
 800fad8:	f001 f872 	bl	8010bc0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800fadc:	4b14      	ldr	r3, [pc, #80]	; (800fb30 <SX1276SetRx+0x3d0>)
 800fade:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d113      	bne.n	800fb0e <SX1276SetRx+0x3ae>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800fae6:	2005      	movs	r0, #5
 800fae8:	f000 f988 	bl	800fdfc <SX1276SetOpMode>

        if( rxContinuous == false )
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	f083 0301 	eor.w	r3, r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d014      	beq.n	800fb22 <SX1276SetRx+0x3c2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800faf8:	4b0d      	ldr	r3, [pc, #52]	; (800fb30 <SX1276SetRx+0x3d0>)
 800fafa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fafe:	4619      	mov	r1, r3
 800fb00:	480d      	ldr	r0, [pc, #52]	; (800fb38 <SX1276SetRx+0x3d8>)
 800fb02:	f001 fa61 	bl	8010fc8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800fb06:	480c      	ldr	r0, [pc, #48]	; (800fb38 <SX1276SetRx+0x3d8>)
 800fb08:	f001 f85a 	bl	8010bc0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800fb0c:	e009      	b.n	800fb22 <SX1276SetRx+0x3c2>
        if( rxContinuous == true )
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d003      	beq.n	800fb1c <SX1276SetRx+0x3bc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800fb14:	2005      	movs	r0, #5
 800fb16:	f000 f971 	bl	800fdfc <SX1276SetOpMode>
}
 800fb1a:	e002      	b.n	800fb22 <SX1276SetRx+0x3c2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800fb1c:	2006      	movs	r0, #6
 800fb1e:	f000 f96d 	bl	800fdfc <SX1276SetOpMode>
}
 800fb22:	bf00      	nop
 800fb24:	3714      	adds	r7, #20
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd90      	pop	{r4, r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20000858 	.word	0x20000858
 800fb30:	20000ed8 	.word	0x20000ed8
 800fb34:	20001018 	.word	0x20001018
 800fb38:	20000ec4 	.word	0x20000ec4

0800fb3c <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800fb44:	6879      	ldr	r1, [r7, #4]
 800fb46:	4837      	ldr	r0, [pc, #220]	; (800fc24 <SX1276SetTx+0xe8>)
 800fb48:	f001 fa3e 	bl	8010fc8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800fb4c:	4b36      	ldr	r3, [pc, #216]	; (800fc28 <SX1276SetTx+0xec>)
 800fb4e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d002      	beq.n	800fb5c <SX1276SetTx+0x20>
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d026      	beq.n	800fba8 <SX1276SetTx+0x6c>
 800fb5a:	e054      	b.n	800fc06 <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800fb5c:	2040      	movs	r0, #64	; 0x40
 800fb5e:	f000 f9df 	bl	800ff20 <SX1276Read>
 800fb62:	4603      	mov	r3, r0
 800fb64:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800fb66:	f003 0303 	and.w	r3, r3, #3
 800fb6a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800fb6c:	f043 0310 	orr.w	r3, r3, #16
 800fb70:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	4619      	mov	r1, r3
 800fb76:	2040      	movs	r0, #64	; 0x40
 800fb78:	f000 f9c0 	bl	800fefc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800fb7c:	2041      	movs	r0, #65	; 0x41
 800fb7e:	f000 f9cf 	bl	800ff20 <SX1276Read>
 800fb82:	4603      	mov	r3, r0
 800fb84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	2041      	movs	r0, #65	; 0x41
 800fb8e:	f000 f9b5 	bl	800fefc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800fb92:	2035      	movs	r0, #53	; 0x35
 800fb94:	f000 f9c4 	bl	800ff20 <SX1276Read>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	4b21      	ldr	r3, [pc, #132]	; (800fc28 <SX1276SetTx+0xec>)
 800fba2:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
        }
        break;
 800fba6:	e02e      	b.n	800fc06 <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fba8:	4b1f      	ldr	r3, [pc, #124]	; (800fc28 <SX1276SetTx+0xec>)
 800fbaa:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d014      	beq.n	800fbdc <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800fbb2:	21f5      	movs	r1, #245	; 0xf5
 800fbb4:	2011      	movs	r0, #17
 800fbb6:	f000 f9a1 	bl	800fefc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800fbba:	2040      	movs	r0, #64	; 0x40
 800fbbc:	f000 f9b0 	bl	800ff20 <SX1276Read>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b25b      	sxtb	r3, r3
 800fbc4:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800fbc8:	b25b      	sxtb	r3, r3
 800fbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbce:	b25b      	sxtb	r3, r3
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	2040      	movs	r0, #64	; 0x40
 800fbd6:	f000 f991 	bl	800fefc <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800fbda:	e013      	b.n	800fc04 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800fbdc:	21f7      	movs	r1, #247	; 0xf7
 800fbde:	2011      	movs	r0, #17
 800fbe0:	f000 f98c 	bl	800fefc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800fbe4:	2040      	movs	r0, #64	; 0x40
 800fbe6:	f000 f99b 	bl	800ff20 <SX1276Read>
 800fbea:	4603      	mov	r3, r0
 800fbec:	b25b      	sxtb	r3, r3
 800fbee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbf2:	b25b      	sxtb	r3, r3
 800fbf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf8:	b25b      	sxtb	r3, r3
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	2040      	movs	r0, #64	; 0x40
 800fc00:	f000 f97c 	bl	800fefc <SX1276Write>
        break;
 800fc04:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800fc06:	4b08      	ldr	r3, [pc, #32]	; (800fc28 <SX1276SetTx+0xec>)
 800fc08:	2202      	movs	r2, #2
 800fc0a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800fc0e:	4805      	ldr	r0, [pc, #20]	; (800fc24 <SX1276SetTx+0xe8>)
 800fc10:	f000 ffd6 	bl	8010bc0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800fc14:	2003      	movs	r0, #3
 800fc16:	f000 f8f1 	bl	800fdfc <SX1276SetOpMode>
}
 800fc1a:	bf00      	nop
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20000eb0 	.word	0x20000eb0
 800fc28:	20000ed8 	.word	0x20000ed8

0800fc2c <SX1276StartCad>:

void SX1276StartCad( void )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800fc30:	4b10      	ldr	r3, [pc, #64]	; (800fc74 <SX1276StartCad+0x48>)
 800fc32:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d019      	beq.n	800fc6e <SX1276StartCad+0x42>
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d000      	beq.n	800fc40 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800fc3e:	e017      	b.n	800fc70 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800fc40:	21fa      	movs	r1, #250	; 0xfa
 800fc42:	2011      	movs	r0, #17
 800fc44:	f000 f95a 	bl	800fefc <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800fc48:	2040      	movs	r0, #64	; 0x40
 800fc4a:	f000 f969 	bl	800ff20 <SX1276Read>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f023 0303 	bic.w	r3, r3, #3
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	4619      	mov	r1, r3
 800fc58:	2040      	movs	r0, #64	; 0x40
 800fc5a:	f000 f94f 	bl	800fefc <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800fc5e:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <SX1276StartCad+0x48>)
 800fc60:	2203      	movs	r2, #3
 800fc62:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800fc66:	2007      	movs	r0, #7
 800fc68:	f000 f8c8 	bl	800fdfc <SX1276SetOpMode>
        break;
 800fc6c:	e000      	b.n	800fc70 <SX1276StartCad+0x44>
        break;
 800fc6e:	bf00      	nop
    }
}
 800fc70:	bf00      	nop
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20000ed8 	.word	0x20000ed8

0800fc78 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b08f      	sub	sp, #60	; 0x3c
 800fc7c:	af0a      	add	r7, sp, #40	; 0x28
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
 800fc84:	4613      	mov	r3, r2
 800fc86:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800fc88:	883b      	ldrh	r3, [r7, #0]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f0 fbd2 	bl	8000434 <__aeabi_i2d>
 800fc90:	f04f 0200 	mov.w	r2, #0
 800fc94:	4b26      	ldr	r3, [pc, #152]	; (800fd30 <SX1276SetTxContinuousWave+0xb8>)
 800fc96:	f7f0 fc37 	bl	8000508 <__aeabi_dmul>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	460c      	mov	r4, r1
 800fc9e:	4618      	mov	r0, r3
 800fca0:	4621      	mov	r1, r4
 800fca2:	f7f0 fef3 	bl	8000a8c <__aeabi_d2uiz>
 800fca6:	4603      	mov	r3, r0
 800fca8:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7fe fdc0 	bl	800e830 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800fcb0:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	9308      	str	r3, [sp, #32]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9307      	str	r3, [sp, #28]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9306      	str	r3, [sp, #24]
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	9305      	str	r3, [sp, #20]
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	9304      	str	r3, [sp, #16]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	2305      	movs	r3, #5
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2000      	movs	r0, #0
 800fce0:	f7ff f8f2 	bl	800eec8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800fce4:	2031      	movs	r0, #49	; 0x31
 800fce6:	f000 f91b 	bl	800ff20 <SX1276Read>
 800fcea:	4603      	mov	r3, r0
 800fcec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	2031      	movs	r0, #49	; 0x31
 800fcf6:	f000 f901 	bl	800fefc <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800fcfa:	21f0      	movs	r1, #240	; 0xf0
 800fcfc:	2040      	movs	r0, #64	; 0x40
 800fcfe:	f000 f8fd 	bl	800fefc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800fd02:	21a0      	movs	r1, #160	; 0xa0
 800fd04:	2041      	movs	r0, #65	; 0x41
 800fd06:	f000 f8f9 	bl	800fefc <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800fd0a:	68f9      	ldr	r1, [r7, #12]
 800fd0c:	4809      	ldr	r0, [pc, #36]	; (800fd34 <SX1276SetTxContinuousWave+0xbc>)
 800fd0e:	f001 f95b 	bl	8010fc8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <SX1276SetTxContinuousWave+0xc0>)
 800fd14:	2202      	movs	r2, #2
 800fd16:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800fd1a:	4806      	ldr	r0, [pc, #24]	; (800fd34 <SX1276SetTxContinuousWave+0xbc>)
 800fd1c:	f000 ff50 	bl	8010bc0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800fd20:	2003      	movs	r0, #3
 800fd22:	f000 f86b 	bl	800fdfc <SX1276SetOpMode>
}
 800fd26:	bf00      	nop
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd90      	pop	{r4, r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	408f4000 	.word	0x408f4000
 800fd34:	20000eb0 	.word	0x20000eb0
 800fd38:	20000ed8 	.word	0x20000ed8

0800fd3c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800fd4a:	79fb      	ldrb	r3, [r7, #7]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SX1276ReadRssi+0x1a>
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d00b      	beq.n	800fd6c <SX1276ReadRssi+0x30>
 800fd54:	e022      	b.n	800fd9c <SX1276ReadRssi+0x60>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800fd56:	2011      	movs	r0, #17
 800fd58:	f000 f8e2 	bl	800ff20 <SX1276Read>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	085b      	lsrs	r3, r3, #1
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	425b      	negs	r3, r3
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	81fb      	strh	r3, [r7, #14]
        break;
 800fd6a:	e01b      	b.n	800fda4 <SX1276ReadRssi+0x68>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fd6c:	4b10      	ldr	r3, [pc, #64]	; (800fdb0 <SX1276ReadRssi+0x74>)
 800fd6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd72:	4a10      	ldr	r2, [pc, #64]	; (800fdb4 <SX1276ReadRssi+0x78>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d908      	bls.n	800fd8a <SX1276ReadRssi+0x4e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800fd78:	201b      	movs	r0, #27
 800fd7a:	f000 f8d1 	bl	800ff20 <SX1276Read>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	3b9d      	subs	r3, #157	; 0x9d
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800fd88:	e00c      	b.n	800fda4 <SX1276ReadRssi+0x68>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800fd8a:	201b      	movs	r0, #27
 800fd8c:	f000 f8c8 	bl	800ff20 <SX1276Read>
 800fd90:	4603      	mov	r3, r0
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	3ba4      	subs	r3, #164	; 0xa4
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	81fb      	strh	r3, [r7, #14]
        break;
 800fd9a:	e003      	b.n	800fda4 <SX1276ReadRssi+0x68>
    default:
        rssi = -1;
 800fd9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fda0:	81fb      	strh	r3, [r7, #14]
        break;
 800fda2:	bf00      	nop
    }
    return rssi;
 800fda4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20000ed8 	.word	0x20000ed8
 800fdb4:	1f4add40 	.word	0x1f4add40

0800fdb8 <SX1276Reset>:

void SX1276Reset( void )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	2201      	movs	r2, #1
 800fdca:	2103      	movs	r1, #3
 800fdcc:	480a      	ldr	r0, [pc, #40]	; (800fdf8 <SX1276Reset+0x40>)
 800fdce:	f7fc fbfd 	bl	800c5cc <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	f7fc f935 	bl	800c042 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800fdd8:	2301      	movs	r3, #1
 800fdda:	9301      	str	r3, [sp, #4]
 800fddc:	2300      	movs	r3, #0
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	2300      	movs	r3, #0
 800fde2:	2200      	movs	r2, #0
 800fde4:	2103      	movs	r1, #3
 800fde6:	4804      	ldr	r0, [pc, #16]	; (800fdf8 <SX1276Reset+0x40>)
 800fde8:	f7fc fbf0 	bl	800c5cc <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800fdec:	2006      	movs	r0, #6
 800fdee:	f7fc f928 	bl	800c042 <DelayMs>
}
 800fdf2:	bf00      	nop
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	20000ed8 	.word	0x20000ed8

0800fdfc <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4603      	mov	r3, r0
 800fe04:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800fe06:	79fb      	ldrb	r3, [r7, #7]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d103      	bne.n	800fe14 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800fe0c:	2001      	movs	r0, #1
 800fe0e:	f7fe fc61 	bl	800e6d4 <SX1276SetAntSwLowPower>
 800fe12:	e006      	b.n	800fe22 <SX1276SetOpMode+0x26>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800fe14:	2000      	movs	r0, #0
 800fe16:	f7fe fc5d 	bl	800e6d4 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800fe1a:	79fb      	ldrb	r3, [r7, #7]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe fc83 	bl	800e728 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800fe22:	2001      	movs	r0, #1
 800fe24:	f000 f87c 	bl	800ff20 <SX1276Read>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	b25b      	sxtb	r3, r3
 800fe2c:	f023 0307 	bic.w	r3, r3, #7
 800fe30:	b25a      	sxtb	r2, r3
 800fe32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	b25b      	sxtb	r3, r3
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	2001      	movs	r0, #1
 800fe40:	f000 f85c 	bl	800fefc <SX1276Write>
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	4603      	mov	r3, r0
 800fe54:	71fb      	strb	r3, [r7, #7]
    assert_param( ( SX1276.Spi.Spi.Instance != NULL ) );

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800fe56:	2001      	movs	r0, #1
 800fe58:	f000 f862 	bl	800ff20 <SX1276Read>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	b25b      	sxtb	r3, r3
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	da04      	bge.n	800fe6e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 800fe64:	4b24      	ldr	r3, [pc, #144]	; (800fef8 <SX1276SetModem+0xac>)
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800fe6c:	e003      	b.n	800fe76 <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800fe6e:	4b22      	ldr	r3, [pc, #136]	; (800fef8 <SX1276SetModem+0xac>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    }

    if( SX1276.Settings.Modem == modem )
 800fe76:	4b20      	ldr	r3, [pc, #128]	; (800fef8 <SX1276SetModem+0xac>)
 800fe78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fe7c:	79fa      	ldrb	r2, [r7, #7]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d035      	beq.n	800feee <SX1276SetModem+0xa2>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 800fe82:	4a1d      	ldr	r2, [pc, #116]	; (800fef8 <SX1276SetModem+0xac>)
 800fe84:	79fb      	ldrb	r3, [r7, #7]
 800fe86:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    switch( SX1276.Settings.Modem )
 800fe8a:	4b1b      	ldr	r3, [pc, #108]	; (800fef8 <SX1276SetModem+0xac>)
 800fe8c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d015      	beq.n	800fec0 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800fe94:	f7ff fc34 	bl	800f700 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800fe98:	2001      	movs	r0, #1
 800fe9a:	f000 f841 	bl	800ff20 <SX1276Read>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	4619      	mov	r1, r3
 800fea8:	2001      	movs	r0, #1
 800feaa:	f000 f827 	bl	800fefc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800feae:	2100      	movs	r1, #0
 800feb0:	2040      	movs	r0, #64	; 0x40
 800feb2:	f000 f823 	bl	800fefc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800feb6:	2130      	movs	r1, #48	; 0x30
 800feb8:	2041      	movs	r0, #65	; 0x41
 800feba:	f000 f81f 	bl	800fefc <SX1276Write>
        break;
 800febe:	e017      	b.n	800fef0 <SX1276SetModem+0xa4>
    case MODEM_LORA:
        SX1276SetSleep( );
 800fec0:	f7ff fc1e 	bl	800f700 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800fec4:	2001      	movs	r0, #1
 800fec6:	f000 f82b 	bl	800ff20 <SX1276Read>
 800feca:	4603      	mov	r3, r0
 800fecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	4619      	mov	r1, r3
 800fed4:	2001      	movs	r0, #1
 800fed6:	f000 f811 	bl	800fefc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800feda:	2100      	movs	r1, #0
 800fedc:	2040      	movs	r0, #64	; 0x40
 800fede:	f000 f80d 	bl	800fefc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800fee2:	2100      	movs	r1, #0
 800fee4:	2041      	movs	r0, #65	; 0x41
 800fee6:	f000 f809 	bl	800fefc <SX1276Write>
        break;
 800feea:	bf00      	nop
 800feec:	e000      	b.n	800fef0 <SX1276SetModem+0xa4>
        return;
 800feee:	bf00      	nop
    }
}
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	20000ed8 	.word	0x20000ed8

0800fefc <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	460a      	mov	r2, r1
 800ff06:	71fb      	strb	r3, [r7, #7]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800ff0c:	1db9      	adds	r1, r7, #6
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	2201      	movs	r2, #1
 800ff12:	4618      	mov	r0, r3
 800ff14:	f000 f816 	bl	800ff44 <SX1276WriteBuffer>
}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800ff2a:	f107 010f 	add.w	r1, r7, #15
 800ff2e:	79fb      	ldrb	r3, [r7, #7]
 800ff30:	2201      	movs	r2, #1
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 f83a 	bl	800ffac <SX1276ReadBuffer>
    return data;
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	6039      	str	r1, [r7, #0]
 800ff4e:	71fb      	strb	r3, [r7, #7]
 800ff50:	4613      	mov	r3, r2
 800ff52:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800ff54:	2100      	movs	r1, #0
 800ff56:	4813      	ldr	r0, [pc, #76]	; (800ffa4 <SX1276WriteBuffer+0x60>)
 800ff58:	f7fc fb77 	bl	800c64a <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 800ff5c:	79fb      	ldrb	r3, [r7, #7]
 800ff5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	4619      	mov	r1, r3
 800ff68:	480f      	ldr	r0, [pc, #60]	; (800ffa8 <SX1276WriteBuffer+0x64>)
 800ff6a:	f7fe f8c9 	bl	800e100 <SpiInOut>
    for( i = 0; i < size; i++ )
 800ff6e:	2300      	movs	r3, #0
 800ff70:	73fb      	strb	r3, [r7, #15]
 800ff72:	e00b      	b.n	800ff8c <SX1276WriteBuffer+0x48>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 800ff74:	7bfb      	ldrb	r3, [r7, #15]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	4413      	add	r3, r2
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4809      	ldr	r0, [pc, #36]	; (800ffa8 <SX1276WriteBuffer+0x64>)
 800ff82:	f7fe f8bd 	bl	800e100 <SpiInOut>
    for( i = 0; i < size; i++ )
 800ff86:	7bfb      	ldrb	r3, [r7, #15]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	73fb      	strb	r3, [r7, #15]
 800ff8c:	7bfa      	ldrb	r2, [r7, #15]
 800ff8e:	79bb      	ldrb	r3, [r7, #6]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d3ef      	bcc.n	800ff74 <SX1276WriteBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800ff94:	2101      	movs	r1, #1
 800ff96:	4803      	ldr	r0, [pc, #12]	; (800ffa4 <SX1276WriteBuffer+0x60>)
 800ff98:	f7fc fb57 	bl	800c64a <GpioWrite>
}
 800ff9c:	bf00      	nop
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	20000fa8 	.word	0x20000fa8
 800ffa8:	20000f2c 	.word	0x20000f2c

0800ffac <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	4814      	ldr	r0, [pc, #80]	; (8010010 <SX1276ReadBuffer+0x64>)
 800ffc0:	f7fc fb43 	bl	800c64a <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 800ffc4:	79fb      	ldrb	r3, [r7, #7]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	4619      	mov	r1, r3
 800ffd0:	4810      	ldr	r0, [pc, #64]	; (8010014 <SX1276ReadBuffer+0x68>)
 800ffd2:	f7fe f895 	bl	800e100 <SpiInOut>

    for( i = 0; i < size; i++ )
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
 800ffda:	e00d      	b.n	800fff8 <SX1276ReadBuffer+0x4c>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 800ffdc:	2100      	movs	r1, #0
 800ffde:	480d      	ldr	r0, [pc, #52]	; (8010014 <SX1276ReadBuffer+0x68>)
 800ffe0:	f7fe f88e 	bl	800e100 <SpiInOut>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	7bfb      	ldrb	r3, [r7, #15]
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	4413      	add	r3, r2
 800ffee:	b2ca      	uxtb	r2, r1
 800fff0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800fff2:	7bfb      	ldrb	r3, [r7, #15]
 800fff4:	3301      	adds	r3, #1
 800fff6:	73fb      	strb	r3, [r7, #15]
 800fff8:	7bfa      	ldrb	r2, [r7, #15]
 800fffa:	79bb      	ldrb	r3, [r7, #6]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d3ed      	bcc.n	800ffdc <SX1276ReadBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8010000:	2101      	movs	r1, #1
 8010002:	4803      	ldr	r0, [pc, #12]	; (8010010 <SX1276ReadBuffer+0x64>)
 8010004:	f7fc fb21 	bl	800c64a <GpioWrite>
}
 8010008:	bf00      	nop
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	20000fa8 	.word	0x20000fa8
 8010014:	20000f2c 	.word	0x20000f2c

08010018 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8010024:	78fb      	ldrb	r3, [r7, #3]
 8010026:	461a      	mov	r2, r3
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	2000      	movs	r0, #0
 801002c:	f7ff ff8a 	bl	800ff44 <SX1276WriteBuffer>
}
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	460b      	mov	r3, r1
 8010042:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8010044:	78fb      	ldrb	r3, [r7, #3]
 8010046:	461a      	mov	r2, r3
 8010048:	6879      	ldr	r1, [r7, #4]
 801004a:	2000      	movs	r0, #0
 801004c:	f7ff ffae 	bl	800ffac <SX1276ReadBuffer>
}
 8010050:	bf00      	nop
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	460a      	mov	r2, r1
 8010062:	71fb      	strb	r3, [r7, #7]
 8010064:	4613      	mov	r3, r2
 8010066:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	4618      	mov	r0, r3
 801006c:	f7ff feee 	bl	800fe4c <SX1276SetModem>

    switch( modem )
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d002      	beq.n	801007c <SX1276SetMaxPayloadLength+0x24>
 8010076:	2b01      	cmp	r3, #1
 8010078:	d00e      	beq.n	8010098 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801007a:	e014      	b.n	80100a6 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 801007c:	4b0c      	ldr	r3, [pc, #48]	; (80100b0 <SX1276SetMaxPayloadLength+0x58>)
 801007e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8010082:	f083 0301 	eor.w	r3, r3, #1
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00b      	beq.n	80100a4 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801008c:	79bb      	ldrb	r3, [r7, #6]
 801008e:	4619      	mov	r1, r3
 8010090:	2032      	movs	r0, #50	; 0x32
 8010092:	f7ff ff33 	bl	800fefc <SX1276Write>
        break;
 8010096:	e005      	b.n	80100a4 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8010098:	79bb      	ldrb	r3, [r7, #6]
 801009a:	4619      	mov	r1, r3
 801009c:	2023      	movs	r0, #35	; 0x23
 801009e:	f7ff ff2d 	bl	800fefc <SX1276Write>
        break;
 80100a2:	e000      	b.n	80100a6 <SX1276SetMaxPayloadLength+0x4e>
        break;
 80100a4:	bf00      	nop
}
 80100a6:	bf00      	nop
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20000ed8 	.word	0x20000ed8

080100b4 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 80100be:	2001      	movs	r0, #1
 80100c0:	f7ff fec4 	bl	800fe4c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80100c4:	4a09      	ldr	r2, [pc, #36]	; (80100ec <SX1276SetPublicNetwork+0x38>)
 80100c6:	79fb      	ldrb	r3, [r7, #7]
 80100c8:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
    if( enable == true )
 80100cc:	79fb      	ldrb	r3, [r7, #7]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d004      	beq.n	80100dc <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80100d2:	2134      	movs	r1, #52	; 0x34
 80100d4:	2039      	movs	r0, #57	; 0x39
 80100d6:	f7ff ff11 	bl	800fefc <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80100da:	e003      	b.n	80100e4 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80100dc:	2112      	movs	r1, #18
 80100de:	2039      	movs	r0, #57	; 0x39
 80100e0:	f7ff ff0c 	bl	800fefc <SX1276Write>
}
 80100e4:	bf00      	nop
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	20000ed8 	.word	0x20000ed8

080100f0 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 80100f6:	4b4e      	ldr	r3, [pc, #312]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 80100f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d002      	beq.n	8010106 <SX1276OnTimeoutIrq+0x16>
 8010100:	2b02      	cmp	r3, #2
 8010102:	d046      	beq.n	8010192 <SX1276OnTimeoutIrq+0xa2>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8010104:	e090      	b.n	8010228 <SX1276OnTimeoutIrq+0x138>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8010106:	4b4a      	ldr	r3, [pc, #296]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 8010108:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 801010c:	2b00      	cmp	r3, #0
 801010e:	d132      	bne.n	8010176 <SX1276OnTimeoutIrq+0x86>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8010110:	4b47      	ldr	r3, [pc, #284]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8010118:	4b45      	ldr	r3, [pc, #276]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 801011a:	2200      	movs	r2, #0
 801011c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8010120:	4b43      	ldr	r3, [pc, #268]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 8010122:	2200      	movs	r2, #0
 8010124:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 8010128:	4b41      	ldr	r3, [pc, #260]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 801012a:	2200      	movs	r2, #0
 801012c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8010130:	210b      	movs	r1, #11
 8010132:	203e      	movs	r0, #62	; 0x3e
 8010134:	f7ff fee2 	bl	800fefc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8010138:	2110      	movs	r1, #16
 801013a:	203f      	movs	r0, #63	; 0x3f
 801013c:	f7ff fede 	bl	800fefc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8010140:	4b3b      	ldr	r3, [pc, #236]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 8010142:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00e      	beq.n	8010168 <SX1276OnTimeoutIrq+0x78>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801014a:	200d      	movs	r0, #13
 801014c:	f7ff fee8 	bl	800ff20 <SX1276Read>
 8010150:	4603      	mov	r3, r0
 8010152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010156:	b2db      	uxtb	r3, r3
 8010158:	4619      	mov	r1, r3
 801015a:	200d      	movs	r0, #13
 801015c:	f7ff fece 	bl	800fefc <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8010160:	4834      	ldr	r0, [pc, #208]	; (8010234 <SX1276OnTimeoutIrq+0x144>)
 8010162:	f000 fd2d 	bl	8010bc0 <TimerStart>
 8010166:	e006      	b.n	8010176 <SX1276OnTimeoutIrq+0x86>
                SX1276.Settings.State = RF_IDLE;
 8010168:	4b31      	ldr	r3, [pc, #196]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 801016a:	2200      	movs	r2, #0
 801016c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                TimerStop( &RxTimeoutSyncWord );
 8010170:	4830      	ldr	r0, [pc, #192]	; (8010234 <SX1276OnTimeoutIrq+0x144>)
 8010172:	f000 fe6d 	bl	8010e50 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010176:	4b30      	ldr	r3, [pc, #192]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d051      	beq.n	8010222 <SX1276OnTimeoutIrq+0x132>
 801017e:	4b2e      	ldr	r3, [pc, #184]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d04c      	beq.n	8010222 <SX1276OnTimeoutIrq+0x132>
            RadioEvents->RxTimeout( );
 8010188:	4b2b      	ldr	r3, [pc, #172]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	4798      	blx	r3
        break;
 8010190:	e047      	b.n	8010222 <SX1276OnTimeoutIrq+0x132>
        SX1276Reset( );
 8010192:	f7ff fe11 	bl	800fdb8 <SX1276Reset>
        RxChainCalibration( );
 8010196:	f7fe fbdb 	bl	800e950 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801019a:	2000      	movs	r0, #0
 801019c:	f7ff fe2e 	bl	800fdfc <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80101a0:	2300      	movs	r3, #0
 80101a2:	71fb      	strb	r3, [r7, #7]
 80101a4:	e01f      	b.n	80101e6 <SX1276OnTimeoutIrq+0xf6>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80101a6:	79fa      	ldrb	r2, [r7, #7]
 80101a8:	4924      	ldr	r1, [pc, #144]	; (801023c <SX1276OnTimeoutIrq+0x14c>)
 80101aa:	4613      	mov	r3, r2
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	4413      	add	r3, r2
 80101b0:	440b      	add	r3, r1
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7ff fe49 	bl	800fe4c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80101ba:	79fa      	ldrb	r2, [r7, #7]
 80101bc:	491f      	ldr	r1, [pc, #124]	; (801023c <SX1276OnTimeoutIrq+0x14c>)
 80101be:	4613      	mov	r3, r2
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	4413      	add	r3, r2
 80101c4:	440b      	add	r3, r1
 80101c6:	3301      	adds	r3, #1
 80101c8:	7818      	ldrb	r0, [r3, #0]
 80101ca:	79fa      	ldrb	r2, [r7, #7]
 80101cc:	491b      	ldr	r1, [pc, #108]	; (801023c <SX1276OnTimeoutIrq+0x14c>)
 80101ce:	4613      	mov	r3, r2
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	4413      	add	r3, r2
 80101d4:	440b      	add	r3, r1
 80101d6:	3302      	adds	r3, #2
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	4619      	mov	r1, r3
 80101dc:	f7ff fe8e 	bl	800fefc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	3301      	adds	r3, #1
 80101e4:	71fb      	strb	r3, [r7, #7]
 80101e6:	79fb      	ldrb	r3, [r7, #7]
 80101e8:	2b0f      	cmp	r3, #15
 80101ea:	d9dc      	bls.n	80101a6 <SX1276OnTimeoutIrq+0xb6>
        SX1276SetModem( MODEM_FSK );
 80101ec:	2000      	movs	r0, #0
 80101ee:	f7ff fe2d 	bl	800fe4c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80101f2:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 80101f4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7ff ff5b 	bl	80100b4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80101fe:	4b0c      	ldr	r3, [pc, #48]	; (8010230 <SX1276OnTimeoutIrq+0x140>)
 8010200:	2200      	movs	r2, #0
 8010202:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010206:	4b0c      	ldr	r3, [pc, #48]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00b      	beq.n	8010226 <SX1276OnTimeoutIrq+0x136>
 801020e:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d006      	beq.n	8010226 <SX1276OnTimeoutIrq+0x136>
            RadioEvents->TxTimeout( );
 8010218:	4b07      	ldr	r3, [pc, #28]	; (8010238 <SX1276OnTimeoutIrq+0x148>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	4798      	blx	r3
        break;
 8010220:	e001      	b.n	8010226 <SX1276OnTimeoutIrq+0x136>
        break;
 8010222:	bf00      	nop
 8010224:	e000      	b.n	8010228 <SX1276OnTimeoutIrq+0x138>
        break;
 8010226:	bf00      	nop
    }
}
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	20000ed8 	.word	0x20000ed8
 8010234:	20000ec4 	.word	0x20000ec4
 8010238:	20000854 	.word	0x20000854
 801023c:	08012840 	.word	0x08012840

08010240 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8010240:	b590      	push	{r4, r7, lr}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	70fb      	strb	r3, [r7, #3]
	DebugPrintf("0");
 801024a:	48aa      	ldr	r0, [pc, #680]	; (80104f4 <SX1276OnDio0Irq+0x2b4>)
 801024c:	f001 f81e 	bl	801128c <DebugPrintf>
    switch( SX1276.Settings.State )
 8010250:	4ba9      	ldr	r3, [pc, #676]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010252:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8010256:	2b01      	cmp	r3, #1
 8010258:	d003      	beq.n	8010262 <SX1276OnDio0Irq+0x22>
 801025a:	2b02      	cmp	r3, #2
 801025c:	f000 81f5 	beq.w	801064a <SX1276OnDio0Irq+0x40a>
                }
                break;
            }
            break;
        default:
            break;
 8010260:	e212      	b.n	8010688 <SX1276OnDio0Irq+0x448>
            switch( SX1276.Settings.Modem )
 8010262:	4ba5      	ldr	r3, [pc, #660]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010264:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010268:	2b00      	cmp	r3, #0
 801026a:	d003      	beq.n	8010274 <SX1276OnDio0Irq+0x34>
 801026c:	2b01      	cmp	r3, #1
 801026e:	f000 80f2 	beq.w	8010456 <SX1276OnDio0Irq+0x216>
                break;
 8010272:	e1e9      	b.n	8010648 <SX1276OnDio0Irq+0x408>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8010274:	4ba0      	ldr	r3, [pc, #640]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010276:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801027a:	2b00      	cmp	r3, #0
 801027c:	d051      	beq.n	8010322 <SX1276OnDio0Irq+0xe2>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801027e:	203f      	movs	r0, #63	; 0x3f
 8010280:	f7ff fe4e 	bl	800ff20 <SX1276Read>
 8010284:	4603      	mov	r3, r0
 8010286:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8010288:	78fb      	ldrb	r3, [r7, #3]
 801028a:	b2db      	uxtb	r3, r3
 801028c:	f003 0302 	and.w	r3, r3, #2
 8010290:	2b02      	cmp	r3, #2
 8010292:	d046      	beq.n	8010322 <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8010294:	210b      	movs	r1, #11
 8010296:	203e      	movs	r0, #62	; 0x3e
 8010298:	f7ff fe30 	bl	800fefc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801029c:	2110      	movs	r1, #16
 801029e:	203f      	movs	r0, #63	; 0x3f
 80102a0:	f7ff fe2c 	bl	800fefc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80102a4:	4895      	ldr	r0, [pc, #596]	; (80104fc <SX1276OnDio0Irq+0x2bc>)
 80102a6:	f000 fdd3 	bl	8010e50 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80102aa:	4b93      	ldr	r3, [pc, #588]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80102ac:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80102b0:	f083 0301 	eor.w	r3, r3, #1
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d007      	beq.n	80102ca <SX1276OnDio0Irq+0x8a>
                            TimerStop( &RxTimeoutSyncWord );
 80102ba:	4891      	ldr	r0, [pc, #580]	; (8010500 <SX1276OnDio0Irq+0x2c0>)
 80102bc:	f000 fdc8 	bl	8010e50 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80102c0:	4b8d      	ldr	r3, [pc, #564]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80102c8:	e00d      	b.n	80102e6 <SX1276OnDio0Irq+0xa6>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80102ca:	200d      	movs	r0, #13
 80102cc:	f7ff fe28 	bl	800ff20 <SX1276Read>
 80102d0:	4603      	mov	r3, r0
 80102d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	4619      	mov	r1, r3
 80102da:	200d      	movs	r0, #13
 80102dc:	f7ff fe0e 	bl	800fefc <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80102e0:	4887      	ldr	r0, [pc, #540]	; (8010500 <SX1276OnDio0Irq+0x2c0>)
 80102e2:	f000 fc6d 	bl	8010bc0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80102e6:	4b87      	ldr	r3, [pc, #540]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d008      	beq.n	8010300 <SX1276OnDio0Irq+0xc0>
 80102ee:	4b85      	ldr	r3, [pc, #532]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d003      	beq.n	8010300 <SX1276OnDio0Irq+0xc0>
                            RadioEvents->RxError( );
 80102f8:	4b82      	ldr	r3, [pc, #520]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8010300:	4b7d      	ldr	r3, [pc, #500]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010302:	2200      	movs	r2, #0
 8010304:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8010308:	4b7b      	ldr	r3, [pc, #492]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801030a:	2200      	movs	r2, #0
 801030c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8010310:	4b79      	ldr	r3, [pc, #484]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010312:	2200      	movs	r2, #0
 8010314:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8010318:	4b77      	ldr	r3, [pc, #476]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801031a:	2200      	movs	r2, #0
 801031c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                        break;
 8010320:	e192      	b.n	8010648 <SX1276OnDio0Irq+0x408>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8010322:	4b75      	ldr	r3, [pc, #468]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010324:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010328:	2b00      	cmp	r3, #0
 801032a:	d133      	bne.n	8010394 <SX1276OnDio0Irq+0x154>
 801032c:	4b72      	ldr	r3, [pc, #456]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801032e:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010332:	2b00      	cmp	r3, #0
 8010334:	d12e      	bne.n	8010394 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8010336:	4b70      	ldr	r3, [pc, #448]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010338:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 801033c:	f083 0301 	eor.w	r3, r3, #1
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d004      	beq.n	8010350 <SX1276OnDio0Irq+0x110>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8010346:	2101      	movs	r1, #1
 8010348:	486f      	ldr	r0, [pc, #444]	; (8010508 <SX1276OnDio0Irq+0x2c8>)
 801034a:	f7ff fe75 	bl	8010038 <SX1276ReadFifo>
 801034e:	e007      	b.n	8010360 <SX1276OnDio0Irq+0x120>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8010350:	2032      	movs	r0, #50	; 0x32
 8010352:	f7ff fde5 	bl	800ff20 <SX1276Read>
 8010356:	4603      	mov	r3, r0
 8010358:	b29a      	uxth	r2, r3
 801035a:	4b67      	ldr	r3, [pc, #412]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801035c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010360:	4b65      	ldr	r3, [pc, #404]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010362:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010366:	461a      	mov	r2, r3
 8010368:	4b68      	ldr	r3, [pc, #416]	; (801050c <SX1276OnDio0Irq+0x2cc>)
 801036a:	18d0      	adds	r0, r2, r3
 801036c:	4b62      	ldr	r3, [pc, #392]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801036e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010372:	b2da      	uxtb	r2, r3
 8010374:	4b60      	ldr	r3, [pc, #384]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010376:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 801037a:	b2db      	uxtb	r3, r3
 801037c:	1ad3      	subs	r3, r2, r3
 801037e:	b2db      	uxtb	r3, r3
 8010380:	4619      	mov	r1, r3
 8010382:	f7ff fe59 	bl	8010038 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010386:	4b5c      	ldr	r3, [pc, #368]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010388:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 801038c:	4b5a      	ldr	r3, [pc, #360]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801038e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010392:	e018      	b.n	80103c6 <SX1276OnDio0Irq+0x186>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010394:	4b58      	ldr	r3, [pc, #352]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010396:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 801039a:	461a      	mov	r2, r3
 801039c:	4b5b      	ldr	r3, [pc, #364]	; (801050c <SX1276OnDio0Irq+0x2cc>)
 801039e:	18d0      	adds	r0, r2, r3
 80103a0:	4b55      	ldr	r3, [pc, #340]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103a2:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80103a6:	b2da      	uxtb	r2, r3
 80103a8:	4b53      	ldr	r3, [pc, #332]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103aa:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	4619      	mov	r1, r3
 80103b6:	f7ff fe3f 	bl	8010038 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80103ba:	4b4f      	ldr	r3, [pc, #316]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103bc:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80103c0:	4b4d      	ldr	r3, [pc, #308]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103c2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                TimerStop( &RxTimeoutTimer );
 80103c6:	484d      	ldr	r0, [pc, #308]	; (80104fc <SX1276OnDio0Irq+0x2bc>)
 80103c8:	f000 fd42 	bl	8010e50 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80103cc:	4b4a      	ldr	r3, [pc, #296]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103ce:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80103d2:	f083 0301 	eor.w	r3, r3, #1
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d007      	beq.n	80103ec <SX1276OnDio0Irq+0x1ac>
                    SX1276.Settings.State = RF_IDLE;
 80103dc:	4b46      	ldr	r3, [pc, #280]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutSyncWord );
 80103e4:	4846      	ldr	r0, [pc, #280]	; (8010500 <SX1276OnDio0Irq+0x2c0>)
 80103e6:	f000 fd33 	bl	8010e50 <TimerStop>
 80103ea:	e00d      	b.n	8010408 <SX1276OnDio0Irq+0x1c8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80103ec:	200d      	movs	r0, #13
 80103ee:	f7ff fd97 	bl	800ff20 <SX1276Read>
 80103f2:	4603      	mov	r3, r0
 80103f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	4619      	mov	r1, r3
 80103fc:	200d      	movs	r0, #13
 80103fe:	f7ff fd7d 	bl	800fefc <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8010402:	483f      	ldr	r0, [pc, #252]	; (8010500 <SX1276OnDio0Irq+0x2c0>)
 8010404:	f000 fbdc 	bl	8010bc0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8010408:	4b3e      	ldr	r3, [pc, #248]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d011      	beq.n	8010434 <SX1276OnDio0Irq+0x1f4>
 8010410:	4b3c      	ldr	r3, [pc, #240]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00c      	beq.n	8010434 <SX1276OnDio0Irq+0x1f4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801041a:	4b3a      	ldr	r3, [pc, #232]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	689c      	ldr	r4, [r3, #8]
 8010420:	4b35      	ldr	r3, [pc, #212]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010422:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 8010426:	4b34      	ldr	r3, [pc, #208]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010428:	f993 310a 	ldrsb.w	r3, [r3, #266]	; 0x10a
 801042c:	b21a      	sxth	r2, r3
 801042e:	2300      	movs	r3, #0
 8010430:	4836      	ldr	r0, [pc, #216]	; (801050c <SX1276OnDio0Irq+0x2cc>)
 8010432:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8010434:	4b30      	ldr	r3, [pc, #192]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801043c:	4b2e      	ldr	r3, [pc, #184]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801043e:	2200      	movs	r2, #0
 8010440:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8010444:	4b2c      	ldr	r3, [pc, #176]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010446:	2200      	movs	r2, #0
 8010448:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                SX1276.Settings.FskPacketHandler.Size = 0;
 801044c:	4b2a      	ldr	r3, [pc, #168]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 801044e:	2200      	movs	r2, #0
 8010450:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                break;
 8010454:	e0f8      	b.n	8010648 <SX1276OnDio0Irq+0x408>
                    int8_t snr = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801045a:	2140      	movs	r1, #64	; 0x40
 801045c:	2012      	movs	r0, #18
 801045e:	f7ff fd4d 	bl	800fefc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8010462:	2012      	movs	r0, #18
 8010464:	f7ff fd5c 	bl	800ff20 <SX1276Read>
 8010468:	4603      	mov	r3, r0
 801046a:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801046c:	78fb      	ldrb	r3, [r7, #3]
 801046e:	b2db      	uxtb	r3, r3
 8010470:	f003 0320 	and.w	r3, r3, #32
 8010474:	2b20      	cmp	r3, #32
 8010476:	d122      	bne.n	80104be <SX1276OnDio0Irq+0x27e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8010478:	2120      	movs	r1, #32
 801047a:	2012      	movs	r0, #18
 801047c:	f7ff fd3e 	bl	800fefc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8010480:	4b1d      	ldr	r3, [pc, #116]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010482:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8010486:	f083 0301 	eor.w	r3, r3, #1
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d003      	beq.n	8010498 <SX1276OnDio0Irq+0x258>
                            SX1276.Settings.State = RF_IDLE;
 8010490:	4b19      	ldr	r3, [pc, #100]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 8010492:	2200      	movs	r2, #0
 8010494:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                        TimerStop( &RxTimeoutTimer );
 8010498:	4818      	ldr	r0, [pc, #96]	; (80104fc <SX1276OnDio0Irq+0x2bc>)
 801049a:	f000 fcd9 	bl	8010e50 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801049e:	4b19      	ldr	r3, [pc, #100]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 80cd 	beq.w	8010642 <SX1276OnDio0Irq+0x402>
 80104a8:	4b16      	ldr	r3, [pc, #88]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 80c7 	beq.w	8010642 <SX1276OnDio0Irq+0x402>
                            RadioEvents->RxError( );
 80104b4:	4b13      	ldr	r3, [pc, #76]	; (8010504 <SX1276OnDio0Irq+0x2c4>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	4798      	blx	r3
                        break;
 80104bc:	e0c1      	b.n	8010642 <SX1276OnDio0Irq+0x402>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 80104be:	2019      	movs	r0, #25
 80104c0:	f7ff fd2e 	bl	800ff20 <SX1276Read>
 80104c4:	4603      	mov	r3, r0
 80104c6:	b25a      	sxtb	r2, r3
 80104c8:	4b0b      	ldr	r3, [pc, #44]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80104ca:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 80104ce:	4b0a      	ldr	r3, [pc, #40]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80104d0:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	da1b      	bge.n	8010510 <SX1276OnDio0Irq+0x2d0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80104d8:	4b07      	ldr	r3, [pc, #28]	; (80104f8 <SX1276OnDio0Irq+0x2b8>)
 80104da:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 80104de:	425b      	negs	r3, r3
 80104e0:	109b      	asrs	r3, r3, #2
 80104e2:	b25b      	sxtb	r3, r3
 80104e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104e8:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 80104ea:	79fb      	ldrb	r3, [r7, #7]
 80104ec:	425b      	negs	r3, r3
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	71fb      	strb	r3, [r7, #7]
 80104f2:	e015      	b.n	8010520 <SX1276OnDio0Irq+0x2e0>
 80104f4:	08012484 	.word	0x08012484
 80104f8:	20000ed8 	.word	0x20000ed8
 80104fc:	20001018 	.word	0x20001018
 8010500:	20000ec4 	.word	0x20000ec4
 8010504:	20000854 	.word	0x20000854
 8010508:	20000fea 	.word	0x20000fea
 801050c:	20000858 	.word	0x20000858
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8010510:	4b5f      	ldr	r3, [pc, #380]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010512:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 8010516:	109b      	asrs	r3, r3, #2
 8010518:	b25b      	sxtb	r3, r3
 801051a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801051e:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8010520:	201a      	movs	r0, #26
 8010522:	f7ff fcfd 	bl	800ff20 <SX1276Read>
 8010526:	4603      	mov	r3, r0
 8010528:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 801052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801052e:	2b00      	cmp	r3, #0
 8010530:	da2d      	bge.n	801058e <SX1276OnDio0Irq+0x34e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8010532:	4b57      	ldr	r3, [pc, #348]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010538:	4a56      	ldr	r2, [pc, #344]	; (8010694 <SX1276OnDio0Irq+0x454>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d913      	bls.n	8010566 <SX1276OnDio0Irq+0x326>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801053e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010542:	111b      	asrs	r3, r3, #4
 8010544:	b21b      	sxth	r3, r3
 8010546:	b29a      	uxth	r2, r3
 8010548:	88bb      	ldrh	r3, [r7, #4]
 801054a:	4413      	add	r3, r2
 801054c:	b29a      	uxth	r2, r3
 801054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010552:	b29b      	uxth	r3, r3
 8010554:	4413      	add	r3, r2
 8010556:	b29b      	uxth	r3, r3
 8010558:	3b9d      	subs	r3, #157	; 0x9d
 801055a:	b29b      	uxth	r3, r3
 801055c:	b21a      	sxth	r2, r3
 801055e:	4b4c      	ldr	r3, [pc, #304]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010560:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 8010564:	e036      	b.n	80105d4 <SX1276OnDio0Irq+0x394>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8010566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801056a:	111b      	asrs	r3, r3, #4
 801056c:	b21b      	sxth	r3, r3
 801056e:	b29a      	uxth	r2, r3
 8010570:	88bb      	ldrh	r3, [r7, #4]
 8010572:	4413      	add	r3, r2
 8010574:	b29a      	uxth	r2, r3
 8010576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801057a:	b29b      	uxth	r3, r3
 801057c:	4413      	add	r3, r2
 801057e:	b29b      	uxth	r3, r3
 8010580:	3ba4      	subs	r3, #164	; 0xa4
 8010582:	b29b      	uxth	r3, r3
 8010584:	b21a      	sxth	r2, r3
 8010586:	4b42      	ldr	r3, [pc, #264]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010588:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 801058c:	e022      	b.n	80105d4 <SX1276OnDio0Irq+0x394>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801058e:	4b40      	ldr	r3, [pc, #256]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010594:	4a3f      	ldr	r2, [pc, #252]	; (8010694 <SX1276OnDio0Irq+0x454>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d90e      	bls.n	80105b8 <SX1276OnDio0Irq+0x378>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801059a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801059e:	111b      	asrs	r3, r3, #4
 80105a0:	b21b      	sxth	r3, r3
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	88bb      	ldrh	r3, [r7, #4]
 80105a6:	4413      	add	r3, r2
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	3b9d      	subs	r3, #157	; 0x9d
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	b21a      	sxth	r2, r3
 80105b0:	4b37      	ldr	r3, [pc, #220]	; (8010690 <SX1276OnDio0Irq+0x450>)
 80105b2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 80105b6:	e00d      	b.n	80105d4 <SX1276OnDio0Irq+0x394>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80105b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80105bc:	111b      	asrs	r3, r3, #4
 80105be:	b21b      	sxth	r3, r3
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	88bb      	ldrh	r3, [r7, #4]
 80105c4:	4413      	add	r3, r2
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	3ba4      	subs	r3, #164	; 0xa4
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	b21a      	sxth	r2, r3
 80105ce:	4b30      	ldr	r3, [pc, #192]	; (8010690 <SX1276OnDio0Irq+0x450>)
 80105d0:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80105d4:	2013      	movs	r0, #19
 80105d6:	f7ff fca3 	bl	800ff20 <SX1276Read>
 80105da:	4603      	mov	r3, r0
 80105dc:	461a      	mov	r2, r3
 80105de:	4b2c      	ldr	r3, [pc, #176]	; (8010690 <SX1276OnDio0Irq+0x450>)
 80105e0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80105e4:	4b2a      	ldr	r3, [pc, #168]	; (8010690 <SX1276OnDio0Irq+0x450>)
 80105e6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80105ea:	4619      	mov	r1, r3
 80105ec:	482a      	ldr	r0, [pc, #168]	; (8010698 <SX1276OnDio0Irq+0x458>)
 80105ee:	f7ff fd23 	bl	8010038 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80105f2:	4b27      	ldr	r3, [pc, #156]	; (8010690 <SX1276OnDio0Irq+0x450>)
 80105f4:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 80105f8:	f083 0301 	eor.w	r3, r3, #1
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d003      	beq.n	801060a <SX1276OnDio0Irq+0x3ca>
                        SX1276.Settings.State = RF_IDLE;
 8010602:	4b23      	ldr	r3, [pc, #140]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010604:	2200      	movs	r2, #0
 8010606:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutTimer );
 801060a:	4824      	ldr	r0, [pc, #144]	; (801069c <SX1276OnDio0Irq+0x45c>)
 801060c:	f000 fc20 	bl	8010e50 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8010610:	4b23      	ldr	r3, [pc, #140]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d016      	beq.n	8010646 <SX1276OnDio0Irq+0x406>
 8010618:	4b21      	ldr	r3, [pc, #132]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d011      	beq.n	8010646 <SX1276OnDio0Irq+0x406>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8010622:	4b1f      	ldr	r3, [pc, #124]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	689c      	ldr	r4, [r3, #8]
 8010628:	4b19      	ldr	r3, [pc, #100]	; (8010690 <SX1276OnDio0Irq+0x450>)
 801062a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801062e:	b299      	uxth	r1, r3
 8010630:	4b17      	ldr	r3, [pc, #92]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010632:	f9b3 213a 	ldrsh.w	r2, [r3, #314]	; 0x13a
 8010636:	4b16      	ldr	r3, [pc, #88]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010638:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 801063c:	4816      	ldr	r0, [pc, #88]	; (8010698 <SX1276OnDio0Irq+0x458>)
 801063e:	47a0      	blx	r4
                break;
 8010640:	e001      	b.n	8010646 <SX1276OnDio0Irq+0x406>
                        break;
 8010642:	bf00      	nop
 8010644:	e020      	b.n	8010688 <SX1276OnDio0Irq+0x448>
                break;
 8010646:	bf00      	nop
            break;
 8010648:	e01e      	b.n	8010688 <SX1276OnDio0Irq+0x448>
            TimerStop( &TxTimeoutTimer );
 801064a:	4816      	ldr	r0, [pc, #88]	; (80106a4 <SX1276OnDio0Irq+0x464>)
 801064c:	f000 fc00 	bl	8010e50 <TimerStop>
            switch( SX1276.Settings.Modem )
 8010650:	4b0f      	ldr	r3, [pc, #60]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010652:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010656:	2b01      	cmp	r3, #1
 8010658:	d103      	bne.n	8010662 <SX1276OnDio0Irq+0x422>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801065a:	2108      	movs	r1, #8
 801065c:	2012      	movs	r0, #18
 801065e:	f7ff fc4d 	bl	800fefc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8010662:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <SX1276OnDio0Irq+0x450>)
 8010664:	2200      	movs	r2, #0
 8010666:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801066a:	4b0d      	ldr	r3, [pc, #52]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d008      	beq.n	8010684 <SX1276OnDio0Irq+0x444>
 8010672:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <SX1276OnDio0Irq+0x444>
                    RadioEvents->TxDone( );
 801067c:	4b08      	ldr	r3, [pc, #32]	; (80106a0 <SX1276OnDio0Irq+0x460>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4798      	blx	r3
                break;
 8010684:	bf00      	nop
            break;
 8010686:	bf00      	nop
    }
}
 8010688:	bf00      	nop
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	bd90      	pop	{r4, r7, pc}
 8010690:	20000ed8 	.word	0x20000ed8
 8010694:	1f4add40 	.word	0x1f4add40
 8010698:	20000858 	.word	0x20000858
 801069c:	20001018 	.word	0x20001018
 80106a0:	20000854 	.word	0x20000854
 80106a4:	20000eb0 	.word	0x20000eb0

080106a8 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
	DebugPrintf("1");
 80106ac:	486d      	ldr	r0, [pc, #436]	; (8010864 <SX1276OnDio1Irq+0x1bc>)
 80106ae:	f000 fded 	bl	801128c <DebugPrintf>
    switch( SX1276.Settings.State )
 80106b2:	4b6d      	ldr	r3, [pc, #436]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80106b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d003      	beq.n	80106c4 <SX1276OnDio1Irq+0x1c>
 80106bc:	2b02      	cmp	r3, #2
 80106be:	f000 8083 	beq.w	80107c8 <SX1276OnDio1Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 80106c2:	e0cc      	b.n	801085e <SX1276OnDio1Irq+0x1b6>
            switch( SX1276.Settings.Modem )
 80106c4:	4b68      	ldr	r3, [pc, #416]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80106c6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <SX1276OnDio1Irq+0x2c>
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d060      	beq.n	8010794 <SX1276OnDio1Irq+0xec>
                break;
 80106d2:	e078      	b.n	80107c6 <SX1276OnDio1Irq+0x11e>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80106d4:	4b64      	ldr	r3, [pc, #400]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80106d6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d119      	bne.n	8010712 <SX1276OnDio1Irq+0x6a>
 80106de:	4b62      	ldr	r3, [pc, #392]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80106e0:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d114      	bne.n	8010712 <SX1276OnDio1Irq+0x6a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80106e8:	4b5f      	ldr	r3, [pc, #380]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80106ea:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80106ee:	f083 0301 	eor.w	r3, r3, #1
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d004      	beq.n	8010702 <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80106f8:	2101      	movs	r1, #1
 80106fa:	485c      	ldr	r0, [pc, #368]	; (801086c <SX1276OnDio1Irq+0x1c4>)
 80106fc:	f7ff fc9c 	bl	8010038 <SX1276ReadFifo>
 8010700:	e007      	b.n	8010712 <SX1276OnDio1Irq+0x6a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8010702:	2032      	movs	r0, #50	; 0x32
 8010704:	f7ff fc0c 	bl	800ff20 <SX1276Read>
 8010708:	4603      	mov	r3, r0
 801070a:	b29a      	uxth	r2, r3
 801070c:	4b56      	ldr	r3, [pc, #344]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801070e:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8010712:	4b55      	ldr	r3, [pc, #340]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010714:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010718:	461a      	mov	r2, r3
 801071a:	4b53      	ldr	r3, [pc, #332]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801071c:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	4a51      	ldr	r2, [pc, #324]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010724:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 8010728:	4293      	cmp	r3, r2
 801072a:	dd19      	ble.n	8010760 <SX1276OnDio1Irq+0xb8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 801072c:	4b4e      	ldr	r3, [pc, #312]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801072e:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010732:	461a      	mov	r2, r3
 8010734:	4b4e      	ldr	r3, [pc, #312]	; (8010870 <SX1276OnDio1Irq+0x1c8>)
 8010736:	441a      	add	r2, r3
 8010738:	4b4b      	ldr	r3, [pc, #300]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801073a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801073e:	4619      	mov	r1, r3
 8010740:	4610      	mov	r0, r2
 8010742:	f7ff fc79 	bl	8010038 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 8010746:	4b48      	ldr	r3, [pc, #288]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010748:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 801074c:	4b46      	ldr	r3, [pc, #280]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801074e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8010752:	b29b      	uxth	r3, r3
 8010754:	4413      	add	r3, r2
 8010756:	b29a      	uxth	r2, r3
 8010758:	4b43      	ldr	r3, [pc, #268]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801075a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 801075e:	e032      	b.n	80107c6 <SX1276OnDio1Irq+0x11e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010760:	4b41      	ldr	r3, [pc, #260]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010762:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010766:	461a      	mov	r2, r3
 8010768:	4b41      	ldr	r3, [pc, #260]	; (8010870 <SX1276OnDio1Irq+0x1c8>)
 801076a:	18d0      	adds	r0, r2, r3
 801076c:	4b3e      	ldr	r3, [pc, #248]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801076e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010772:	b2da      	uxtb	r2, r3
 8010774:	4b3c      	ldr	r3, [pc, #240]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010776:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 801077a:	b2db      	uxtb	r3, r3
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	b2db      	uxtb	r3, r3
 8010780:	4619      	mov	r1, r3
 8010782:	f7ff fc59 	bl	8010038 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010786:	4b38      	ldr	r3, [pc, #224]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010788:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 801078c:	4b36      	ldr	r3, [pc, #216]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801078e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 8010792:	e018      	b.n	80107c6 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutTimer );
 8010794:	4837      	ldr	r0, [pc, #220]	; (8010874 <SX1276OnDio1Irq+0x1cc>)
 8010796:	f000 fb5b 	bl	8010e50 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801079a:	2180      	movs	r1, #128	; 0x80
 801079c:	2012      	movs	r0, #18
 801079e:	f7ff fbad 	bl	800fefc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80107a2:	4b31      	ldr	r3, [pc, #196]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80107aa:	4b33      	ldr	r3, [pc, #204]	; (8010878 <SX1276OnDio1Irq+0x1d0>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d008      	beq.n	80107c4 <SX1276OnDio1Irq+0x11c>
 80107b2:	4b31      	ldr	r3, [pc, #196]	; (8010878 <SX1276OnDio1Irq+0x1d0>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <SX1276OnDio1Irq+0x11c>
                    RadioEvents->RxTimeout( );
 80107bc:	4b2e      	ldr	r3, [pc, #184]	; (8010878 <SX1276OnDio1Irq+0x1d0>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	4798      	blx	r3
                break;
 80107c4:	bf00      	nop
            break;
 80107c6:	e04a      	b.n	801085e <SX1276OnDio1Irq+0x1b6>
            switch( SX1276.Settings.Modem )
 80107c8:	4b27      	ldr	r3, [pc, #156]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107ca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <SX1276OnDio1Irq+0x130>
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d041      	beq.n	801085a <SX1276OnDio1Irq+0x1b2>
                break;
 80107d6:	e041      	b.n	801085c <SX1276OnDio1Irq+0x1b4>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80107d8:	4b23      	ldr	r3, [pc, #140]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107da:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80107de:	461a      	mov	r2, r3
 80107e0:	4b21      	ldr	r3, [pc, #132]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107e2:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	4a1f      	ldr	r2, [pc, #124]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107ea:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 80107ee:	4293      	cmp	r3, r2
 80107f0:	dd19      	ble.n	8010826 <SX1276OnDio1Irq+0x17e>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80107f2:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 80107f4:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80107f8:	461a      	mov	r2, r3
 80107fa:	4b1d      	ldr	r3, [pc, #116]	; (8010870 <SX1276OnDio1Irq+0x1c8>)
 80107fc:	441a      	add	r2, r3
 80107fe:	4b1a      	ldr	r3, [pc, #104]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010800:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8010804:	4619      	mov	r1, r3
 8010806:	4610      	mov	r0, r2
 8010808:	f7ff fc06 	bl	8010018 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801080c:	4b16      	ldr	r3, [pc, #88]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801080e:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 8010812:	4b15      	ldr	r3, [pc, #84]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010814:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8010818:	b29b      	uxth	r3, r3
 801081a:	4413      	add	r3, r2
 801081c:	b29a      	uxth	r2, r3
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010820:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 8010824:	e01a      	b.n	801085c <SX1276OnDio1Irq+0x1b4>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010826:	4b10      	ldr	r3, [pc, #64]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010828:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 801082c:	461a      	mov	r2, r3
 801082e:	4b10      	ldr	r3, [pc, #64]	; (8010870 <SX1276OnDio1Irq+0x1c8>)
 8010830:	18d0      	adds	r0, r2, r3
 8010832:	4b0d      	ldr	r3, [pc, #52]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010834:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b0b      	ldr	r3, [pc, #44]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801083c:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010840:	b2db      	uxtb	r3, r3
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	b2db      	uxtb	r3, r3
 8010846:	4619      	mov	r1, r3
 8010848:	f7ff fbe6 	bl	8010018 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801084c:	4b06      	ldr	r3, [pc, #24]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 801084e:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8010852:	4b05      	ldr	r3, [pc, #20]	; (8010868 <SX1276OnDio1Irq+0x1c0>)
 8010854:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 8010858:	e000      	b.n	801085c <SX1276OnDio1Irq+0x1b4>
                break;
 801085a:	bf00      	nop
            break;
 801085c:	bf00      	nop
    }
}
 801085e:	bf00      	nop
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	08012488 	.word	0x08012488
 8010868:	20000ed8 	.word	0x20000ed8
 801086c:	20000fea 	.word	0x20000fea
 8010870:	20000858 	.word	0x20000858
 8010874:	20001018 	.word	0x20001018
 8010878:	20000854 	.word	0x20000854
 801087c:	00000000 	.word	0x00000000

08010880 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8010880:	b598      	push	{r3, r4, r7, lr}
 8010882:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8010884:	4b5e      	ldr	r3, [pc, #376]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 8010886:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 801088a:	2b01      	cmp	r3, #1
 801088c:	d003      	beq.n	8010896 <SX1276OnDio2Irq+0x16>
 801088e:	2b02      	cmp	r3, #2
 8010890:	f000 8084 	beq.w	801099c <SX1276OnDio2Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
 8010894:	e0ad      	b.n	80109f2 <SX1276OnDio2Irq+0x172>
            switch( SX1276.Settings.Modem )
 8010896:	4b5a      	ldr	r3, [pc, #360]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 8010898:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 801089c:	2b00      	cmp	r3, #0
 801089e:	d002      	beq.n	80108a6 <SX1276OnDio2Irq+0x26>
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d058      	beq.n	8010956 <SX1276OnDio2Irq+0xd6>
                break;
 80108a4:	e079      	b.n	801099a <SX1276OnDio2Irq+0x11a>
                if( SX1276.DIO4.port == NULL )
 80108a6:	4b56      	ldr	r3, [pc, #344]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d103      	bne.n	80108b6 <SX1276OnDio2Irq+0x36>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80108ae:	4b54      	ldr	r3, [pc, #336]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80108b6:	4b52      	ldr	r3, [pc, #328]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108b8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d169      	bne.n	8010994 <SX1276OnDio2Irq+0x114>
 80108c0:	4b4f      	ldr	r3, [pc, #316]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108c2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d164      	bne.n	8010994 <SX1276OnDio2Irq+0x114>
                    TimerStop( &RxTimeoutSyncWord );
 80108ca:	484e      	ldr	r0, [pc, #312]	; (8010a04 <SX1276OnDio2Irq+0x184>)
 80108cc:	f000 fac0 	bl	8010e50 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80108d0:	4b4b      	ldr	r3, [pc, #300]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108d2:	2201      	movs	r2, #1
 80108d4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80108d8:	2011      	movs	r0, #17
 80108da:	f7ff fb21 	bl	800ff20 <SX1276Read>
 80108de:	4603      	mov	r3, r0
 80108e0:	085b      	lsrs	r3, r3, #1
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	425b      	negs	r3, r3
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	b25a      	sxtb	r2, r3
 80108ea:	4b45      	ldr	r3, [pc, #276]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80108ec:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80108f0:	201b      	movs	r0, #27
 80108f2:	f7ff fb15 	bl	800ff20 <SX1276Read>
 80108f6:	4603      	mov	r3, r0
 80108f8:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80108fa:	201c      	movs	r0, #28
 80108fc:	f7ff fb10 	bl	800ff20 <SX1276Read>
 8010900:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8010902:	4323      	orrs	r3, r4
 8010904:	4618      	mov	r0, r3
 8010906:	f7ef fd95 	bl	8000434 <__aeabi_i2d>
 801090a:	4603      	mov	r3, r0
 801090c:	460c      	mov	r4, r1
 801090e:	4618      	mov	r0, r3
 8010910:	4621      	mov	r1, r4
 8010912:	f7f0 f893 	bl	8000a3c <__aeabi_d2iz>
 8010916:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 8010918:	4618      	mov	r0, r3
 801091a:	f7ef fd8b 	bl	8000434 <__aeabi_i2d>
 801091e:	a336      	add	r3, pc, #216	; (adr r3, 80109f8 <SX1276OnDio2Irq+0x178>)
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	f7ef fdf0 	bl	8000508 <__aeabi_dmul>
 8010928:	4603      	mov	r3, r0
 801092a:	460c      	mov	r4, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801092c:	4618      	mov	r0, r3
 801092e:	4621      	mov	r1, r4
 8010930:	f7f0 f884 	bl	8000a3c <__aeabi_d2iz>
 8010934:	4602      	mov	r2, r0
 8010936:	4b32      	ldr	r3, [pc, #200]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 8010938:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801093c:	200c      	movs	r0, #12
 801093e:	f7ff faef 	bl	800ff20 <SX1276Read>
 8010942:	4603      	mov	r3, r0
 8010944:	095b      	lsrs	r3, r3, #5
 8010946:	b2db      	uxtb	r3, r3
 8010948:	f003 0307 	and.w	r3, r3, #7
 801094c:	b2da      	uxtb	r2, r3
 801094e:	4b2c      	ldr	r3, [pc, #176]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 8010950:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                break;
 8010954:	e01e      	b.n	8010994 <SX1276OnDio2Irq+0x114>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8010956:	4b2a      	ldr	r3, [pc, #168]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 8010958:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01b      	beq.n	8010998 <SX1276OnDio2Irq+0x118>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8010960:	2102      	movs	r1, #2
 8010962:	2012      	movs	r0, #18
 8010964:	f7ff faca 	bl	800fefc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8010968:	4b27      	ldr	r3, [pc, #156]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d013      	beq.n	8010998 <SX1276OnDio2Irq+0x118>
 8010970:	4b25      	ldr	r3, [pc, #148]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	695b      	ldr	r3, [r3, #20]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00e      	beq.n	8010998 <SX1276OnDio2Irq+0x118>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801097a:	4b23      	ldr	r3, [pc, #140]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	695c      	ldr	r4, [r3, #20]
 8010980:	201c      	movs	r0, #28
 8010982:	f7ff facd 	bl	800ff20 <SX1276Read>
 8010986:	4603      	mov	r3, r0
 8010988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801098c:	b2db      	uxtb	r3, r3
 801098e:	4618      	mov	r0, r3
 8010990:	47a0      	blx	r4
                break;
 8010992:	e001      	b.n	8010998 <SX1276OnDio2Irq+0x118>
                break;
 8010994:	bf00      	nop
 8010996:	e02c      	b.n	80109f2 <SX1276OnDio2Irq+0x172>
                break;
 8010998:	bf00      	nop
            break;
 801099a:	e02a      	b.n	80109f2 <SX1276OnDio2Irq+0x172>
            switch( SX1276.Settings.Modem )
 801099c:	4b18      	ldr	r3, [pc, #96]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 801099e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d021      	beq.n	80109ea <SX1276OnDio2Irq+0x16a>
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d000      	beq.n	80109ac <SX1276OnDio2Irq+0x12c>
                break;
 80109aa:	e021      	b.n	80109f0 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80109ac:	4b14      	ldr	r3, [pc, #80]	; (8010a00 <SX1276OnDio2Irq+0x180>)
 80109ae:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d01b      	beq.n	80109ee <SX1276OnDio2Irq+0x16e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80109b6:	2102      	movs	r1, #2
 80109b8:	2012      	movs	r0, #18
 80109ba:	f7ff fa9f 	bl	800fefc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80109be:	4b12      	ldr	r3, [pc, #72]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d013      	beq.n	80109ee <SX1276OnDio2Irq+0x16e>
 80109c6:	4b10      	ldr	r3, [pc, #64]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	695b      	ldr	r3, [r3, #20]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00e      	beq.n	80109ee <SX1276OnDio2Irq+0x16e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80109d0:	4b0d      	ldr	r3, [pc, #52]	; (8010a08 <SX1276OnDio2Irq+0x188>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	695c      	ldr	r4, [r3, #20]
 80109d6:	201c      	movs	r0, #28
 80109d8:	f7ff faa2 	bl	800ff20 <SX1276Read>
 80109dc:	4603      	mov	r3, r0
 80109de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	4618      	mov	r0, r3
 80109e6:	47a0      	blx	r4
                break;
 80109e8:	e001      	b.n	80109ee <SX1276OnDio2Irq+0x16e>
                break;
 80109ea:	bf00      	nop
 80109ec:	e000      	b.n	80109f0 <SX1276OnDio2Irq+0x170>
                break;
 80109ee:	bf00      	nop
            break;
 80109f0:	bf00      	nop
    }
}
 80109f2:	bf00      	nop
 80109f4:	bd98      	pop	{r3, r4, r7, pc}
 80109f6:	bf00      	nop
 80109f8:	00000000 	.word	0x00000000
 80109fc:	404e8480 	.word	0x404e8480
 8010a00:	20000ed8 	.word	0x20000ed8
 8010a04:	20000ec4 	.word	0x20000ec4
 8010a08:	20000854 	.word	0x20000854

08010a0c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8010a10:	4b1d      	ldr	r3, [pc, #116]	; (8010a88 <SX1276OnDio3Irq+0x7c>)
 8010a12:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d030      	beq.n	8010a7c <SX1276OnDio3Irq+0x70>
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d000      	beq.n	8010a20 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8010a1e:	e030      	b.n	8010a82 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8010a20:	2012      	movs	r0, #18
 8010a22:	f7ff fa7d 	bl	800ff20 <SX1276Read>
 8010a26:	4603      	mov	r3, r0
 8010a28:	f003 0301 	and.w	r3, r3, #1
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d112      	bne.n	8010a56 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8010a30:	2105      	movs	r1, #5
 8010a32:	2012      	movs	r0, #18
 8010a34:	f7ff fa62 	bl	800fefc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010a38:	4b14      	ldr	r3, [pc, #80]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d01f      	beq.n	8010a80 <SX1276OnDio3Irq+0x74>
 8010a40:	4b12      	ldr	r3, [pc, #72]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d01a      	beq.n	8010a80 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 8010a4a:	4b10      	ldr	r3, [pc, #64]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	699b      	ldr	r3, [r3, #24]
 8010a50:	2001      	movs	r0, #1
 8010a52:	4798      	blx	r3
        break;
 8010a54:	e014      	b.n	8010a80 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8010a56:	2104      	movs	r1, #4
 8010a58:	2012      	movs	r0, #18
 8010a5a:	f7ff fa4f 	bl	800fefc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010a5e:	4b0b      	ldr	r3, [pc, #44]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00c      	beq.n	8010a80 <SX1276OnDio3Irq+0x74>
 8010a66:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d007      	beq.n	8010a80 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8010a70:	4b06      	ldr	r3, [pc, #24]	; (8010a8c <SX1276OnDio3Irq+0x80>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	699b      	ldr	r3, [r3, #24]
 8010a76:	2000      	movs	r0, #0
 8010a78:	4798      	blx	r3
        break;
 8010a7a:	e001      	b.n	8010a80 <SX1276OnDio3Irq+0x74>
        break;
 8010a7c:	bf00      	nop
 8010a7e:	e000      	b.n	8010a82 <SX1276OnDio3Irq+0x76>
        break;
 8010a80:	bf00      	nop
    }
}
 8010a82:	bf00      	nop
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	20000ed8 	.word	0x20000ed8
 8010a8c:	20000854 	.word	0x20000854

08010a90 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8010a90:	b480      	push	{r7}
 8010a92:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8010a94:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <SX1276OnDio4Irq+0x38>)
 8010a96:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <SX1276OnDio4Irq+0x14>
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d00a      	beq.n	8010ab8 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8010aa2:	e00c      	b.n	8010abe <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8010aa4:	4b08      	ldr	r3, [pc, #32]	; (8010ac8 <SX1276OnDio4Irq+0x38>)
 8010aa6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d106      	bne.n	8010abc <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <SX1276OnDio4Irq+0x38>)
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        break;
 8010ab6:	e001      	b.n	8010abc <SX1276OnDio4Irq+0x2c>
        break;
 8010ab8:	bf00      	nop
 8010aba:	e000      	b.n	8010abe <SX1276OnDio4Irq+0x2e>
        break;
 8010abc:	bf00      	nop
    }
}
 8010abe:	bf00      	nop
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bc80      	pop	{r7}
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	20000ed8 	.word	0x20000ed8

08010acc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010ad4:	4b11      	ldr	r3, [pc, #68]	; (8010b1c <_sbrk+0x50>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d102      	bne.n	8010ae2 <_sbrk+0x16>
		heap_end = &end;
 8010adc:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <_sbrk+0x50>)
 8010ade:	4a10      	ldr	r2, [pc, #64]	; (8010b20 <_sbrk+0x54>)
 8010ae0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010ae2:	4b0e      	ldr	r3, [pc, #56]	; (8010b1c <_sbrk+0x50>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010ae8:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <_sbrk+0x50>)
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4413      	add	r3, r2
 8010af0:	466a      	mov	r2, sp
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d907      	bls.n	8010b06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010af6:	f000 fe8d 	bl	8011814 <__errno>
 8010afa:	4602      	mov	r2, r0
 8010afc:	230c      	movs	r3, #12
 8010afe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010b00:	f04f 33ff 	mov.w	r3, #4294967295
 8010b04:	e006      	b.n	8010b14 <_sbrk+0x48>
	}

	heap_end += incr;
 8010b06:	4b05      	ldr	r3, [pc, #20]	; (8010b1c <_sbrk+0x50>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	4a03      	ldr	r2, [pc, #12]	; (8010b1c <_sbrk+0x50>)
 8010b10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010b12:	68fb      	ldr	r3, [r7, #12]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3710      	adds	r7, #16
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	20000958 	.word	0x20000958
 8010b20:	20001578 	.word	0x20001578

08010b24 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010b24:	b480      	push	{r7}
 8010b26:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8010b28:	4b15      	ldr	r3, [pc, #84]	; (8010b80 <SystemInit+0x5c>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a14      	ldr	r2, [pc, #80]	; (8010b80 <SystemInit+0x5c>)
 8010b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b32:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8010b34:	4b12      	ldr	r3, [pc, #72]	; (8010b80 <SystemInit+0x5c>)
 8010b36:	689a      	ldr	r2, [r3, #8]
 8010b38:	4911      	ldr	r1, [pc, #68]	; (8010b80 <SystemInit+0x5c>)
 8010b3a:	4b12      	ldr	r3, [pc, #72]	; (8010b84 <SystemInit+0x60>)
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8010b40:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <SystemInit+0x5c>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a0e      	ldr	r2, [pc, #56]	; (8010b80 <SystemInit+0x5c>)
 8010b46:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8010b4a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8010b4e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010b50:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <SystemInit+0x5c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a0a      	ldr	r2, [pc, #40]	; (8010b80 <SystemInit+0x5c>)
 8010b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010b5a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8010b5c:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <SystemInit+0x5c>)
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	4a07      	ldr	r2, [pc, #28]	; (8010b80 <SystemInit+0x5c>)
 8010b62:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8010b66:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010b68:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <SystemInit+0x5c>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8010b6e:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <SystemInit+0x64>)
 8010b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010b74:	609a      	str	r2, [r3, #8]
#endif
}
 8010b76:	bf00      	nop
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bc80      	pop	{r7}
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	40023800 	.word	0x40023800
 8010b84:	88ffc00c 	.word	0x88ffc00c
 8010b88:	e000ed00 	.word	0xe000ed00

08010b8c <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	611a      	str	r2, [r3, #16]
}
 8010bb4:	bf00      	nop
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bc80      	pop	{r7}
 8010bbc:	4770      	bx	lr
	...

08010bc0 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60bb      	str	r3, [r7, #8]

    BoardDisableIrq( );
 8010bd0:	f7fa fc2e 	bl	800b430 <BoardDisableIrq>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d005      	beq.n	8010be6 <TimerStart+0x26>
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 f9d8 	bl	8010f90 <TimerExists>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <TimerStart+0x2c>
    {
        BoardEnableIrq( );
 8010be6:	f7fa fc33 	bl	800b450 <BoardEnableIrq>
        return;
 8010bea:	e03e      	b.n	8010c6a <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 8010bfa:	4b1d      	ldr	r3, [pc, #116]	; (8010c70 <TimerStart+0xb0>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4619      	mov	r1, r3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f8a1 	bl	8010d50 <TimerInsertNewHeadTimer>
 8010c0e:	e02a      	b.n	8010c66 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 8010c10:	4b17      	ldr	r3, [pc, #92]	; (8010c70 <TimerStart+0xb0>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	7a1b      	ldrb	r3, [r3, #8]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d013      	beq.n	8010c42 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 8010c1a:	f000 f9e7 	bl	8010fec <TimerGetValue>
 8010c1e:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 8010c20:	4b13      	ldr	r3, [pc, #76]	; (8010c70 <TimerStart+0xb0>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d903      	bls.n	8010c34 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 8010c2c:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <TimerStart+0xb0>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8010c34:	4b0e      	ldr	r3, [pc, #56]	; (8010c70 <TimerStart+0xb0>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	60bb      	str	r3, [r7, #8]
 8010c40:	e003      	b.n	8010c4a <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 8010c42:	4b0b      	ldr	r3, [pc, #44]	; (8010c70 <TimerStart+0xb0>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d904      	bls.n	8010c5e <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 8010c54:	68b9      	ldr	r1, [r7, #8]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f87a 	bl	8010d50 <TimerInsertNewHeadTimer>
 8010c5c:	e003      	b.n	8010c66 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 8010c5e:	68b9      	ldr	r1, [r7, #8]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 f807 	bl	8010c74 <TimerInsertTimer>
        }
    }
    BoardEnableIrq( );
 8010c66:	f7fa fbf3 	bl	800b450 <BoardEnableIrq>
}
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	20000960 	.word	0x20000960

08010c74 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8010c74:	b480      	push	{r7}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 8010c7e:	2300      	movs	r3, #0
 8010c80:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 8010c82:	2300      	movs	r3, #0
 8010c84:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 8010c86:	4b31      	ldr	r3, [pc, #196]	; (8010d4c <TimerInsertTimer+0xd8>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 8010c8c:	4b2f      	ldr	r3, [pc, #188]	; (8010d4c <TimerInsertTimer+0xd8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d10c      	bne.n	8010cb4 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	1ad2      	subs	r2, r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 8010cb2:	e045      	b.n	8010d40 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8010cc2:	e039      	b.n	8010d38 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	693a      	ldr	r2, [r7, #16]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d916      	bls.n	8010cfc <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	1ad2      	subs	r2, r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d006      	beq.n	8010cee <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	1ad2      	subs	r2, r2, r3
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	611a      	str	r2, [r3, #16]
                break;
 8010cfa:	e021      	b.n	8010d40 <TimerInsertTimer+0xcc>
                prev = cur;
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10e      	bne.n	8010d2a <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	1ad2      	subs	r2, r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	611a      	str	r2, [r3, #16]
                    break;
 8010d28:	e00a      	b.n	8010d40 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	693a      	ldr	r2, [r7, #16]
 8010d34:	4413      	add	r3, r2
 8010d36:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1c2      	bne.n	8010cc4 <TimerInsertTimer+0x50>
}
 8010d3e:	e7ff      	b.n	8010d40 <TimerInsertTimer+0xcc>
 8010d40:	bf00      	nop
 8010d42:	371c      	adds	r7, #28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bc80      	pop	{r7}
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	20000960 	.word	0x20000960

08010d50 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 8010d5a:	4b10      	ldr	r3, [pc, #64]	; (8010d9c <TimerInsertNewHeadTimer+0x4c>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d008      	beq.n	8010d78 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	1ad2      	subs	r2, r2, r3
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2200      	movs	r2, #0
 8010d76:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2201      	movs	r2, #1
 8010d82:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 8010d84:	4a05      	ldr	r2, [pc, #20]	; (8010d9c <TimerInsertNewHeadTimer+0x4c>)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8010d8a:	4b04      	ldr	r3, [pc, #16]	; (8010d9c <TimerInsertNewHeadTimer+0x4c>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 f946 	bl	8011020 <TimerSetTimeout>
}
 8010d94:	bf00      	nop
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20000960 	.word	0x20000960

08010da0 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 8010da6:	2300      	movs	r3, #0
 8010da8:	607b      	str	r3, [r7, #4]

    // Early out when TimerListHead is null to prevent null pointer
    if ( TimerListHead == NULL )
 8010daa:	4b28      	ldr	r3, [pc, #160]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d048      	beq.n	8010e44 <TimerIrqHandler+0xa4>
    {
        return;
    }

    elapsedTime = TimerGetValue( );
 8010db2:	f000 f91b 	bl	8010fec <TimerGetValue>
 8010db6:	6078      	str	r0, [r7, #4]

    if( elapsedTime >= TimerListHead->Timestamp )
 8010db8:	4b24      	ldr	r3, [pc, #144]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d304      	bcc.n	8010dce <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 8010dc4:	4b21      	ldr	r3, [pc, #132]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	601a      	str	r2, [r3, #0]
 8010dcc:	e007      	b.n	8010dde <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 8010dce:	4b1f      	ldr	r3, [pc, #124]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	4b1d      	ldr	r3, [pc, #116]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	1a8a      	subs	r2, r1, r2
 8010ddc:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 8010dde:	4b1b      	ldr	r3, [pc, #108]	; (8010e4c <TimerIrqHandler+0xac>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2200      	movs	r2, #0
 8010de4:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010de6:	e00e      	b.n	8010e06 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 8010de8:	4b18      	ldr	r3, [pc, #96]	; (8010e4c <TimerIrqHandler+0xac>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 8010dee:	4b17      	ldr	r3, [pc, #92]	; (8010e4c <TimerIrqHandler+0xac>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	4a15      	ldr	r2, [pc, #84]	; (8010e4c <TimerIrqHandler+0xac>)
 8010df6:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010e06:	4b11      	ldr	r3, [pc, #68]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d004      	beq.n	8010e18 <TimerIrqHandler+0x78>
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d0e7      	beq.n	8010de8 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8010e18:	4b0c      	ldr	r3, [pc, #48]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d012      	beq.n	8010e46 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 8010e20:	4b0a      	ldr	r3, [pc, #40]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	7a1b      	ldrb	r3, [r3, #8]
 8010e26:	f083 0301 	eor.w	r3, r3, #1
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00a      	beq.n	8010e46 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 8010e30:	4b06      	ldr	r3, [pc, #24]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2201      	movs	r2, #1
 8010e36:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 8010e38:	4b04      	ldr	r3, [pc, #16]	; (8010e4c <TimerIrqHandler+0xac>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 f8ef 	bl	8011020 <TimerSetTimeout>
 8010e42:	e000      	b.n	8010e46 <TimerIrqHandler+0xa6>
        return;
 8010e44:	bf00      	nop
        }
    }
}
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	20000960 	.word	0x20000960

08010e50 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
    BoardDisableIrq( );
 8010e58:	f7fa faea 	bl	800b430 <BoardDisableIrq>

    uint32_t elapsedTime = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 8010e64:	4b49      	ldr	r3, [pc, #292]	; (8010f8c <TimerStop+0x13c>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 8010e6a:	4b48      	ldr	r3, [pc, #288]	; (8010f8c <TimerStop+0x13c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8010e70:	4b46      	ldr	r3, [pc, #280]	; (8010f8c <TimerStop+0x13c>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <TimerStop+0x2e>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d102      	bne.n	8010e84 <TimerStop+0x34>
    {
        BoardEnableIrq( );
 8010e7e:	f7fa fae7 	bl	800b450 <BoardEnableIrq>
        return;
 8010e82:	e080      	b.n	8010f86 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 8010e84:	4b41      	ldr	r3, [pc, #260]	; (8010f8c <TimerStop+0x13c>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d152      	bne.n	8010f34 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 8010e8e:	4b3f      	ldr	r3, [pc, #252]	; (8010f8c <TimerStop+0x13c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	7a1b      	ldrb	r3, [r3, #8]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d033      	beq.n	8010f00 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 8010e98:	f000 f8a8 	bl	8010fec <TimerGetValue>
 8010e9c:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	697a      	ldr	r2, [r7, #20]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d902      	bls.n	8010eae <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 8010eb8:	4b34      	ldr	r3, [pc, #208]	; (8010f8c <TimerStop+0x13c>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d01a      	beq.n	8010ef8 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 8010ec2:	4b32      	ldr	r3, [pc, #200]	; (8010f8c <TimerStop+0x13c>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 8010eca:	4b30      	ldr	r3, [pc, #192]	; (8010f8c <TimerStop+0x13c>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	691b      	ldr	r3, [r3, #16]
 8010ed0:	4a2e      	ldr	r2, [pc, #184]	; (8010f8c <TimerStop+0x13c>)
 8010ed2:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8010ed4:	4b2d      	ldr	r3, [pc, #180]	; (8010f8c <TimerStop+0x13c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	6819      	ldr	r1, [r3, #0]
 8010eda:	4b2c      	ldr	r3, [pc, #176]	; (8010f8c <TimerStop+0x13c>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	440a      	add	r2, r1
 8010ee2:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8010ee4:	4b29      	ldr	r3, [pc, #164]	; (8010f8c <TimerStop+0x13c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 8010eec:	4b27      	ldr	r3, [pc, #156]	; (8010f8c <TimerStop+0x13c>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 f895 	bl	8011020 <TimerSetTimeout>
 8010ef6:	e044      	b.n	8010f82 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8010ef8:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <TimerStop+0x13c>)
 8010efa:	2200      	movs	r2, #0
 8010efc:	601a      	str	r2, [r3, #0]
 8010efe:	e040      	b.n	8010f82 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8010f00:	4b22      	ldr	r3, [pc, #136]	; (8010f8c <TimerStop+0x13c>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d010      	beq.n	8010f2c <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8010f10:	4b1e      	ldr	r3, [pc, #120]	; (8010f8c <TimerStop+0x13c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	4a1d      	ldr	r2, [pc, #116]	; (8010f8c <TimerStop+0x13c>)
 8010f18:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8010f1a:	4b1c      	ldr	r3, [pc, #112]	; (8010f8c <TimerStop+0x13c>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6819      	ldr	r1, [r3, #0]
 8010f20:	4b1a      	ldr	r3, [pc, #104]	; (8010f8c <TimerStop+0x13c>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	440a      	add	r2, r1
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	e02a      	b.n	8010f82 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8010f2c:	4b17      	ldr	r3, [pc, #92]	; (8010f8c <TimerStop+0x13c>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	601a      	str	r2, [r3, #0]
 8010f32:	e026      	b.n	8010f82 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 8010f3a:	e01f      	b.n	8010f7c <TimerStop+0x12c>
        {
            if( cur == obj )
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d116      	bne.n	8010f72 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00c      	beq.n	8010f66 <TimerStop+0x116>
                {
                    cur = cur->Next;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	441a      	add	r2, r3
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8010f64:	e00d      	b.n	8010f82 <TimerStop+0x132>
                    cur = NULL;
 8010f66:	2300      	movs	r3, #0
 8010f68:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	611a      	str	r2, [r3, #16]
                break;
 8010f70:	e007      	b.n	8010f82 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1dc      	bne.n	8010f3c <TimerStop+0xec>
            }
        }
    }
    BoardEnableIrq( );
 8010f82:	f7fa fa65 	bl	800b450 <BoardEnableIrq>
}
 8010f86:	3718      	adds	r7, #24
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20000960 	.word	0x20000960

08010f90 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8010f90:	b480      	push	{r7}
 8010f92:	b085      	sub	sp, #20
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8010f98:	4b0a      	ldr	r3, [pc, #40]	; (8010fc4 <TimerExists+0x34>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8010f9e:	e008      	b.n	8010fb2 <TimerExists+0x22>
    {
        if( cur == obj )
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d101      	bne.n	8010fac <TimerExists+0x1c>
        {
            return true;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	e006      	b.n	8010fba <TimerExists+0x2a>
        }
        cur = cur->Next;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1f3      	bne.n	8010fa0 <TimerExists+0x10>
    }
    return false;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bc80      	pop	{r7}
 8010fc2:	4770      	bx	lr
 8010fc4:	20000960 	.word	0x20000960

08010fc8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff ff3c 	bl	8010e50 <TimerStop>
    obj->Timestamp = value;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	683a      	ldr	r2, [r7, #0]
 8010fdc:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	605a      	str	r2, [r3, #4]
}
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8010ff0:	f7fc fa18 	bl	800d424 <RtcGetElapsedAlarmTime>
 8010ff4:	4603      	mov	r3, r0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	af00      	add	r7, sp, #0
    return RtcGetTimerValue( );
 8010ffe:	f7fc fa09 	bl	800d414 <RtcGetTimerValue>
 8011002:	4603      	mov	r3, r0
}
 8011004:	4618      	mov	r0, r3
 8011006:	bd80      	pop	{r7, pc}

08011008 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t savedTime )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
    return RtcComputeElapsedTime( savedTime );
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7fc fa29 	bl	800d468 <RtcComputeElapsedTime>
 8011016:	4603      	mov	r3, r0
}
 8011018:	4618      	mov	r0, r3
 801101a:	3708      	adds	r7, #8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8011028:	4b09      	ldr	r3, [pc, #36]	; (8011050 <TimerSetTimeout+0x30>)
 801102a:	2200      	movs	r2, #0
 801102c:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp );
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4618      	mov	r0, r3
 8011034:	f7fc f9b8 	bl	800d3a8 <RtcGetAdjustedTimeoutValue>
 8011038:	4602      	mov	r2, r0
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4618      	mov	r0, r3
 8011044:	f7fc f9a4 	bl	800d390 <RtcSetTimeout>
}
 8011048:	bf00      	nop
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	2000095c 	.word	0x2000095c

08011054 <TimerLowPowerHandler>:

void TimerLowPowerHandler( void )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	af00      	add	r7, sp, #0
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == true ) )
 8011058:	4b10      	ldr	r3, [pc, #64]	; (801109c <TimerLowPowerHandler+0x48>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d01b      	beq.n	8011098 <TimerLowPowerHandler+0x44>
 8011060:	4b0e      	ldr	r3, [pc, #56]	; (801109c <TimerLowPowerHandler+0x48>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	7a1b      	ldrb	r3, [r3, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d016      	beq.n	8011098 <TimerLowPowerHandler+0x44>
    {
        if( HasLoopedThroughMain < 5 )
 801106a:	4b0d      	ldr	r3, [pc, #52]	; (80110a0 <TimerLowPowerHandler+0x4c>)
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b04      	cmp	r3, #4
 8011072:	d807      	bhi.n	8011084 <TimerLowPowerHandler+0x30>
        {
            HasLoopedThroughMain++;
 8011074:	4b0a      	ldr	r3, [pc, #40]	; (80110a0 <TimerLowPowerHandler+0x4c>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	b2db      	uxtb	r3, r3
 801107a:	3301      	adds	r3, #1
 801107c:	b2da      	uxtb	r2, r3
 801107e:	4b08      	ldr	r3, [pc, #32]	; (80110a0 <TimerLowPowerHandler+0x4c>)
 8011080:	701a      	strb	r2, [r3, #0]
                RtcEnterLowPowerStopMode( );
#endif
            }
        }
    }
}
 8011082:	e009      	b.n	8011098 <TimerLowPowerHandler+0x44>
            HasLoopedThroughMain = 0;
 8011084:	4b06      	ldr	r3, [pc, #24]	; (80110a0 <TimerLowPowerHandler+0x4c>)
 8011086:	2200      	movs	r2, #0
 8011088:	701a      	strb	r2, [r3, #0]
            if( GetBoardPowerSource( ) == BATTERY_POWER )
 801108a:	f7fa fd0b 	bl	800baa4 <GetBoardPowerSource>
 801108e:	4603      	mov	r3, r0
 8011090:	2b01      	cmp	r3, #1
 8011092:	d101      	bne.n	8011098 <TimerLowPowerHandler+0x44>
                RtcEnterLowPowerStopMode( );
 8011094:	f7fc fa1c 	bl	800d4d0 <RtcEnterLowPowerStopMode>
}
 8011098:	bf00      	nop
 801109a:	bd80      	pop	{r7, pc}
 801109c:	20000960 	.word	0x20000960
 80110a0:	2000095c 	.word	0x2000095c

080110a4 <UartMcuPutChar>:
    GpioInit( &obj->Tx, obj->Tx.pin, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Rx, obj->Rx.pin, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t UartMcuPutChar( Uart_t *obj, uint8_t data )
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	70fb      	strb	r3, [r7, #3]
    BoardDisableIrq( );
 80110b0:	f7fa f9be 	bl	800b430 <BoardDisableIrq>
    TxData = data;
 80110b4:	4a14      	ldr	r2, [pc, #80]	; (8011108 <UartMcuPutChar+0x64>)
 80110b6:	78fb      	ldrb	r3, [r7, #3]
 80110b8:	7013      	strb	r3, [r2, #0]

    if( IsFifoFull( &obj->FifoTx ) == false )
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	331c      	adds	r3, #28
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fb f82b 	bl	800c11a <IsFifoFull>
 80110c4:	4603      	mov	r3, r0
 80110c6:	f083 0301 	eor.w	r3, r3, #1
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d014      	beq.n	80110fa <UartMcuPutChar+0x56>
    {
        FifoPush( &obj->FifoTx, TxData );
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f103 021c 	add.w	r2, r3, #28
 80110d6:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <UartMcuPutChar+0x64>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	4619      	mov	r1, r3
 80110dc:	4610      	mov	r0, r2
 80110de:	f7fa ffd0 	bl	800c082 <FifoPush>

        // Trig UART Tx interrupt to start sending the FIFO contents.
        __HAL_UART_ENABLE_IT( &UartHandle, UART_IT_TC );
 80110e2:	4b0a      	ldr	r3, [pc, #40]	; (801110c <UartMcuPutChar+0x68>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68da      	ldr	r2, [r3, #12]
 80110e8:	4b08      	ldr	r3, [pc, #32]	; (801110c <UartMcuPutChar+0x68>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110f0:	60da      	str	r2, [r3, #12]

        BoardEnableIrq( );
 80110f2:	f7fa f9ad 	bl	800b450 <BoardEnableIrq>
        return 0; // OK
 80110f6:	2300      	movs	r3, #0
 80110f8:	e002      	b.n	8011100 <UartMcuPutChar+0x5c>
    }
    BoardEnableIrq( );
 80110fa:	f7fa f9a9 	bl	800b450 <BoardEnableIrq>
    return 1; // Busy
 80110fe:	2301      	movs	r3, #1
}
 8011100:	4618      	mov	r0, r3
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	20000965 	.word	0x20000965
 801110c:	2000102c 	.word	0x2000102c

08011110 <HAL_UART_TxCpltCallback>:
    BoardEnableIrq( );
    return 1;
}

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *handle )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
    if( IsFifoEmpty( &Uart1.FifoTx ) == false )
 8011118:	4810      	ldr	r0, [pc, #64]	; (801115c <HAL_UART_TxCpltCallback+0x4c>)
 801111a:	f7fa ffec 	bl	800c0f6 <IsFifoEmpty>
 801111e:	4603      	mov	r3, r0
 8011120:	f083 0301 	eor.w	r3, r3, #1
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <HAL_UART_TxCpltCallback+0x32>
    {
        TxData = FifoPop( &Uart1.FifoTx );
 801112a:	480c      	ldr	r0, [pc, #48]	; (801115c <HAL_UART_TxCpltCallback+0x4c>)
 801112c:	f7fa ffc4 	bl	800c0b8 <FifoPop>
 8011130:	4603      	mov	r3, r0
 8011132:	461a      	mov	r2, r3
 8011134:	4b0a      	ldr	r3, [pc, #40]	; (8011160 <HAL_UART_TxCpltCallback+0x50>)
 8011136:	701a      	strb	r2, [r3, #0]
        //  Write one byte to the transmit data register
        HAL_UART_Transmit_IT( &UartHandle, &TxData, 1 );
 8011138:	2201      	movs	r2, #1
 801113a:	4909      	ldr	r1, [pc, #36]	; (8011160 <HAL_UART_TxCpltCallback+0x50>)
 801113c:	4809      	ldr	r0, [pc, #36]	; (8011164 <HAL_UART_TxCpltCallback+0x54>)
 801113e:	f7f2 fffc 	bl	800413a <HAL_UART_Transmit_IT>
    }

    if( Uart1.IrqNotify != NULL )
 8011142:	4b09      	ldr	r3, [pc, #36]	; (8011168 <HAL_UART_TxCpltCallback+0x58>)
 8011144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011146:	2b00      	cmp	r3, #0
 8011148:	d003      	beq.n	8011152 <HAL_UART_TxCpltCallback+0x42>
    {
        Uart1.IrqNotify( UART_NOTIFY_TX );
 801114a:	4b07      	ldr	r3, [pc, #28]	; (8011168 <HAL_UART_TxCpltCallback+0x58>)
 801114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801114e:	2000      	movs	r0, #0
 8011150:	4798      	blx	r3
    }
}
 8011152:	bf00      	nop
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	20000a04 	.word	0x20000a04
 8011160:	20000965 	.word	0x20000965
 8011164:	2000102c 	.word	0x2000102c
 8011168:	200009e8 	.word	0x200009e8

0801116c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *handle )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
    if( IsFifoFull( &Uart1.FifoRx ) == false )
 8011174:	480f      	ldr	r0, [pc, #60]	; (80111b4 <HAL_UART_RxCpltCallback+0x48>)
 8011176:	f7fa ffd0 	bl	800c11a <IsFifoFull>
 801117a:	4603      	mov	r3, r0
 801117c:	f083 0301 	eor.w	r3, r3, #1
 8011180:	b2db      	uxtb	r3, r3
 8011182:	2b00      	cmp	r3, #0
 8011184:	d005      	beq.n	8011192 <HAL_UART_RxCpltCallback+0x26>
    {
        // Read one byte from the receive data register
        FifoPush( &Uart1.FifoRx, RxData );
 8011186:	4b0c      	ldr	r3, [pc, #48]	; (80111b8 <HAL_UART_RxCpltCallback+0x4c>)
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	4619      	mov	r1, r3
 801118c:	4809      	ldr	r0, [pc, #36]	; (80111b4 <HAL_UART_RxCpltCallback+0x48>)
 801118e:	f7fa ff78 	bl	800c082 <FifoPush>
    }

    if( Uart1.IrqNotify != NULL )
 8011192:	4b0a      	ldr	r3, [pc, #40]	; (80111bc <HAL_UART_RxCpltCallback+0x50>)
 8011194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <HAL_UART_RxCpltCallback+0x36>
    {
        Uart1.IrqNotify( UART_NOTIFY_RX );
 801119a:	4b08      	ldr	r3, [pc, #32]	; (80111bc <HAL_UART_RxCpltCallback+0x50>)
 801119c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801119e:	2001      	movs	r0, #1
 80111a0:	4798      	blx	r3
    }

    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 80111a2:	2201      	movs	r2, #1
 80111a4:	4904      	ldr	r1, [pc, #16]	; (80111b8 <HAL_UART_RxCpltCallback+0x4c>)
 80111a6:	4806      	ldr	r0, [pc, #24]	; (80111c0 <HAL_UART_RxCpltCallback+0x54>)
 80111a8:	f7f3 f80b 	bl	80041c2 <HAL_UART_Receive_IT>
}
 80111ac:	bf00      	nop
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	20000a10 	.word	0x20000a10
 80111b8:	20000964 	.word	0x20000964
 80111bc:	200009e8 	.word	0x200009e8
 80111c0:	2000102c 	.word	0x2000102c

080111c4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback( UART_HandleTypeDef *handle )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 80111cc:	2201      	movs	r2, #1
 80111ce:	4904      	ldr	r1, [pc, #16]	; (80111e0 <HAL_UART_ErrorCallback+0x1c>)
 80111d0:	4804      	ldr	r0, [pc, #16]	; (80111e4 <HAL_UART_ErrorCallback+0x20>)
 80111d2:	f7f2 fff6 	bl	80041c2 <HAL_UART_Receive_IT>
}
 80111d6:	bf00      	nop
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	20000964 	.word	0x20000964
 80111e4:	2000102c 	.word	0x2000102c

080111e8 <USART1_IRQHandler>:

void USART1_IRQHandler( void )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler( &UartHandle );
 80111ec:	4802      	ldr	r0, [pc, #8]	; (80111f8 <USART1_IRQHandler+0x10>)
 80111ee:	f7f3 f83d 	bl	800426c <HAL_UART_IRQHandler>
}
 80111f2:	bf00      	nop
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	2000102c 	.word	0x2000102c

080111fc <UartPutChar>:
        UartMcuDeInit( obj );
    }
}

uint8_t UartPutChar( Uart_t *obj, uint8_t data )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	460b      	mov	r3, r1
 8011206:	70fb      	strb	r3, [r7, #3]
    if( obj->UartId == UART_USB_CDC )
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	2bff      	cmp	r3, #255	; 0xff
 801120e:	d101      	bne.n	8011214 <UartPutChar+0x18>
    {
#if defined( USE_USB_CDC )
        return UartUsbPutChar( obj, data );
#else
        return 255; // Not supported
 8011210:	23ff      	movs	r3, #255	; 0xff
 8011212:	e005      	b.n	8011220 <UartPutChar+0x24>
#endif
    }
    else
    {
        return UartMcuPutChar( obj, data );
 8011214:	78fb      	ldrb	r3, [r7, #3]
 8011216:	4619      	mov	r1, r3
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7ff ff43 	bl	80110a4 <UartMcuPutChar>
 801121e:	4603      	mov	r3, r0
    }
}
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <UartPutBuffer>:
        return UartMcuGetChar( obj, data );
    }
}

uint8_t UartPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b086      	sub	sp, #24
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	4613      	mov	r3, r2
 8011234:	80fb      	strh	r3, [r7, #6]
    if( obj->UartId == UART_USB_CDC )
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2bff      	cmp	r3, #255	; 0xff
 801123c:	d101      	bne.n	8011242 <UartPutBuffer+0x1a>
    {
#if defined( USE_USB_CDC )
        return UartUsbPutBuffer( obj, buffer, size );
#else
        return 255; // Not supported
 801123e:	23ff      	movs	r3, #255	; 0xff
 8011240:	e020      	b.n	8011284 <UartPutBuffer+0x5c>
    else
    {
        uint8_t retryCount;
        uint16_t i;

        for( i = 0; i < size; i++ )
 8011242:	2300      	movs	r3, #0
 8011244:	82bb      	strh	r3, [r7, #20]
 8011246:	e018      	b.n	801127a <UartPutBuffer+0x52>
        {
            retryCount = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	75fb      	strb	r3, [r7, #23]
            while( UartPutChar( obj, buffer[i] ) != 0 )
 801124c:	e007      	b.n	801125e <UartPutBuffer+0x36>
            {
                retryCount++;
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	3301      	adds	r3, #1
 8011252:	75fb      	strb	r3, [r7, #23]

                // Exit if something goes terribly wrong
                if( retryCount > TX_BUFFER_RETRY_COUNT )
 8011254:	7dfb      	ldrb	r3, [r7, #23]
 8011256:	2b0a      	cmp	r3, #10
 8011258:	d901      	bls.n	801125e <UartPutBuffer+0x36>
                {
                    return 1; // Error
 801125a:	2301      	movs	r3, #1
 801125c:	e012      	b.n	8011284 <UartPutBuffer+0x5c>
            while( UartPutChar( obj, buffer[i] ) != 0 )
 801125e:	8abb      	ldrh	r3, [r7, #20]
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	4413      	add	r3, r2
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	4619      	mov	r1, r3
 8011268:	68f8      	ldr	r0, [r7, #12]
 801126a:	f7ff ffc7 	bl	80111fc <UartPutChar>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1ec      	bne.n	801124e <UartPutBuffer+0x26>
        for( i = 0; i < size; i++ )
 8011274:	8abb      	ldrh	r3, [r7, #20]
 8011276:	3301      	adds	r3, #1
 8011278:	82bb      	strh	r3, [r7, #20]
 801127a:	8aba      	ldrh	r2, [r7, #20]
 801127c:	88fb      	ldrh	r3, [r7, #6]
 801127e:	429a      	cmp	r2, r3
 8011280:	d3e2      	bcc.n	8011248 <UartPutBuffer+0x20>
                }
            }
        }
        return 0; // OK
 8011282:	2300      	movs	r3, #0
    }
}
 8011284:	4618      	mov	r0, r3
 8011286:	3718      	adds	r7, #24
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <DebugPrintf>:

void  DebugPrintf (char  *p_fmt, ...)
{
 801128c:	b40f      	push	{r0, r1, r2, r3}
 801128e:	b580      	push	{r7, lr}
 8011290:	b0b4      	sub	sp, #208	; 0xd0
 8011292:	af00      	add	r7, sp, #0
        uint8_t  len;

        va_list     vArgs;


        va_start(vArgs, p_fmt);
 8011294:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

        vsprintf((char       *)str,
 801129c:	463b      	mov	r3, r7
 801129e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80112a2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 fb1c 	bl	80118e4 <vsiprintf>
                 (char const *)p_fmt,
                               vArgs);

        va_end(vArgs);

        len = strlen(str);
 80112ac:	463b      	mov	r3, r7
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7ee ff66 	bl	8000180 <strlen>
 80112b4:	4603      	mov	r3, r0
 80112b6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
        CDC_Transmit_FS((uint8_t*) str, len);
 80112ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80112be:	b29a      	uxth	r2, r3
 80112c0:	463b      	mov	r3, r7
 80112c2:	4611      	mov	r1, r2
 80112c4:	4618      	mov	r0, r3
 80112c6:	f000 f811 	bl	80112ec <CDC_Transmit_FS>
        UartPutBuffer(&Uart1, (uint8_t *)str, len);
 80112ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	463b      	mov	r3, r7
 80112d2:	4619      	mov	r1, r3
 80112d4:	4804      	ldr	r0, [pc, #16]	; (80112e8 <DebugPrintf+0x5c>)
 80112d6:	f7ff ffa7 	bl	8011228 <UartPutBuffer>
    }

}
 80112da:	bf00      	nop
 80112dc:	37d0      	adds	r7, #208	; 0xd0
 80112de:	46bd      	mov	sp, r7
 80112e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112e4:	b004      	add	sp, #16
 80112e6:	4770      	bx	lr
 80112e8:	200009e8 	.word	0x200009e8

080112ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <CDC_Transmit_FS+0x48>)
 80112fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011302:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801130e:	2301      	movs	r3, #1
 8011310:	e00b      	b.n	801132a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011312:	887b      	ldrh	r3, [r7, #2]
 8011314:	461a      	mov	r2, r3
 8011316:	6879      	ldr	r1, [r7, #4]
 8011318:	4806      	ldr	r0, [pc, #24]	; (8011334 <CDC_Transmit_FS+0x48>)
 801131a:	f7f4 f8eb 	bl	80054f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801131e:	4805      	ldr	r0, [pc, #20]	; (8011334 <CDC_Transmit_FS+0x48>)
 8011320:	f7f4 f901 	bl	8005526 <USBD_CDC_TransmitPacket>
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011328:	7bfb      	ldrb	r3, [r7, #15]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	2000106c 	.word	0x2000106c

08011338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801134c:	4619      	mov	r1, r3
 801134e:	4610      	mov	r0, r2
 8011350:	f7f4 f954 	bl	80055fc <USBD_LL_SetupStage>
}
 8011354:	bf00      	nop
 8011356:	3708      	adds	r7, #8
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	460b      	mov	r3, r1
 8011366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 801136e:	78fb      	ldrb	r3, [r7, #3]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	015b      	lsls	r3, r3, #5
 8011374:	4413      	add	r3, r2
 8011376:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	78fb      	ldrb	r3, [r7, #3]
 801137e:	4619      	mov	r1, r3
 8011380:	f7f4 f987 	bl	8005692 <USBD_LL_DataOutStage>
}
 8011384:	bf00      	nop
 8011386:	3708      	adds	r7, #8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	460b      	mov	r3, r1
 8011396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 801139e:	78fb      	ldrb	r3, [r7, #3]
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	015b      	lsls	r3, r3, #5
 80113a4:	4413      	add	r3, r2
 80113a6:	333c      	adds	r3, #60	; 0x3c
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	78fb      	ldrb	r3, [r7, #3]
 80113ac:	4619      	mov	r1, r3
 80113ae:	f7f4 f9e1 	bl	8005774 <USBD_LL_DataInStage>
}
 80113b2:	bf00      	nop
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f4 faec 	bl	80059a6 <USBD_LL_SOF>
}
 80113ce:	bf00      	nop
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b084      	sub	sp, #16
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80113de:	2301      	movs	r3, #1
 80113e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	689b      	ldr	r3, [r3, #8]
 80113e6:	2b02      	cmp	r3, #2
 80113e8:	d001      	beq.n	80113ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80113ea:	f7fb ff6d 	bl	800d2c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113f4:	7bfa      	ldrb	r2, [r7, #15]
 80113f6:	4611      	mov	r1, r2
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f4 faa1 	bl	8005940 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011404:	4618      	mov	r0, r3
 8011406:	f7f4 fa5a 	bl	80058be <USBD_LL_Reset>
}
 801140a:	bf00      	nop
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
	...

08011414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011422:	4618      	mov	r0, r3
 8011424:	f7f4 fa9b 	bl	800595e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d005      	beq.n	801143c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011430:	4b04      	ldr	r3, [pc, #16]	; (8011444 <HAL_PCD_SuspendCallback+0x30>)
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	4a03      	ldr	r2, [pc, #12]	; (8011444 <HAL_PCD_SuspendCallback+0x30>)
 8011436:	f043 0306 	orr.w	r3, r3, #6
 801143a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801143c:	bf00      	nop
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	e000ed00 	.word	0xe000ed00

08011448 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011456:	4618      	mov	r0, r3
 8011458:	f7f4 fa95 	bl	8005986 <USBD_LL_Resume>
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	4608      	mov	r0, r1
 801146e:	4611      	mov	r1, r2
 8011470:	461a      	mov	r2, r3
 8011472:	4603      	mov	r3, r0
 8011474:	70fb      	strb	r3, [r7, #3]
 8011476:	460b      	mov	r3, r1
 8011478:	70bb      	strb	r3, [r7, #2]
 801147a:	4613      	mov	r3, r2
 801147c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801147e:	2300      	movs	r3, #0
 8011480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801148c:	78bb      	ldrb	r3, [r7, #2]
 801148e:	883a      	ldrh	r2, [r7, #0]
 8011490:	78f9      	ldrb	r1, [r7, #3]
 8011492:	f7f0 fd4a 	bl	8001f2a <HAL_PCD_EP_Open>
 8011496:	4603      	mov	r3, r0
 8011498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801149a:	7bfb      	ldrb	r3, [r7, #15]
 801149c:	4618      	mov	r0, r3
 801149e:	f000 f8cf 	bl	8011640 <USBD_Get_USB_Status>
 80114a2:	4603      	mov	r3, r0
 80114a4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80114a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	460b      	mov	r3, r1
 80114ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80114ca:	78fa      	ldrb	r2, [r7, #3]
 80114cc:	4611      	mov	r1, r2
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7f0 fdfe 	bl	80020d0 <HAL_PCD_EP_SetStall>
 80114d4:	4603      	mov	r3, r0
 80114d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114d8:	7bfb      	ldrb	r3, [r7, #15]
 80114da:	4618      	mov	r0, r3
 80114dc:	f000 f8b0 	bl	8011640 <USBD_Get_USB_Status>
 80114e0:	4603      	mov	r3, r0
 80114e2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80114e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b084      	sub	sp, #16
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	460b      	mov	r3, r1
 80114f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011508:	78fa      	ldrb	r2, [r7, #3]
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f7f0 fe39 	bl	8002184 <HAL_PCD_EP_ClrStall>
 8011512:	4603      	mov	r3, r0
 8011514:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011516:	7bfb      	ldrb	r3, [r7, #15]
 8011518:	4618      	mov	r0, r3
 801151a:	f000 f891 	bl	8011640 <USBD_Get_USB_Status>
 801151e:	4603      	mov	r3, r0
 8011520:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8011522:	7bbb      	ldrb	r3, [r7, #14]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	460b      	mov	r3, r1
 8011536:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801153e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011544:	2b00      	cmp	r3, #0
 8011546:	da08      	bge.n	801155a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8011548:	78fb      	ldrb	r3, [r7, #3]
 801154a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801154e:	68fa      	ldr	r2, [r7, #12]
 8011550:	015b      	lsls	r3, r3, #5
 8011552:	4413      	add	r3, r2
 8011554:	332a      	adds	r3, #42	; 0x2a
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	e008      	b.n	801156c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801155a:	78fb      	ldrb	r3, [r7, #3]
 801155c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	015b      	lsls	r3, r3, #5
 8011564:	4413      	add	r3, r2
 8011566:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801156a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801156c:	4618      	mov	r0, r3
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	bc80      	pop	{r7}
 8011574:	4770      	bx	lr

08011576 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b084      	sub	sp, #16
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	460b      	mov	r3, r1
 8011580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011582:	2300      	movs	r3, #0
 8011584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011586:	2300      	movs	r3, #0
 8011588:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011590:	78fa      	ldrb	r2, [r7, #3]
 8011592:	4611      	mov	r1, r2
 8011594:	4618      	mov	r0, r3
 8011596:	f7f0 fca3 	bl	8001ee0 <HAL_PCD_SetAddress>
 801159a:	4603      	mov	r3, r0
 801159c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f000 f84d 	bl	8011640 <USBD_Get_USB_Status>
 80115a6:	4603      	mov	r3, r0
 80115a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80115aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	607a      	str	r2, [r7, #4]
 80115be:	461a      	mov	r2, r3
 80115c0:	460b      	mov	r3, r1
 80115c2:	72fb      	strb	r3, [r7, #11]
 80115c4:	4613      	mov	r3, r2
 80115c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c8:	2300      	movs	r3, #0
 80115ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80115d6:	893b      	ldrh	r3, [r7, #8]
 80115d8:	7af9      	ldrb	r1, [r7, #11]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	f7f0 fd3f 	bl	800205e <HAL_PCD_EP_Transmit>
 80115e0:	4603      	mov	r3, r0
 80115e2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f000 f82a 	bl	8011640 <USBD_Get_USB_Status>
 80115ec:	4603      	mov	r3, r0
 80115ee:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80115f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3718      	adds	r7, #24
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b086      	sub	sp, #24
 80115fe:	af00      	add	r7, sp, #0
 8011600:	60f8      	str	r0, [r7, #12]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	461a      	mov	r2, r3
 8011606:	460b      	mov	r3, r1
 8011608:	72fb      	strb	r3, [r7, #11]
 801160a:	4613      	mov	r3, r2
 801160c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801161c:	893b      	ldrh	r3, [r7, #8]
 801161e:	7af9      	ldrb	r1, [r7, #11]
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	f7f0 fce2 	bl	8001fea <HAL_PCD_EP_Receive>
 8011626:	4603      	mov	r3, r0
 8011628:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801162a:	7dfb      	ldrb	r3, [r7, #23]
 801162c:	4618      	mov	r0, r3
 801162e:	f000 f807 	bl	8011640 <USBD_Get_USB_Status>
 8011632:	4603      	mov	r3, r0
 8011634:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8011636:	7dbb      	ldrb	r3, [r7, #22]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3718      	adds	r7, #24
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	4603      	mov	r3, r0
 8011648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801164a:	2300      	movs	r3, #0
 801164c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801164e:	79fb      	ldrb	r3, [r7, #7]
 8011650:	2b03      	cmp	r3, #3
 8011652:	d817      	bhi.n	8011684 <USBD_Get_USB_Status+0x44>
 8011654:	a201      	add	r2, pc, #4	; (adr r2, 801165c <USBD_Get_USB_Status+0x1c>)
 8011656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165a:	bf00      	nop
 801165c:	0801166d 	.word	0x0801166d
 8011660:	08011673 	.word	0x08011673
 8011664:	08011679 	.word	0x08011679
 8011668:	0801167f 	.word	0x0801167f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801166c:	2300      	movs	r3, #0
 801166e:	73fb      	strb	r3, [r7, #15]
    break;
 8011670:	e00b      	b.n	801168a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011672:	2302      	movs	r3, #2
 8011674:	73fb      	strb	r3, [r7, #15]
    break;
 8011676:	e008      	b.n	801168a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011678:	2301      	movs	r3, #1
 801167a:	73fb      	strb	r3, [r7, #15]
    break;
 801167c:	e005      	b.n	801168a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801167e:	2302      	movs	r3, #2
 8011680:	73fb      	strb	r3, [r7, #15]
    break;
 8011682:	e002      	b.n	801168a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011684:	2302      	movs	r3, #2
 8011686:	73fb      	strb	r3, [r7, #15]
    break;
 8011688:	bf00      	nop
  }
  return usb_status;
 801168a:	7bfb      	ldrb	r3, [r7, #15]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	bc80      	pop	{r7}
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop

08011698 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8011698:	b480      	push	{r7}
 801169a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <rand1+0x3c>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a0d      	ldr	r2, [pc, #52]	; (80116d8 <rand1+0x40>)
 80116a2:	fb02 f303 	mul.w	r3, r2, r3
 80116a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80116aa:	3339      	adds	r3, #57	; 0x39
 80116ac:	4a09      	ldr	r2, [pc, #36]	; (80116d4 <rand1+0x3c>)
 80116ae:	6013      	str	r3, [r2, #0]
 80116b0:	4b08      	ldr	r3, [pc, #32]	; (80116d4 <rand1+0x3c>)
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	2303      	movs	r3, #3
 80116b6:	fba3 1302 	umull	r1, r3, r3, r2
 80116ba:	1ad1      	subs	r1, r2, r3
 80116bc:	0849      	lsrs	r1, r1, #1
 80116be:	440b      	add	r3, r1
 80116c0:	0f99      	lsrs	r1, r3, #30
 80116c2:	460b      	mov	r3, r1
 80116c4:	07db      	lsls	r3, r3, #31
 80116c6:	1a5b      	subs	r3, r3, r1
 80116c8:	1ad1      	subs	r1, r2, r3
 80116ca:	460b      	mov	r3, r1
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bc80      	pop	{r7}
 80116d2:	4770      	bx	lr
 80116d4:	20000130 	.word	0x20000130
 80116d8:	41c64e6d 	.word	0x41c64e6d

080116dc <srand1>:

void srand1( uint32_t seed )
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
    next = seed;
 80116e4:	4a03      	ldr	r2, [pc, #12]	; (80116f4 <srand1+0x18>)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6013      	str	r3, [r2, #0]
}
 80116ea:	bf00      	nop
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bc80      	pop	{r7}
 80116f2:	4770      	bx	lr
 80116f4:	20000130 	.word	0x20000130

080116f8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8011702:	f7ff ffc9 	bl	8011698 <rand1>
 8011706:	4602      	mov	r2, r0
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	1acb      	subs	r3, r1, r3
 801170e:	3301      	adds	r3, #1
 8011710:	fb92 f1f3 	sdiv	r1, r2, r3
 8011714:	fb03 f301 	mul.w	r3, r3, r1
 8011718:	1ad2      	subs	r2, r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4413      	add	r3, r2
}
 801171e:	4618      	mov	r0, r3
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}

08011726 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8011726:	b480      	push	{r7}
 8011728:	b085      	sub	sp, #20
 801172a:	af00      	add	r7, sp, #0
 801172c:	60f8      	str	r0, [r7, #12]
 801172e:	60b9      	str	r1, [r7, #8]
 8011730:	4613      	mov	r3, r2
 8011732:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8011734:	e007      	b.n	8011746 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8011736:	68ba      	ldr	r2, [r7, #8]
 8011738:	1c53      	adds	r3, r2, #1
 801173a:	60bb      	str	r3, [r7, #8]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	1c59      	adds	r1, r3, #1
 8011740:	60f9      	str	r1, [r7, #12]
 8011742:	7812      	ldrb	r2, [r2, #0]
 8011744:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8011746:	88fb      	ldrh	r3, [r7, #6]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	80fa      	strh	r2, [r7, #6]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d1f2      	bne.n	8011736 <memcpy1+0x10>
    }
}
 8011750:	bf00      	nop
 8011752:	3714      	adds	r7, #20
 8011754:	46bd      	mov	sp, r7
 8011756:	bc80      	pop	{r7}
 8011758:	4770      	bx	lr

0801175a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801175a:	b480      	push	{r7}
 801175c:	b085      	sub	sp, #20
 801175e:	af00      	add	r7, sp, #0
 8011760:	60f8      	str	r0, [r7, #12]
 8011762:	60b9      	str	r1, [r7, #8]
 8011764:	4613      	mov	r3, r2
 8011766:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8011768:	88fb      	ldrh	r3, [r7, #6]
 801176a:	3b01      	subs	r3, #1
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	4413      	add	r3, r2
 8011770:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8011772:	e007      	b.n	8011784 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8011774:	68ba      	ldr	r2, [r7, #8]
 8011776:	1c53      	adds	r3, r2, #1
 8011778:	60bb      	str	r3, [r7, #8]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	1e59      	subs	r1, r3, #1
 801177e:	60f9      	str	r1, [r7, #12]
 8011780:	7812      	ldrb	r2, [r2, #0]
 8011782:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8011784:	88fb      	ldrh	r3, [r7, #6]
 8011786:	1e5a      	subs	r2, r3, #1
 8011788:	80fa      	strh	r2, [r7, #6]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1f2      	bne.n	8011774 <memcpyr+0x1a>
    }
}
 801178e:	bf00      	nop
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	bc80      	pop	{r7}
 8011796:	4770      	bx	lr

08011798 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	460b      	mov	r3, r1
 80117a2:	70fb      	strb	r3, [r7, #3]
 80117a4:	4613      	mov	r3, r2
 80117a6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80117a8:	e004      	b.n	80117b4 <memset1+0x1c>
    {
        *dst++ = value;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	1c5a      	adds	r2, r3, #1
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	78fa      	ldrb	r2, [r7, #3]
 80117b2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80117b4:	883b      	ldrh	r3, [r7, #0]
 80117b6:	1e5a      	subs	r2, r3, #1
 80117b8:	803a      	strh	r2, [r7, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d1f5      	bne.n	80117aa <memset1+0x12>
    }
}
 80117be:	bf00      	nop
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bc80      	pop	{r7}
 80117c6:	4770      	bx	lr

080117c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80117c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80117ca:	e003      	b.n	80117d4 <LoopCopyDataInit>

080117cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80117cc:	4b0b      	ldr	r3, [pc, #44]	; (80117fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80117ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80117d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80117d2:	3104      	adds	r1, #4

080117d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80117d4:	480a      	ldr	r0, [pc, #40]	; (8011800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80117d6:	4b0b      	ldr	r3, [pc, #44]	; (8011804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80117d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80117da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80117dc:	d3f6      	bcc.n	80117cc <CopyDataInit>
  ldr r2, =_sbss
 80117de:	4a0a      	ldr	r2, [pc, #40]	; (8011808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80117e0:	e002      	b.n	80117e8 <LoopFillZerobss>

080117e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80117e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80117e4:	f842 3b04 	str.w	r3, [r2], #4

080117e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80117e8:	4b08      	ldr	r3, [pc, #32]	; (801180c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80117ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80117ec:	d3f9      	bcc.n	80117e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80117ee:	f7ff f999 	bl	8010b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80117f2:	f000 f815 	bl	8011820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80117f6:	f7fb fbf9 	bl	800cfec <main>
  bx lr
 80117fa:	4770      	bx	lr
  ldr r3, =_sidata
 80117fc:	08012978 	.word	0x08012978
  ldr r0, =_sdata
 8011800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8011804:	20000198 	.word	0x20000198
  ldr r2, =_sbss
 8011808:	20000198 	.word	0x20000198
  ldr r3, = _ebss
 801180c:	20001578 	.word	0x20001578

08011810 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011810:	e7fe      	b.n	8011810 <ADC1_IRQHandler>
	...

08011814 <__errno>:
 8011814:	4b01      	ldr	r3, [pc, #4]	; (801181c <__errno+0x8>)
 8011816:	6818      	ldr	r0, [r3, #0]
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	20000134 	.word	0x20000134

08011820 <__libc_init_array>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	2500      	movs	r5, #0
 8011824:	4e0c      	ldr	r6, [pc, #48]	; (8011858 <__libc_init_array+0x38>)
 8011826:	4c0d      	ldr	r4, [pc, #52]	; (801185c <__libc_init_array+0x3c>)
 8011828:	1ba4      	subs	r4, r4, r6
 801182a:	10a4      	asrs	r4, r4, #2
 801182c:	42a5      	cmp	r5, r4
 801182e:	d109      	bne.n	8011844 <__libc_init_array+0x24>
 8011830:	f000 fda0 	bl	8012374 <_init>
 8011834:	2500      	movs	r5, #0
 8011836:	4e0a      	ldr	r6, [pc, #40]	; (8011860 <__libc_init_array+0x40>)
 8011838:	4c0a      	ldr	r4, [pc, #40]	; (8011864 <__libc_init_array+0x44>)
 801183a:	1ba4      	subs	r4, r4, r6
 801183c:	10a4      	asrs	r4, r4, #2
 801183e:	42a5      	cmp	r5, r4
 8011840:	d105      	bne.n	801184e <__libc_init_array+0x2e>
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011848:	4798      	blx	r3
 801184a:	3501      	adds	r5, #1
 801184c:	e7ee      	b.n	801182c <__libc_init_array+0xc>
 801184e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011852:	4798      	blx	r3
 8011854:	3501      	adds	r5, #1
 8011856:	e7f2      	b.n	801183e <__libc_init_array+0x1e>
 8011858:	08012970 	.word	0x08012970
 801185c:	08012970 	.word	0x08012970
 8011860:	08012970 	.word	0x08012970
 8011864:	08012974 	.word	0x08012974

08011868 <memset>:
 8011868:	4603      	mov	r3, r0
 801186a:	4402      	add	r2, r0
 801186c:	4293      	cmp	r3, r2
 801186e:	d100      	bne.n	8011872 <memset+0xa>
 8011870:	4770      	bx	lr
 8011872:	f803 1b01 	strb.w	r1, [r3], #1
 8011876:	e7f9      	b.n	801186c <memset+0x4>

08011878 <siprintf>:
 8011878:	b40e      	push	{r1, r2, r3}
 801187a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801187e:	b500      	push	{lr}
 8011880:	b09c      	sub	sp, #112	; 0x70
 8011882:	ab1d      	add	r3, sp, #116	; 0x74
 8011884:	9002      	str	r0, [sp, #8]
 8011886:	9006      	str	r0, [sp, #24]
 8011888:	9107      	str	r1, [sp, #28]
 801188a:	9104      	str	r1, [sp, #16]
 801188c:	4808      	ldr	r0, [pc, #32]	; (80118b0 <siprintf+0x38>)
 801188e:	4909      	ldr	r1, [pc, #36]	; (80118b4 <siprintf+0x3c>)
 8011890:	f853 2b04 	ldr.w	r2, [r3], #4
 8011894:	9105      	str	r1, [sp, #20]
 8011896:	6800      	ldr	r0, [r0, #0]
 8011898:	a902      	add	r1, sp, #8
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	f000 f886 	bl	80119ac <_svfiprintf_r>
 80118a0:	2200      	movs	r2, #0
 80118a2:	9b02      	ldr	r3, [sp, #8]
 80118a4:	701a      	strb	r2, [r3, #0]
 80118a6:	b01c      	add	sp, #112	; 0x70
 80118a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118ac:	b003      	add	sp, #12
 80118ae:	4770      	bx	lr
 80118b0:	20000134 	.word	0x20000134
 80118b4:	ffff0208 	.word	0xffff0208

080118b8 <_vsiprintf_r>:
 80118b8:	b500      	push	{lr}
 80118ba:	b09b      	sub	sp, #108	; 0x6c
 80118bc:	9100      	str	r1, [sp, #0]
 80118be:	9104      	str	r1, [sp, #16]
 80118c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118c4:	9105      	str	r1, [sp, #20]
 80118c6:	9102      	str	r1, [sp, #8]
 80118c8:	4905      	ldr	r1, [pc, #20]	; (80118e0 <_vsiprintf_r+0x28>)
 80118ca:	9103      	str	r1, [sp, #12]
 80118cc:	4669      	mov	r1, sp
 80118ce:	f000 f86d 	bl	80119ac <_svfiprintf_r>
 80118d2:	2200      	movs	r2, #0
 80118d4:	9b00      	ldr	r3, [sp, #0]
 80118d6:	701a      	strb	r2, [r3, #0]
 80118d8:	b01b      	add	sp, #108	; 0x6c
 80118da:	f85d fb04 	ldr.w	pc, [sp], #4
 80118de:	bf00      	nop
 80118e0:	ffff0208 	.word	0xffff0208

080118e4 <vsiprintf>:
 80118e4:	4613      	mov	r3, r2
 80118e6:	460a      	mov	r2, r1
 80118e8:	4601      	mov	r1, r0
 80118ea:	4802      	ldr	r0, [pc, #8]	; (80118f4 <vsiprintf+0x10>)
 80118ec:	6800      	ldr	r0, [r0, #0]
 80118ee:	f7ff bfe3 	b.w	80118b8 <_vsiprintf_r>
 80118f2:	bf00      	nop
 80118f4:	20000134 	.word	0x20000134

080118f8 <__ssputs_r>:
 80118f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118fc:	688e      	ldr	r6, [r1, #8]
 80118fe:	4682      	mov	sl, r0
 8011900:	429e      	cmp	r6, r3
 8011902:	460c      	mov	r4, r1
 8011904:	4690      	mov	r8, r2
 8011906:	4699      	mov	r9, r3
 8011908:	d837      	bhi.n	801197a <__ssputs_r+0x82>
 801190a:	898a      	ldrh	r2, [r1, #12]
 801190c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011910:	d031      	beq.n	8011976 <__ssputs_r+0x7e>
 8011912:	2302      	movs	r3, #2
 8011914:	6825      	ldr	r5, [r4, #0]
 8011916:	6909      	ldr	r1, [r1, #16]
 8011918:	1a6f      	subs	r7, r5, r1
 801191a:	6965      	ldr	r5, [r4, #20]
 801191c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011920:	fb95 f5f3 	sdiv	r5, r5, r3
 8011924:	f109 0301 	add.w	r3, r9, #1
 8011928:	443b      	add	r3, r7
 801192a:	429d      	cmp	r5, r3
 801192c:	bf38      	it	cc
 801192e:	461d      	movcc	r5, r3
 8011930:	0553      	lsls	r3, r2, #21
 8011932:	d530      	bpl.n	8011996 <__ssputs_r+0x9e>
 8011934:	4629      	mov	r1, r5
 8011936:	f000 fb37 	bl	8011fa8 <_malloc_r>
 801193a:	4606      	mov	r6, r0
 801193c:	b950      	cbnz	r0, 8011954 <__ssputs_r+0x5c>
 801193e:	230c      	movs	r3, #12
 8011940:	f04f 30ff 	mov.w	r0, #4294967295
 8011944:	f8ca 3000 	str.w	r3, [sl]
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801194e:	81a3      	strh	r3, [r4, #12]
 8011950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011954:	463a      	mov	r2, r7
 8011956:	6921      	ldr	r1, [r4, #16]
 8011958:	f000 fab6 	bl	8011ec8 <memcpy>
 801195c:	89a3      	ldrh	r3, [r4, #12]
 801195e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011966:	81a3      	strh	r3, [r4, #12]
 8011968:	6126      	str	r6, [r4, #16]
 801196a:	443e      	add	r6, r7
 801196c:	6026      	str	r6, [r4, #0]
 801196e:	464e      	mov	r6, r9
 8011970:	6165      	str	r5, [r4, #20]
 8011972:	1bed      	subs	r5, r5, r7
 8011974:	60a5      	str	r5, [r4, #8]
 8011976:	454e      	cmp	r6, r9
 8011978:	d900      	bls.n	801197c <__ssputs_r+0x84>
 801197a:	464e      	mov	r6, r9
 801197c:	4632      	mov	r2, r6
 801197e:	4641      	mov	r1, r8
 8011980:	6820      	ldr	r0, [r4, #0]
 8011982:	f000 faac 	bl	8011ede <memmove>
 8011986:	68a3      	ldr	r3, [r4, #8]
 8011988:	2000      	movs	r0, #0
 801198a:	1b9b      	subs	r3, r3, r6
 801198c:	60a3      	str	r3, [r4, #8]
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	441e      	add	r6, r3
 8011992:	6026      	str	r6, [r4, #0]
 8011994:	e7dc      	b.n	8011950 <__ssputs_r+0x58>
 8011996:	462a      	mov	r2, r5
 8011998:	f000 fb60 	bl	801205c <_realloc_r>
 801199c:	4606      	mov	r6, r0
 801199e:	2800      	cmp	r0, #0
 80119a0:	d1e2      	bne.n	8011968 <__ssputs_r+0x70>
 80119a2:	6921      	ldr	r1, [r4, #16]
 80119a4:	4650      	mov	r0, sl
 80119a6:	f000 fab3 	bl	8011f10 <_free_r>
 80119aa:	e7c8      	b.n	801193e <__ssputs_r+0x46>

080119ac <_svfiprintf_r>:
 80119ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b0:	461d      	mov	r5, r3
 80119b2:	898b      	ldrh	r3, [r1, #12]
 80119b4:	b09d      	sub	sp, #116	; 0x74
 80119b6:	061f      	lsls	r7, r3, #24
 80119b8:	4680      	mov	r8, r0
 80119ba:	460c      	mov	r4, r1
 80119bc:	4616      	mov	r6, r2
 80119be:	d50f      	bpl.n	80119e0 <_svfiprintf_r+0x34>
 80119c0:	690b      	ldr	r3, [r1, #16]
 80119c2:	b96b      	cbnz	r3, 80119e0 <_svfiprintf_r+0x34>
 80119c4:	2140      	movs	r1, #64	; 0x40
 80119c6:	f000 faef 	bl	8011fa8 <_malloc_r>
 80119ca:	6020      	str	r0, [r4, #0]
 80119cc:	6120      	str	r0, [r4, #16]
 80119ce:	b928      	cbnz	r0, 80119dc <_svfiprintf_r+0x30>
 80119d0:	230c      	movs	r3, #12
 80119d2:	f8c8 3000 	str.w	r3, [r8]
 80119d6:	f04f 30ff 	mov.w	r0, #4294967295
 80119da:	e0c8      	b.n	8011b6e <_svfiprintf_r+0x1c2>
 80119dc:	2340      	movs	r3, #64	; 0x40
 80119de:	6163      	str	r3, [r4, #20]
 80119e0:	2300      	movs	r3, #0
 80119e2:	9309      	str	r3, [sp, #36]	; 0x24
 80119e4:	2320      	movs	r3, #32
 80119e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119ea:	2330      	movs	r3, #48	; 0x30
 80119ec:	f04f 0b01 	mov.w	fp, #1
 80119f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119f4:	9503      	str	r5, [sp, #12]
 80119f6:	4637      	mov	r7, r6
 80119f8:	463d      	mov	r5, r7
 80119fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80119fe:	b10b      	cbz	r3, 8011a04 <_svfiprintf_r+0x58>
 8011a00:	2b25      	cmp	r3, #37	; 0x25
 8011a02:	d13e      	bne.n	8011a82 <_svfiprintf_r+0xd6>
 8011a04:	ebb7 0a06 	subs.w	sl, r7, r6
 8011a08:	d00b      	beq.n	8011a22 <_svfiprintf_r+0x76>
 8011a0a:	4653      	mov	r3, sl
 8011a0c:	4632      	mov	r2, r6
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4640      	mov	r0, r8
 8011a12:	f7ff ff71 	bl	80118f8 <__ssputs_r>
 8011a16:	3001      	adds	r0, #1
 8011a18:	f000 80a4 	beq.w	8011b64 <_svfiprintf_r+0x1b8>
 8011a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1e:	4453      	add	r3, sl
 8011a20:	9309      	str	r3, [sp, #36]	; 0x24
 8011a22:	783b      	ldrb	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f000 809d 	beq.w	8011b64 <_svfiprintf_r+0x1b8>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a34:	9304      	str	r3, [sp, #16]
 8011a36:	9307      	str	r3, [sp, #28]
 8011a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011a3e:	462f      	mov	r7, r5
 8011a40:	2205      	movs	r2, #5
 8011a42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011a46:	4850      	ldr	r0, [pc, #320]	; (8011b88 <_svfiprintf_r+0x1dc>)
 8011a48:	f000 fa30 	bl	8011eac <memchr>
 8011a4c:	9b04      	ldr	r3, [sp, #16]
 8011a4e:	b9d0      	cbnz	r0, 8011a86 <_svfiprintf_r+0xda>
 8011a50:	06d9      	lsls	r1, r3, #27
 8011a52:	bf44      	itt	mi
 8011a54:	2220      	movmi	r2, #32
 8011a56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011a5a:	071a      	lsls	r2, r3, #28
 8011a5c:	bf44      	itt	mi
 8011a5e:	222b      	movmi	r2, #43	; 0x2b
 8011a60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011a64:	782a      	ldrb	r2, [r5, #0]
 8011a66:	2a2a      	cmp	r2, #42	; 0x2a
 8011a68:	d015      	beq.n	8011a96 <_svfiprintf_r+0xea>
 8011a6a:	462f      	mov	r7, r5
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	250a      	movs	r5, #10
 8011a70:	9a07      	ldr	r2, [sp, #28]
 8011a72:	4639      	mov	r1, r7
 8011a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a78:	3b30      	subs	r3, #48	; 0x30
 8011a7a:	2b09      	cmp	r3, #9
 8011a7c:	d94d      	bls.n	8011b1a <_svfiprintf_r+0x16e>
 8011a7e:	b1b8      	cbz	r0, 8011ab0 <_svfiprintf_r+0x104>
 8011a80:	e00f      	b.n	8011aa2 <_svfiprintf_r+0xf6>
 8011a82:	462f      	mov	r7, r5
 8011a84:	e7b8      	b.n	80119f8 <_svfiprintf_r+0x4c>
 8011a86:	4a40      	ldr	r2, [pc, #256]	; (8011b88 <_svfiprintf_r+0x1dc>)
 8011a88:	463d      	mov	r5, r7
 8011a8a:	1a80      	subs	r0, r0, r2
 8011a8c:	fa0b f000 	lsl.w	r0, fp, r0
 8011a90:	4318      	orrs	r0, r3
 8011a92:	9004      	str	r0, [sp, #16]
 8011a94:	e7d3      	b.n	8011a3e <_svfiprintf_r+0x92>
 8011a96:	9a03      	ldr	r2, [sp, #12]
 8011a98:	1d11      	adds	r1, r2, #4
 8011a9a:	6812      	ldr	r2, [r2, #0]
 8011a9c:	9103      	str	r1, [sp, #12]
 8011a9e:	2a00      	cmp	r2, #0
 8011aa0:	db01      	blt.n	8011aa6 <_svfiprintf_r+0xfa>
 8011aa2:	9207      	str	r2, [sp, #28]
 8011aa4:	e004      	b.n	8011ab0 <_svfiprintf_r+0x104>
 8011aa6:	4252      	negs	r2, r2
 8011aa8:	f043 0302 	orr.w	r3, r3, #2
 8011aac:	9207      	str	r2, [sp, #28]
 8011aae:	9304      	str	r3, [sp, #16]
 8011ab0:	783b      	ldrb	r3, [r7, #0]
 8011ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab4:	d10c      	bne.n	8011ad0 <_svfiprintf_r+0x124>
 8011ab6:	787b      	ldrb	r3, [r7, #1]
 8011ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8011aba:	d133      	bne.n	8011b24 <_svfiprintf_r+0x178>
 8011abc:	9b03      	ldr	r3, [sp, #12]
 8011abe:	3702      	adds	r7, #2
 8011ac0:	1d1a      	adds	r2, r3, #4
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	9203      	str	r2, [sp, #12]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	bfb8      	it	lt
 8011aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ace:	9305      	str	r3, [sp, #20]
 8011ad0:	4d2e      	ldr	r5, [pc, #184]	; (8011b8c <_svfiprintf_r+0x1e0>)
 8011ad2:	2203      	movs	r2, #3
 8011ad4:	7839      	ldrb	r1, [r7, #0]
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f000 f9e8 	bl	8011eac <memchr>
 8011adc:	b138      	cbz	r0, 8011aee <_svfiprintf_r+0x142>
 8011ade:	2340      	movs	r3, #64	; 0x40
 8011ae0:	1b40      	subs	r0, r0, r5
 8011ae2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ae6:	9b04      	ldr	r3, [sp, #16]
 8011ae8:	3701      	adds	r7, #1
 8011aea:	4303      	orrs	r3, r0
 8011aec:	9304      	str	r3, [sp, #16]
 8011aee:	7839      	ldrb	r1, [r7, #0]
 8011af0:	2206      	movs	r2, #6
 8011af2:	4827      	ldr	r0, [pc, #156]	; (8011b90 <_svfiprintf_r+0x1e4>)
 8011af4:	1c7e      	adds	r6, r7, #1
 8011af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011afa:	f000 f9d7 	bl	8011eac <memchr>
 8011afe:	2800      	cmp	r0, #0
 8011b00:	d038      	beq.n	8011b74 <_svfiprintf_r+0x1c8>
 8011b02:	4b24      	ldr	r3, [pc, #144]	; (8011b94 <_svfiprintf_r+0x1e8>)
 8011b04:	bb13      	cbnz	r3, 8011b4c <_svfiprintf_r+0x1a0>
 8011b06:	9b03      	ldr	r3, [sp, #12]
 8011b08:	3307      	adds	r3, #7
 8011b0a:	f023 0307 	bic.w	r3, r3, #7
 8011b0e:	3308      	adds	r3, #8
 8011b10:	9303      	str	r3, [sp, #12]
 8011b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b14:	444b      	add	r3, r9
 8011b16:	9309      	str	r3, [sp, #36]	; 0x24
 8011b18:	e76d      	b.n	80119f6 <_svfiprintf_r+0x4a>
 8011b1a:	fb05 3202 	mla	r2, r5, r2, r3
 8011b1e:	2001      	movs	r0, #1
 8011b20:	460f      	mov	r7, r1
 8011b22:	e7a6      	b.n	8011a72 <_svfiprintf_r+0xc6>
 8011b24:	2300      	movs	r3, #0
 8011b26:	250a      	movs	r5, #10
 8011b28:	4619      	mov	r1, r3
 8011b2a:	3701      	adds	r7, #1
 8011b2c:	9305      	str	r3, [sp, #20]
 8011b2e:	4638      	mov	r0, r7
 8011b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b34:	3a30      	subs	r2, #48	; 0x30
 8011b36:	2a09      	cmp	r2, #9
 8011b38:	d903      	bls.n	8011b42 <_svfiprintf_r+0x196>
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d0c8      	beq.n	8011ad0 <_svfiprintf_r+0x124>
 8011b3e:	9105      	str	r1, [sp, #20]
 8011b40:	e7c6      	b.n	8011ad0 <_svfiprintf_r+0x124>
 8011b42:	fb05 2101 	mla	r1, r5, r1, r2
 8011b46:	2301      	movs	r3, #1
 8011b48:	4607      	mov	r7, r0
 8011b4a:	e7f0      	b.n	8011b2e <_svfiprintf_r+0x182>
 8011b4c:	ab03      	add	r3, sp, #12
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	4622      	mov	r2, r4
 8011b52:	4b11      	ldr	r3, [pc, #68]	; (8011b98 <_svfiprintf_r+0x1ec>)
 8011b54:	a904      	add	r1, sp, #16
 8011b56:	4640      	mov	r0, r8
 8011b58:	f3af 8000 	nop.w
 8011b5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011b60:	4681      	mov	r9, r0
 8011b62:	d1d6      	bne.n	8011b12 <_svfiprintf_r+0x166>
 8011b64:	89a3      	ldrh	r3, [r4, #12]
 8011b66:	065b      	lsls	r3, r3, #25
 8011b68:	f53f af35 	bmi.w	80119d6 <_svfiprintf_r+0x2a>
 8011b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b6e:	b01d      	add	sp, #116	; 0x74
 8011b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b74:	ab03      	add	r3, sp, #12
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	4622      	mov	r2, r4
 8011b7a:	4b07      	ldr	r3, [pc, #28]	; (8011b98 <_svfiprintf_r+0x1ec>)
 8011b7c:	a904      	add	r1, sp, #16
 8011b7e:	4640      	mov	r0, r8
 8011b80:	f000 f882 	bl	8011c88 <_printf_i>
 8011b84:	e7ea      	b.n	8011b5c <_svfiprintf_r+0x1b0>
 8011b86:	bf00      	nop
 8011b88:	0801293c 	.word	0x0801293c
 8011b8c:	08012942 	.word	0x08012942
 8011b90:	08012946 	.word	0x08012946
 8011b94:	00000000 	.word	0x00000000
 8011b98:	080118f9 	.word	0x080118f9

08011b9c <_printf_common>:
 8011b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba0:	4691      	mov	r9, r2
 8011ba2:	461f      	mov	r7, r3
 8011ba4:	688a      	ldr	r2, [r1, #8]
 8011ba6:	690b      	ldr	r3, [r1, #16]
 8011ba8:	4606      	mov	r6, r0
 8011baa:	4293      	cmp	r3, r2
 8011bac:	bfb8      	it	lt
 8011bae:	4613      	movlt	r3, r2
 8011bb0:	f8c9 3000 	str.w	r3, [r9]
 8011bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011bb8:	460c      	mov	r4, r1
 8011bba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011bbe:	b112      	cbz	r2, 8011bc6 <_printf_common+0x2a>
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	f8c9 3000 	str.w	r3, [r9]
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	0699      	lsls	r1, r3, #26
 8011bca:	bf42      	ittt	mi
 8011bcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011bd0:	3302      	addmi	r3, #2
 8011bd2:	f8c9 3000 	strmi.w	r3, [r9]
 8011bd6:	6825      	ldr	r5, [r4, #0]
 8011bd8:	f015 0506 	ands.w	r5, r5, #6
 8011bdc:	d107      	bne.n	8011bee <_printf_common+0x52>
 8011bde:	f104 0a19 	add.w	sl, r4, #25
 8011be2:	68e3      	ldr	r3, [r4, #12]
 8011be4:	f8d9 2000 	ldr.w	r2, [r9]
 8011be8:	1a9b      	subs	r3, r3, r2
 8011bea:	42ab      	cmp	r3, r5
 8011bec:	dc29      	bgt.n	8011c42 <_printf_common+0xa6>
 8011bee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011bf2:	6822      	ldr	r2, [r4, #0]
 8011bf4:	3300      	adds	r3, #0
 8011bf6:	bf18      	it	ne
 8011bf8:	2301      	movne	r3, #1
 8011bfa:	0692      	lsls	r2, r2, #26
 8011bfc:	d42e      	bmi.n	8011c5c <_printf_common+0xc0>
 8011bfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c02:	4639      	mov	r1, r7
 8011c04:	4630      	mov	r0, r6
 8011c06:	47c0      	blx	r8
 8011c08:	3001      	adds	r0, #1
 8011c0a:	d021      	beq.n	8011c50 <_printf_common+0xb4>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	68e5      	ldr	r5, [r4, #12]
 8011c10:	f003 0306 	and.w	r3, r3, #6
 8011c14:	2b04      	cmp	r3, #4
 8011c16:	bf18      	it	ne
 8011c18:	2500      	movne	r5, #0
 8011c1a:	f8d9 2000 	ldr.w	r2, [r9]
 8011c1e:	f04f 0900 	mov.w	r9, #0
 8011c22:	bf08      	it	eq
 8011c24:	1aad      	subeq	r5, r5, r2
 8011c26:	68a3      	ldr	r3, [r4, #8]
 8011c28:	6922      	ldr	r2, [r4, #16]
 8011c2a:	bf08      	it	eq
 8011c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c30:	4293      	cmp	r3, r2
 8011c32:	bfc4      	itt	gt
 8011c34:	1a9b      	subgt	r3, r3, r2
 8011c36:	18ed      	addgt	r5, r5, r3
 8011c38:	341a      	adds	r4, #26
 8011c3a:	454d      	cmp	r5, r9
 8011c3c:	d11a      	bne.n	8011c74 <_printf_common+0xd8>
 8011c3e:	2000      	movs	r0, #0
 8011c40:	e008      	b.n	8011c54 <_printf_common+0xb8>
 8011c42:	2301      	movs	r3, #1
 8011c44:	4652      	mov	r2, sl
 8011c46:	4639      	mov	r1, r7
 8011c48:	4630      	mov	r0, r6
 8011c4a:	47c0      	blx	r8
 8011c4c:	3001      	adds	r0, #1
 8011c4e:	d103      	bne.n	8011c58 <_printf_common+0xbc>
 8011c50:	f04f 30ff 	mov.w	r0, #4294967295
 8011c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c58:	3501      	adds	r5, #1
 8011c5a:	e7c2      	b.n	8011be2 <_printf_common+0x46>
 8011c5c:	2030      	movs	r0, #48	; 0x30
 8011c5e:	18e1      	adds	r1, r4, r3
 8011c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c6a:	4422      	add	r2, r4
 8011c6c:	3302      	adds	r3, #2
 8011c6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c72:	e7c4      	b.n	8011bfe <_printf_common+0x62>
 8011c74:	2301      	movs	r3, #1
 8011c76:	4622      	mov	r2, r4
 8011c78:	4639      	mov	r1, r7
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	47c0      	blx	r8
 8011c7e:	3001      	adds	r0, #1
 8011c80:	d0e6      	beq.n	8011c50 <_printf_common+0xb4>
 8011c82:	f109 0901 	add.w	r9, r9, #1
 8011c86:	e7d8      	b.n	8011c3a <_printf_common+0x9e>

08011c88 <_printf_i>:
 8011c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011c90:	460c      	mov	r4, r1
 8011c92:	7e09      	ldrb	r1, [r1, #24]
 8011c94:	b085      	sub	sp, #20
 8011c96:	296e      	cmp	r1, #110	; 0x6e
 8011c98:	4617      	mov	r7, r2
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	4698      	mov	r8, r3
 8011c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ca0:	f000 80b3 	beq.w	8011e0a <_printf_i+0x182>
 8011ca4:	d822      	bhi.n	8011cec <_printf_i+0x64>
 8011ca6:	2963      	cmp	r1, #99	; 0x63
 8011ca8:	d036      	beq.n	8011d18 <_printf_i+0x90>
 8011caa:	d80a      	bhi.n	8011cc2 <_printf_i+0x3a>
 8011cac:	2900      	cmp	r1, #0
 8011cae:	f000 80b9 	beq.w	8011e24 <_printf_i+0x19c>
 8011cb2:	2958      	cmp	r1, #88	; 0x58
 8011cb4:	f000 8083 	beq.w	8011dbe <_printf_i+0x136>
 8011cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011cc0:	e032      	b.n	8011d28 <_printf_i+0xa0>
 8011cc2:	2964      	cmp	r1, #100	; 0x64
 8011cc4:	d001      	beq.n	8011cca <_printf_i+0x42>
 8011cc6:	2969      	cmp	r1, #105	; 0x69
 8011cc8:	d1f6      	bne.n	8011cb8 <_printf_i+0x30>
 8011cca:	6820      	ldr	r0, [r4, #0]
 8011ccc:	6813      	ldr	r3, [r2, #0]
 8011cce:	0605      	lsls	r5, r0, #24
 8011cd0:	f103 0104 	add.w	r1, r3, #4
 8011cd4:	d52a      	bpl.n	8011d2c <_printf_i+0xa4>
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	6011      	str	r1, [r2, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	da03      	bge.n	8011ce6 <_printf_i+0x5e>
 8011cde:	222d      	movs	r2, #45	; 0x2d
 8011ce0:	425b      	negs	r3, r3
 8011ce2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011ce6:	486f      	ldr	r0, [pc, #444]	; (8011ea4 <_printf_i+0x21c>)
 8011ce8:	220a      	movs	r2, #10
 8011cea:	e039      	b.n	8011d60 <_printf_i+0xd8>
 8011cec:	2973      	cmp	r1, #115	; 0x73
 8011cee:	f000 809d 	beq.w	8011e2c <_printf_i+0x1a4>
 8011cf2:	d808      	bhi.n	8011d06 <_printf_i+0x7e>
 8011cf4:	296f      	cmp	r1, #111	; 0x6f
 8011cf6:	d020      	beq.n	8011d3a <_printf_i+0xb2>
 8011cf8:	2970      	cmp	r1, #112	; 0x70
 8011cfa:	d1dd      	bne.n	8011cb8 <_printf_i+0x30>
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	f043 0320 	orr.w	r3, r3, #32
 8011d02:	6023      	str	r3, [r4, #0]
 8011d04:	e003      	b.n	8011d0e <_printf_i+0x86>
 8011d06:	2975      	cmp	r1, #117	; 0x75
 8011d08:	d017      	beq.n	8011d3a <_printf_i+0xb2>
 8011d0a:	2978      	cmp	r1, #120	; 0x78
 8011d0c:	d1d4      	bne.n	8011cb8 <_printf_i+0x30>
 8011d0e:	2378      	movs	r3, #120	; 0x78
 8011d10:	4865      	ldr	r0, [pc, #404]	; (8011ea8 <_printf_i+0x220>)
 8011d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d16:	e055      	b.n	8011dc4 <_printf_i+0x13c>
 8011d18:	6813      	ldr	r3, [r2, #0]
 8011d1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d1e:	1d19      	adds	r1, r3, #4
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	6011      	str	r1, [r2, #0]
 8011d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e08c      	b.n	8011e46 <_printf_i+0x1be>
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d32:	6011      	str	r1, [r2, #0]
 8011d34:	bf18      	it	ne
 8011d36:	b21b      	sxthne	r3, r3
 8011d38:	e7cf      	b.n	8011cda <_printf_i+0x52>
 8011d3a:	6813      	ldr	r3, [r2, #0]
 8011d3c:	6825      	ldr	r5, [r4, #0]
 8011d3e:	1d18      	adds	r0, r3, #4
 8011d40:	6010      	str	r0, [r2, #0]
 8011d42:	0628      	lsls	r0, r5, #24
 8011d44:	d501      	bpl.n	8011d4a <_printf_i+0xc2>
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	e002      	b.n	8011d50 <_printf_i+0xc8>
 8011d4a:	0668      	lsls	r0, r5, #25
 8011d4c:	d5fb      	bpl.n	8011d46 <_printf_i+0xbe>
 8011d4e:	881b      	ldrh	r3, [r3, #0]
 8011d50:	296f      	cmp	r1, #111	; 0x6f
 8011d52:	bf14      	ite	ne
 8011d54:	220a      	movne	r2, #10
 8011d56:	2208      	moveq	r2, #8
 8011d58:	4852      	ldr	r0, [pc, #328]	; (8011ea4 <_printf_i+0x21c>)
 8011d5a:	2100      	movs	r1, #0
 8011d5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d60:	6865      	ldr	r5, [r4, #4]
 8011d62:	2d00      	cmp	r5, #0
 8011d64:	60a5      	str	r5, [r4, #8]
 8011d66:	f2c0 8095 	blt.w	8011e94 <_printf_i+0x20c>
 8011d6a:	6821      	ldr	r1, [r4, #0]
 8011d6c:	f021 0104 	bic.w	r1, r1, #4
 8011d70:	6021      	str	r1, [r4, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d13d      	bne.n	8011df2 <_printf_i+0x16a>
 8011d76:	2d00      	cmp	r5, #0
 8011d78:	f040 808e 	bne.w	8011e98 <_printf_i+0x210>
 8011d7c:	4665      	mov	r5, ip
 8011d7e:	2a08      	cmp	r2, #8
 8011d80:	d10b      	bne.n	8011d9a <_printf_i+0x112>
 8011d82:	6823      	ldr	r3, [r4, #0]
 8011d84:	07db      	lsls	r3, r3, #31
 8011d86:	d508      	bpl.n	8011d9a <_printf_i+0x112>
 8011d88:	6923      	ldr	r3, [r4, #16]
 8011d8a:	6862      	ldr	r2, [r4, #4]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	bfde      	ittt	le
 8011d90:	2330      	movle	r3, #48	; 0x30
 8011d92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011d9a:	ebac 0305 	sub.w	r3, ip, r5
 8011d9e:	6123      	str	r3, [r4, #16]
 8011da0:	f8cd 8000 	str.w	r8, [sp]
 8011da4:	463b      	mov	r3, r7
 8011da6:	aa03      	add	r2, sp, #12
 8011da8:	4621      	mov	r1, r4
 8011daa:	4630      	mov	r0, r6
 8011dac:	f7ff fef6 	bl	8011b9c <_printf_common>
 8011db0:	3001      	adds	r0, #1
 8011db2:	d14d      	bne.n	8011e50 <_printf_i+0x1c8>
 8011db4:	f04f 30ff 	mov.w	r0, #4294967295
 8011db8:	b005      	add	sp, #20
 8011dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	4839      	ldr	r0, [pc, #228]	; (8011ea4 <_printf_i+0x21c>)
 8011dc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011dc4:	6813      	ldr	r3, [r2, #0]
 8011dc6:	6821      	ldr	r1, [r4, #0]
 8011dc8:	1d1d      	adds	r5, r3, #4
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	6015      	str	r5, [r2, #0]
 8011dce:	060a      	lsls	r2, r1, #24
 8011dd0:	d50b      	bpl.n	8011dea <_printf_i+0x162>
 8011dd2:	07ca      	lsls	r2, r1, #31
 8011dd4:	bf44      	itt	mi
 8011dd6:	f041 0120 	orrmi.w	r1, r1, #32
 8011dda:	6021      	strmi	r1, [r4, #0]
 8011ddc:	b91b      	cbnz	r3, 8011de6 <_printf_i+0x15e>
 8011dde:	6822      	ldr	r2, [r4, #0]
 8011de0:	f022 0220 	bic.w	r2, r2, #32
 8011de4:	6022      	str	r2, [r4, #0]
 8011de6:	2210      	movs	r2, #16
 8011de8:	e7b7      	b.n	8011d5a <_printf_i+0xd2>
 8011dea:	064d      	lsls	r5, r1, #25
 8011dec:	bf48      	it	mi
 8011dee:	b29b      	uxthmi	r3, r3
 8011df0:	e7ef      	b.n	8011dd2 <_printf_i+0x14a>
 8011df2:	4665      	mov	r5, ip
 8011df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011df8:	fb02 3311 	mls	r3, r2, r1, r3
 8011dfc:	5cc3      	ldrb	r3, [r0, r3]
 8011dfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011e02:	460b      	mov	r3, r1
 8011e04:	2900      	cmp	r1, #0
 8011e06:	d1f5      	bne.n	8011df4 <_printf_i+0x16c>
 8011e08:	e7b9      	b.n	8011d7e <_printf_i+0xf6>
 8011e0a:	6813      	ldr	r3, [r2, #0]
 8011e0c:	6825      	ldr	r5, [r4, #0]
 8011e0e:	1d18      	adds	r0, r3, #4
 8011e10:	6961      	ldr	r1, [r4, #20]
 8011e12:	6010      	str	r0, [r2, #0]
 8011e14:	0628      	lsls	r0, r5, #24
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	d501      	bpl.n	8011e1e <_printf_i+0x196>
 8011e1a:	6019      	str	r1, [r3, #0]
 8011e1c:	e002      	b.n	8011e24 <_printf_i+0x19c>
 8011e1e:	066a      	lsls	r2, r5, #25
 8011e20:	d5fb      	bpl.n	8011e1a <_printf_i+0x192>
 8011e22:	8019      	strh	r1, [r3, #0]
 8011e24:	2300      	movs	r3, #0
 8011e26:	4665      	mov	r5, ip
 8011e28:	6123      	str	r3, [r4, #16]
 8011e2a:	e7b9      	b.n	8011da0 <_printf_i+0x118>
 8011e2c:	6813      	ldr	r3, [r2, #0]
 8011e2e:	1d19      	adds	r1, r3, #4
 8011e30:	6011      	str	r1, [r2, #0]
 8011e32:	681d      	ldr	r5, [r3, #0]
 8011e34:	6862      	ldr	r2, [r4, #4]
 8011e36:	2100      	movs	r1, #0
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 f837 	bl	8011eac <memchr>
 8011e3e:	b108      	cbz	r0, 8011e44 <_printf_i+0x1bc>
 8011e40:	1b40      	subs	r0, r0, r5
 8011e42:	6060      	str	r0, [r4, #4]
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	2300      	movs	r3, #0
 8011e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e4e:	e7a7      	b.n	8011da0 <_printf_i+0x118>
 8011e50:	6923      	ldr	r3, [r4, #16]
 8011e52:	462a      	mov	r2, r5
 8011e54:	4639      	mov	r1, r7
 8011e56:	4630      	mov	r0, r6
 8011e58:	47c0      	blx	r8
 8011e5a:	3001      	adds	r0, #1
 8011e5c:	d0aa      	beq.n	8011db4 <_printf_i+0x12c>
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	079b      	lsls	r3, r3, #30
 8011e62:	d413      	bmi.n	8011e8c <_printf_i+0x204>
 8011e64:	68e0      	ldr	r0, [r4, #12]
 8011e66:	9b03      	ldr	r3, [sp, #12]
 8011e68:	4298      	cmp	r0, r3
 8011e6a:	bfb8      	it	lt
 8011e6c:	4618      	movlt	r0, r3
 8011e6e:	e7a3      	b.n	8011db8 <_printf_i+0x130>
 8011e70:	2301      	movs	r3, #1
 8011e72:	464a      	mov	r2, r9
 8011e74:	4639      	mov	r1, r7
 8011e76:	4630      	mov	r0, r6
 8011e78:	47c0      	blx	r8
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	d09a      	beq.n	8011db4 <_printf_i+0x12c>
 8011e7e:	3501      	adds	r5, #1
 8011e80:	68e3      	ldr	r3, [r4, #12]
 8011e82:	9a03      	ldr	r2, [sp, #12]
 8011e84:	1a9b      	subs	r3, r3, r2
 8011e86:	42ab      	cmp	r3, r5
 8011e88:	dcf2      	bgt.n	8011e70 <_printf_i+0x1e8>
 8011e8a:	e7eb      	b.n	8011e64 <_printf_i+0x1dc>
 8011e8c:	2500      	movs	r5, #0
 8011e8e:	f104 0919 	add.w	r9, r4, #25
 8011e92:	e7f5      	b.n	8011e80 <_printf_i+0x1f8>
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1ac      	bne.n	8011df2 <_printf_i+0x16a>
 8011e98:	7803      	ldrb	r3, [r0, #0]
 8011e9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ea2:	e76c      	b.n	8011d7e <_printf_i+0xf6>
 8011ea4:	0801294d 	.word	0x0801294d
 8011ea8:	0801295e 	.word	0x0801295e

08011eac <memchr>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	b2c9      	uxtb	r1, r1
 8011eb0:	4402      	add	r2, r0
 8011eb2:	4290      	cmp	r0, r2
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	d101      	bne.n	8011ebc <memchr+0x10>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	e003      	b.n	8011ec4 <memchr+0x18>
 8011ebc:	781c      	ldrb	r4, [r3, #0]
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	428c      	cmp	r4, r1
 8011ec2:	d1f6      	bne.n	8011eb2 <memchr+0x6>
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	bd10      	pop	{r4, pc}

08011ec8 <memcpy>:
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	1e43      	subs	r3, r0, #1
 8011ecc:	440a      	add	r2, r1
 8011ece:	4291      	cmp	r1, r2
 8011ed0:	d100      	bne.n	8011ed4 <memcpy+0xc>
 8011ed2:	bd10      	pop	{r4, pc}
 8011ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011edc:	e7f7      	b.n	8011ece <memcpy+0x6>

08011ede <memmove>:
 8011ede:	4288      	cmp	r0, r1
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	eb01 0302 	add.w	r3, r1, r2
 8011ee6:	d807      	bhi.n	8011ef8 <memmove+0x1a>
 8011ee8:	1e42      	subs	r2, r0, #1
 8011eea:	4299      	cmp	r1, r3
 8011eec:	d00a      	beq.n	8011f04 <memmove+0x26>
 8011eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ef2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ef6:	e7f8      	b.n	8011eea <memmove+0xc>
 8011ef8:	4283      	cmp	r3, r0
 8011efa:	d9f5      	bls.n	8011ee8 <memmove+0xa>
 8011efc:	1881      	adds	r1, r0, r2
 8011efe:	1ad2      	subs	r2, r2, r3
 8011f00:	42d3      	cmn	r3, r2
 8011f02:	d100      	bne.n	8011f06 <memmove+0x28>
 8011f04:	bd10      	pop	{r4, pc}
 8011f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011f0e:	e7f7      	b.n	8011f00 <memmove+0x22>

08011f10 <_free_r>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	4605      	mov	r5, r0
 8011f14:	2900      	cmp	r1, #0
 8011f16:	d043      	beq.n	8011fa0 <_free_r+0x90>
 8011f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f1c:	1f0c      	subs	r4, r1, #4
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	bfb8      	it	lt
 8011f22:	18e4      	addlt	r4, r4, r3
 8011f24:	f000 f8d0 	bl	80120c8 <__malloc_lock>
 8011f28:	4a1e      	ldr	r2, [pc, #120]	; (8011fa4 <_free_r+0x94>)
 8011f2a:	6813      	ldr	r3, [r2, #0]
 8011f2c:	4610      	mov	r0, r2
 8011f2e:	b933      	cbnz	r3, 8011f3e <_free_r+0x2e>
 8011f30:	6063      	str	r3, [r4, #4]
 8011f32:	6014      	str	r4, [r2, #0]
 8011f34:	4628      	mov	r0, r5
 8011f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f3a:	f000 b8c6 	b.w	80120ca <__malloc_unlock>
 8011f3e:	42a3      	cmp	r3, r4
 8011f40:	d90b      	bls.n	8011f5a <_free_r+0x4a>
 8011f42:	6821      	ldr	r1, [r4, #0]
 8011f44:	1862      	adds	r2, r4, r1
 8011f46:	4293      	cmp	r3, r2
 8011f48:	bf01      	itttt	eq
 8011f4a:	681a      	ldreq	r2, [r3, #0]
 8011f4c:	685b      	ldreq	r3, [r3, #4]
 8011f4e:	1852      	addeq	r2, r2, r1
 8011f50:	6022      	streq	r2, [r4, #0]
 8011f52:	6063      	str	r3, [r4, #4]
 8011f54:	6004      	str	r4, [r0, #0]
 8011f56:	e7ed      	b.n	8011f34 <_free_r+0x24>
 8011f58:	4613      	mov	r3, r2
 8011f5a:	685a      	ldr	r2, [r3, #4]
 8011f5c:	b10a      	cbz	r2, 8011f62 <_free_r+0x52>
 8011f5e:	42a2      	cmp	r2, r4
 8011f60:	d9fa      	bls.n	8011f58 <_free_r+0x48>
 8011f62:	6819      	ldr	r1, [r3, #0]
 8011f64:	1858      	adds	r0, r3, r1
 8011f66:	42a0      	cmp	r0, r4
 8011f68:	d10b      	bne.n	8011f82 <_free_r+0x72>
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	4401      	add	r1, r0
 8011f6e:	1858      	adds	r0, r3, r1
 8011f70:	4282      	cmp	r2, r0
 8011f72:	6019      	str	r1, [r3, #0]
 8011f74:	d1de      	bne.n	8011f34 <_free_r+0x24>
 8011f76:	6810      	ldr	r0, [r2, #0]
 8011f78:	6852      	ldr	r2, [r2, #4]
 8011f7a:	4401      	add	r1, r0
 8011f7c:	6019      	str	r1, [r3, #0]
 8011f7e:	605a      	str	r2, [r3, #4]
 8011f80:	e7d8      	b.n	8011f34 <_free_r+0x24>
 8011f82:	d902      	bls.n	8011f8a <_free_r+0x7a>
 8011f84:	230c      	movs	r3, #12
 8011f86:	602b      	str	r3, [r5, #0]
 8011f88:	e7d4      	b.n	8011f34 <_free_r+0x24>
 8011f8a:	6820      	ldr	r0, [r4, #0]
 8011f8c:	1821      	adds	r1, r4, r0
 8011f8e:	428a      	cmp	r2, r1
 8011f90:	bf01      	itttt	eq
 8011f92:	6811      	ldreq	r1, [r2, #0]
 8011f94:	6852      	ldreq	r2, [r2, #4]
 8011f96:	1809      	addeq	r1, r1, r0
 8011f98:	6021      	streq	r1, [r4, #0]
 8011f9a:	6062      	str	r2, [r4, #4]
 8011f9c:	605c      	str	r4, [r3, #4]
 8011f9e:	e7c9      	b.n	8011f34 <_free_r+0x24>
 8011fa0:	bd38      	pop	{r3, r4, r5, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20000968 	.word	0x20000968

08011fa8 <_malloc_r>:
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	1ccd      	adds	r5, r1, #3
 8011fac:	f025 0503 	bic.w	r5, r5, #3
 8011fb0:	3508      	adds	r5, #8
 8011fb2:	2d0c      	cmp	r5, #12
 8011fb4:	bf38      	it	cc
 8011fb6:	250c      	movcc	r5, #12
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	4606      	mov	r6, r0
 8011fbc:	db01      	blt.n	8011fc2 <_malloc_r+0x1a>
 8011fbe:	42a9      	cmp	r1, r5
 8011fc0:	d903      	bls.n	8011fca <_malloc_r+0x22>
 8011fc2:	230c      	movs	r3, #12
 8011fc4:	6033      	str	r3, [r6, #0]
 8011fc6:	2000      	movs	r0, #0
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	f000 f87d 	bl	80120c8 <__malloc_lock>
 8011fce:	4a21      	ldr	r2, [pc, #132]	; (8012054 <_malloc_r+0xac>)
 8011fd0:	6814      	ldr	r4, [r2, #0]
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	b991      	cbnz	r1, 8011ffc <_malloc_r+0x54>
 8011fd6:	4c20      	ldr	r4, [pc, #128]	; (8012058 <_malloc_r+0xb0>)
 8011fd8:	6823      	ldr	r3, [r4, #0]
 8011fda:	b91b      	cbnz	r3, 8011fe4 <_malloc_r+0x3c>
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f000 f863 	bl	80120a8 <_sbrk_r>
 8011fe2:	6020      	str	r0, [r4, #0]
 8011fe4:	4629      	mov	r1, r5
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f000 f85e 	bl	80120a8 <_sbrk_r>
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d124      	bne.n	801203a <_malloc_r+0x92>
 8011ff0:	230c      	movs	r3, #12
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	f000 f868 	bl	80120ca <__malloc_unlock>
 8011ffa:	e7e4      	b.n	8011fc6 <_malloc_r+0x1e>
 8011ffc:	680b      	ldr	r3, [r1, #0]
 8011ffe:	1b5b      	subs	r3, r3, r5
 8012000:	d418      	bmi.n	8012034 <_malloc_r+0x8c>
 8012002:	2b0b      	cmp	r3, #11
 8012004:	d90f      	bls.n	8012026 <_malloc_r+0x7e>
 8012006:	600b      	str	r3, [r1, #0]
 8012008:	18cc      	adds	r4, r1, r3
 801200a:	50cd      	str	r5, [r1, r3]
 801200c:	4630      	mov	r0, r6
 801200e:	f000 f85c 	bl	80120ca <__malloc_unlock>
 8012012:	f104 000b 	add.w	r0, r4, #11
 8012016:	1d23      	adds	r3, r4, #4
 8012018:	f020 0007 	bic.w	r0, r0, #7
 801201c:	1ac3      	subs	r3, r0, r3
 801201e:	d0d3      	beq.n	8011fc8 <_malloc_r+0x20>
 8012020:	425a      	negs	r2, r3
 8012022:	50e2      	str	r2, [r4, r3]
 8012024:	e7d0      	b.n	8011fc8 <_malloc_r+0x20>
 8012026:	684b      	ldr	r3, [r1, #4]
 8012028:	428c      	cmp	r4, r1
 801202a:	bf16      	itet	ne
 801202c:	6063      	strne	r3, [r4, #4]
 801202e:	6013      	streq	r3, [r2, #0]
 8012030:	460c      	movne	r4, r1
 8012032:	e7eb      	b.n	801200c <_malloc_r+0x64>
 8012034:	460c      	mov	r4, r1
 8012036:	6849      	ldr	r1, [r1, #4]
 8012038:	e7cc      	b.n	8011fd4 <_malloc_r+0x2c>
 801203a:	1cc4      	adds	r4, r0, #3
 801203c:	f024 0403 	bic.w	r4, r4, #3
 8012040:	42a0      	cmp	r0, r4
 8012042:	d005      	beq.n	8012050 <_malloc_r+0xa8>
 8012044:	1a21      	subs	r1, r4, r0
 8012046:	4630      	mov	r0, r6
 8012048:	f000 f82e 	bl	80120a8 <_sbrk_r>
 801204c:	3001      	adds	r0, #1
 801204e:	d0cf      	beq.n	8011ff0 <_malloc_r+0x48>
 8012050:	6025      	str	r5, [r4, #0]
 8012052:	e7db      	b.n	801200c <_malloc_r+0x64>
 8012054:	20000968 	.word	0x20000968
 8012058:	2000096c 	.word	0x2000096c

0801205c <_realloc_r>:
 801205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205e:	4607      	mov	r7, r0
 8012060:	4614      	mov	r4, r2
 8012062:	460e      	mov	r6, r1
 8012064:	b921      	cbnz	r1, 8012070 <_realloc_r+0x14>
 8012066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801206a:	4611      	mov	r1, r2
 801206c:	f7ff bf9c 	b.w	8011fa8 <_malloc_r>
 8012070:	b922      	cbnz	r2, 801207c <_realloc_r+0x20>
 8012072:	f7ff ff4d 	bl	8011f10 <_free_r>
 8012076:	4625      	mov	r5, r4
 8012078:	4628      	mov	r0, r5
 801207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801207c:	f000 f826 	bl	80120cc <_malloc_usable_size_r>
 8012080:	42a0      	cmp	r0, r4
 8012082:	d20f      	bcs.n	80120a4 <_realloc_r+0x48>
 8012084:	4621      	mov	r1, r4
 8012086:	4638      	mov	r0, r7
 8012088:	f7ff ff8e 	bl	8011fa8 <_malloc_r>
 801208c:	4605      	mov	r5, r0
 801208e:	2800      	cmp	r0, #0
 8012090:	d0f2      	beq.n	8012078 <_realloc_r+0x1c>
 8012092:	4631      	mov	r1, r6
 8012094:	4622      	mov	r2, r4
 8012096:	f7ff ff17 	bl	8011ec8 <memcpy>
 801209a:	4631      	mov	r1, r6
 801209c:	4638      	mov	r0, r7
 801209e:	f7ff ff37 	bl	8011f10 <_free_r>
 80120a2:	e7e9      	b.n	8012078 <_realloc_r+0x1c>
 80120a4:	4635      	mov	r5, r6
 80120a6:	e7e7      	b.n	8012078 <_realloc_r+0x1c>

080120a8 <_sbrk_r>:
 80120a8:	b538      	push	{r3, r4, r5, lr}
 80120aa:	2300      	movs	r3, #0
 80120ac:	4c05      	ldr	r4, [pc, #20]	; (80120c4 <_sbrk_r+0x1c>)
 80120ae:	4605      	mov	r5, r0
 80120b0:	4608      	mov	r0, r1
 80120b2:	6023      	str	r3, [r4, #0]
 80120b4:	f7fe fd0a 	bl	8010acc <_sbrk>
 80120b8:	1c43      	adds	r3, r0, #1
 80120ba:	d102      	bne.n	80120c2 <_sbrk_r+0x1a>
 80120bc:	6823      	ldr	r3, [r4, #0]
 80120be:	b103      	cbz	r3, 80120c2 <_sbrk_r+0x1a>
 80120c0:	602b      	str	r3, [r5, #0]
 80120c2:	bd38      	pop	{r3, r4, r5, pc}
 80120c4:	20001574 	.word	0x20001574

080120c8 <__malloc_lock>:
 80120c8:	4770      	bx	lr

080120ca <__malloc_unlock>:
 80120ca:	4770      	bx	lr

080120cc <_malloc_usable_size_r>:
 80120cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120d0:	1f18      	subs	r0, r3, #4
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bfbc      	itt	lt
 80120d6:	580b      	ldrlt	r3, [r1, r0]
 80120d8:	18c0      	addlt	r0, r0, r3
 80120da:	4770      	bx	lr
 80120dc:	0000      	movs	r0, r0
	...

080120e0 <ceil>:
 80120e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80120e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80120ec:	2e13      	cmp	r6, #19
 80120ee:	4607      	mov	r7, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	460c      	mov	r4, r1
 80120f4:	4605      	mov	r5, r0
 80120f6:	dc31      	bgt.n	801215c <ceil+0x7c>
 80120f8:	2e00      	cmp	r6, #0
 80120fa:	da12      	bge.n	8012122 <ceil+0x42>
 80120fc:	a334      	add	r3, pc, #208	; (adr r3, 80121d0 <ceil+0xf0>)
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	f7ee f84b 	bl	800019c <__adddf3>
 8012106:	2200      	movs	r2, #0
 8012108:	2300      	movs	r3, #0
 801210a:	f7ee fc8d 	bl	8000a28 <__aeabi_dcmpgt>
 801210e:	b128      	cbz	r0, 801211c <ceil+0x3c>
 8012110:	2c00      	cmp	r4, #0
 8012112:	db57      	blt.n	80121c4 <ceil+0xe4>
 8012114:	433c      	orrs	r4, r7
 8012116:	d059      	beq.n	80121cc <ceil+0xec>
 8012118:	2500      	movs	r5, #0
 801211a:	4c2f      	ldr	r4, [pc, #188]	; (80121d8 <ceil+0xf8>)
 801211c:	4623      	mov	r3, r4
 801211e:	462f      	mov	r7, r5
 8012120:	e026      	b.n	8012170 <ceil+0x90>
 8012122:	4a2e      	ldr	r2, [pc, #184]	; (80121dc <ceil+0xfc>)
 8012124:	fa42 f806 	asr.w	r8, r2, r6
 8012128:	ea01 0208 	and.w	r2, r1, r8
 801212c:	4302      	orrs	r2, r0
 801212e:	d01f      	beq.n	8012170 <ceil+0x90>
 8012130:	a327      	add	r3, pc, #156	; (adr r3, 80121d0 <ceil+0xf0>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	f7ee f831 	bl	800019c <__adddf3>
 801213a:	2200      	movs	r2, #0
 801213c:	2300      	movs	r3, #0
 801213e:	f7ee fc73 	bl	8000a28 <__aeabi_dcmpgt>
 8012142:	2800      	cmp	r0, #0
 8012144:	d0ea      	beq.n	801211c <ceil+0x3c>
 8012146:	2c00      	cmp	r4, #0
 8012148:	bfc2      	ittt	gt
 801214a:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801214e:	fa43 f606 	asrgt.w	r6, r3, r6
 8012152:	19a4      	addgt	r4, r4, r6
 8012154:	ea24 0408 	bic.w	r4, r4, r8
 8012158:	2500      	movs	r5, #0
 801215a:	e7df      	b.n	801211c <ceil+0x3c>
 801215c:	2e33      	cmp	r6, #51	; 0x33
 801215e:	dd0b      	ble.n	8012178 <ceil+0x98>
 8012160:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012164:	d104      	bne.n	8012170 <ceil+0x90>
 8012166:	4602      	mov	r2, r0
 8012168:	f7ee f818 	bl	800019c <__adddf3>
 801216c:	4607      	mov	r7, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4638      	mov	r0, r7
 8012172:	4619      	mov	r1, r3
 8012174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012178:	f04f 32ff 	mov.w	r2, #4294967295
 801217c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012180:	fa22 f808 	lsr.w	r8, r2, r8
 8012184:	ea18 0f00 	tst.w	r8, r0
 8012188:	d0f2      	beq.n	8012170 <ceil+0x90>
 801218a:	a311      	add	r3, pc, #68	; (adr r3, 80121d0 <ceil+0xf0>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	f7ee f804 	bl	800019c <__adddf3>
 8012194:	2200      	movs	r2, #0
 8012196:	2300      	movs	r3, #0
 8012198:	f7ee fc46 	bl	8000a28 <__aeabi_dcmpgt>
 801219c:	2800      	cmp	r0, #0
 801219e:	d0bd      	beq.n	801211c <ceil+0x3c>
 80121a0:	2c00      	cmp	r4, #0
 80121a2:	dd02      	ble.n	80121aa <ceil+0xca>
 80121a4:	2e14      	cmp	r6, #20
 80121a6:	d103      	bne.n	80121b0 <ceil+0xd0>
 80121a8:	3401      	adds	r4, #1
 80121aa:	ea25 0508 	bic.w	r5, r5, r8
 80121ae:	e7b5      	b.n	801211c <ceil+0x3c>
 80121b0:	2301      	movs	r3, #1
 80121b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80121b6:	fa03 f606 	lsl.w	r6, r3, r6
 80121ba:	4435      	add	r5, r6
 80121bc:	42bd      	cmp	r5, r7
 80121be:	bf38      	it	cc
 80121c0:	18e4      	addcc	r4, r4, r3
 80121c2:	e7f2      	b.n	80121aa <ceil+0xca>
 80121c4:	2500      	movs	r5, #0
 80121c6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80121ca:	e7a7      	b.n	801211c <ceil+0x3c>
 80121cc:	4625      	mov	r5, r4
 80121ce:	e7a5      	b.n	801211c <ceil+0x3c>
 80121d0:	8800759c 	.word	0x8800759c
 80121d4:	7e37e43c 	.word	0x7e37e43c
 80121d8:	3ff00000 	.word	0x3ff00000
 80121dc:	000fffff 	.word	0x000fffff

080121e0 <floor>:
 80121e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80121e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80121ec:	2e13      	cmp	r6, #19
 80121ee:	4607      	mov	r7, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	460c      	mov	r4, r1
 80121f4:	4605      	mov	r5, r0
 80121f6:	dc35      	bgt.n	8012264 <floor+0x84>
 80121f8:	2e00      	cmp	r6, #0
 80121fa:	da16      	bge.n	801222a <floor+0x4a>
 80121fc:	a336      	add	r3, pc, #216	; (adr r3, 80122d8 <floor+0xf8>)
 80121fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012202:	f7ed ffcb 	bl	800019c <__adddf3>
 8012206:	2200      	movs	r2, #0
 8012208:	2300      	movs	r3, #0
 801220a:	f7ee fc0d 	bl	8000a28 <__aeabi_dcmpgt>
 801220e:	b148      	cbz	r0, 8012224 <floor+0x44>
 8012210:	2c00      	cmp	r4, #0
 8012212:	da5b      	bge.n	80122cc <floor+0xec>
 8012214:	2500      	movs	r5, #0
 8012216:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801221a:	4a31      	ldr	r2, [pc, #196]	; (80122e0 <floor+0x100>)
 801221c:	433b      	orrs	r3, r7
 801221e:	42ab      	cmp	r3, r5
 8012220:	bf18      	it	ne
 8012222:	4614      	movne	r4, r2
 8012224:	4623      	mov	r3, r4
 8012226:	462f      	mov	r7, r5
 8012228:	e026      	b.n	8012278 <floor+0x98>
 801222a:	4a2e      	ldr	r2, [pc, #184]	; (80122e4 <floor+0x104>)
 801222c:	fa42 f806 	asr.w	r8, r2, r6
 8012230:	ea01 0208 	and.w	r2, r1, r8
 8012234:	4302      	orrs	r2, r0
 8012236:	d01f      	beq.n	8012278 <floor+0x98>
 8012238:	a327      	add	r3, pc, #156	; (adr r3, 80122d8 <floor+0xf8>)
 801223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223e:	f7ed ffad 	bl	800019c <__adddf3>
 8012242:	2200      	movs	r2, #0
 8012244:	2300      	movs	r3, #0
 8012246:	f7ee fbef 	bl	8000a28 <__aeabi_dcmpgt>
 801224a:	2800      	cmp	r0, #0
 801224c:	d0ea      	beq.n	8012224 <floor+0x44>
 801224e:	2c00      	cmp	r4, #0
 8012250:	bfbe      	ittt	lt
 8012252:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012256:	fa43 f606 	asrlt.w	r6, r3, r6
 801225a:	19a4      	addlt	r4, r4, r6
 801225c:	ea24 0408 	bic.w	r4, r4, r8
 8012260:	2500      	movs	r5, #0
 8012262:	e7df      	b.n	8012224 <floor+0x44>
 8012264:	2e33      	cmp	r6, #51	; 0x33
 8012266:	dd0b      	ble.n	8012280 <floor+0xa0>
 8012268:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801226c:	d104      	bne.n	8012278 <floor+0x98>
 801226e:	4602      	mov	r2, r0
 8012270:	f7ed ff94 	bl	800019c <__adddf3>
 8012274:	4607      	mov	r7, r0
 8012276:	460b      	mov	r3, r1
 8012278:	4638      	mov	r0, r7
 801227a:	4619      	mov	r1, r3
 801227c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012280:	f04f 32ff 	mov.w	r2, #4294967295
 8012284:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012288:	fa22 f808 	lsr.w	r8, r2, r8
 801228c:	ea18 0f00 	tst.w	r8, r0
 8012290:	d0f2      	beq.n	8012278 <floor+0x98>
 8012292:	a311      	add	r3, pc, #68	; (adr r3, 80122d8 <floor+0xf8>)
 8012294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012298:	f7ed ff80 	bl	800019c <__adddf3>
 801229c:	2200      	movs	r2, #0
 801229e:	2300      	movs	r3, #0
 80122a0:	f7ee fbc2 	bl	8000a28 <__aeabi_dcmpgt>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d0bd      	beq.n	8012224 <floor+0x44>
 80122a8:	2c00      	cmp	r4, #0
 80122aa:	da02      	bge.n	80122b2 <floor+0xd2>
 80122ac:	2e14      	cmp	r6, #20
 80122ae:	d103      	bne.n	80122b8 <floor+0xd8>
 80122b0:	3401      	adds	r4, #1
 80122b2:	ea25 0508 	bic.w	r5, r5, r8
 80122b6:	e7b5      	b.n	8012224 <floor+0x44>
 80122b8:	2301      	movs	r3, #1
 80122ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80122be:	fa03 f606 	lsl.w	r6, r3, r6
 80122c2:	4435      	add	r5, r6
 80122c4:	42bd      	cmp	r5, r7
 80122c6:	bf38      	it	cc
 80122c8:	18e4      	addcc	r4, r4, r3
 80122ca:	e7f2      	b.n	80122b2 <floor+0xd2>
 80122cc:	2500      	movs	r5, #0
 80122ce:	462c      	mov	r4, r5
 80122d0:	e7a8      	b.n	8012224 <floor+0x44>
 80122d2:	bf00      	nop
 80122d4:	f3af 8000 	nop.w
 80122d8:	8800759c 	.word	0x8800759c
 80122dc:	7e37e43c 	.word	0x7e37e43c
 80122e0:	bff00000 	.word	0xbff00000
 80122e4:	000fffff 	.word	0x000fffff

080122e8 <round>:
 80122e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ea:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80122ee:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80122f2:	2c13      	cmp	r4, #19
 80122f4:	4606      	mov	r6, r0
 80122f6:	460d      	mov	r5, r1
 80122f8:	460b      	mov	r3, r1
 80122fa:	468c      	mov	ip, r1
 80122fc:	4602      	mov	r2, r0
 80122fe:	dc17      	bgt.n	8012330 <round+0x48>
 8012300:	2c00      	cmp	r4, #0
 8012302:	da09      	bge.n	8012318 <round+0x30>
 8012304:	3401      	adds	r4, #1
 8012306:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801230a:	d103      	bne.n	8012314 <round+0x2c>
 801230c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012310:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012314:	2200      	movs	r2, #0
 8012316:	e028      	b.n	801236a <round+0x82>
 8012318:	4915      	ldr	r1, [pc, #84]	; (8012370 <round+0x88>)
 801231a:	4121      	asrs	r1, r4
 801231c:	420d      	tst	r5, r1
 801231e:	d100      	bne.n	8012322 <round+0x3a>
 8012320:	b178      	cbz	r0, 8012342 <round+0x5a>
 8012322:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012326:	4123      	asrs	r3, r4
 8012328:	4463      	add	r3, ip
 801232a:	ea23 0301 	bic.w	r3, r3, r1
 801232e:	e7f1      	b.n	8012314 <round+0x2c>
 8012330:	2c33      	cmp	r4, #51	; 0x33
 8012332:	dd09      	ble.n	8012348 <round+0x60>
 8012334:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012338:	d103      	bne.n	8012342 <round+0x5a>
 801233a:	f7ed ff2f 	bl	800019c <__adddf3>
 801233e:	4606      	mov	r6, r0
 8012340:	460d      	mov	r5, r1
 8012342:	4630      	mov	r0, r6
 8012344:	4629      	mov	r1, r5
 8012346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012348:	f04f 30ff 	mov.w	r0, #4294967295
 801234c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012350:	40f8      	lsrs	r0, r7
 8012352:	4206      	tst	r6, r0
 8012354:	d0f5      	beq.n	8012342 <round+0x5a>
 8012356:	2101      	movs	r1, #1
 8012358:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801235c:	fa01 f404 	lsl.w	r4, r1, r4
 8012360:	1932      	adds	r2, r6, r4
 8012362:	bf28      	it	cs
 8012364:	185b      	addcs	r3, r3, r1
 8012366:	ea22 0200 	bic.w	r2, r2, r0
 801236a:	4619      	mov	r1, r3
 801236c:	4610      	mov	r0, r2
 801236e:	e7e6      	b.n	801233e <round+0x56>
 8012370:	000fffff 	.word	0x000fffff

08012374 <_init>:
 8012374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012376:	bf00      	nop
 8012378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801237a:	bc08      	pop	{r3}
 801237c:	469e      	mov	lr, r3
 801237e:	4770      	bx	lr

08012380 <_fini>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	bf00      	nop
 8012384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012386:	bc08      	pop	{r3}
 8012388:	469e      	mov	lr, r3
 801238a:	4770      	bx	lr
